PARSING AND DERIVATIONAL EQUIVALENCE* 
Mark Hepple and Glyn Morrill 
Centre for Cognitive Science, University of Edinburgh 
2 Buccleuch Place, Edinburgh EH8 9LW Scotland 
Abst ract  
It is a tacit assumption of much linguistic inquiry 
that all distinct derivations of a string should assign 
distinct meanings. But despite the tidiness of such 
derivational uniqueness, there seems to be no a pri- 
ori reason to assume that a gramma r must have this 
property. If a grammar exhibits derivational equiv- 
alence, whereby distinct derivations of a string as- 
sign the same meanings, naive exhaustive search 
for all derivations will be redundant, and quite 
possibly intractable. In this paper we show how 
notions of derivation-reduction and normal form 
can be used to avoid unnecessary work while pars- 
ing with grammars exhibiting derivational equiv- 
alence. With grammar regarded as analogous to 
logic, derivations are proofs; what we are advocat- 
ing is proof-reduction, and normal form proof; the 
invocation of these logical techniques adds a further 
paragraph to the story of parsing-as-deduction. 
I n t roduct ion  
The phenomenon of derivational equivalence 
is most evident in work on generalised categorial 
grammars, where it has been referred to as ~spu- 
rious ambiguity'. It has been argued that the ca- 
pacity to assign left-branching, and therefore incre- 
mentally interpretable, analyses makes these gram- 
mars of particular psychological interest. We will 
illustrate our methodology by reference to gener- 
alised categorial grammars using a combinatory 
logic (as opposed to say, lambda-calculus) seman- 
tics. In particular we consider combinatory (cate- 
gorial) grammars with rules and generalised rules 
*We thank Mike Reape for criticism and suggestions in 
relation to this material, and Inge Bethke and Henk Zee- 
vat for reading a late draft. All errors are our own. The 
work was carried out by the alphabetically first author under 
ESRC Postgraduate Award C00428722003 and by the sec- 
ond under ESRC Postgraduate Award C00428522008 and 
an SERC Postdoctoral Fellowship in IT. 
of the kind of Steedman (1987), and with metarules 
(Morri~ 19ss). 
Although the problem of derivational equiva- 
lence is most apparent in generalised categorial 
grammars, the problem is likely to recur in many 
grammars characterising a full complement of con- 
structions. For example, suppose that a grammar 
is capable of characterising right extraposition of 
an object's adjunct to clause-final position. Then 
sentences such as Joha met a man yesterday who 
swims will be generated. But it is probable that 
the same grammar will assign Joha met a maa who 
swims a right extraposition derivation in which the 
relative clause happens to occupy its normal posi- 
tion in the string; the normal and right extrapo- 
sition derivations generate the same strings with 
the same meanings, so there is derivational equiva- 
lence. Note that a single equivalence of this kind in 
a grammar undermines a methodological ssump- 
tion of derivational uniqueness. 
Combinatory Logic and Combina- 
tory Grammar  
Combinatory logic (CL; Curry and Feys, 1958; 
Curry, Hindley and Seldin, 1972; Hindley and 
Seldin, 1986) refers to systems which are ap- 
plicative, like the lambda-calculi, but which for- 
malise functional abstraction through a small num- 
ber of basic 'combinators',  rather than through a 
variable-binding operator like A. We will define a 
typed combinatory logic. Assume a set of basic 
types, say e and t. Then the set of types is defined 
as follows: 
(1) a. If A is a basic type then A is a type 
b. If A and B are types then A-*B is a type 
A convention of right-associativity will be used for 
types, so that e.g. (e--,t)-*(e--,t) may be writ- 
- 10 -  
ten (e---*t)--*e--,t. There is a set of constants (say, 
John', walks', ...), and a mapping from the set of 
constants into the set of types. In addition there 
are the combinators in (2); their lambda-analogues 
are shown in parentheses. 
(2) IA-.., A 
B(B-~ C)-* (A--~B)-*A-*C 
C (A-* B--~C)-~ B--* A--~C 
W(A--* A-*B)-*A--*B 
(~x\[x\]) 
(~x~y~,.\[x(y--)}) 
(~x~y~,.\[(x,)y\]) 
(AxAy\[(xy)y\]) 
The set of CL-terms is defined thus: 
(3) a. If M is a constant or combinator f type A then 
M is a CL-term of type A 
b. If M is a CL-term of type B---~A and N is a CL- 
term of type B then (MN) is a CL-term of type 
A. 
The interpretation of a term built by (3b) is given 
by the functional application of the interpretation 
of the left-hand sub-term to that of the right- 
hand one. We will assume a convention of left- 
association for application. Some examples of CL- 
terms are as follows, where the types are written 
below each component term: 
(4) a. walks' John' 
e-*t  e 
b. C I 
((e---* t) ---, e-* t )--* e---, (e---, t) --* t (e---,t)---,e---,t 
e-* (e--* t)---,t 
c. B probably I walks' 
(t-* t ) -*  (e- -*t) -*e-*t  t--*t e--~t 
(e-*t)-*e--+t 
e--~t 
Other basic combinators can be used in a CL, for 
example S, which corresponds to Ax~yAz\[(xz)(yz)\]. 
Our CL definition is (extensionally) equivalent o 
the ALcalculus, i.e. the lambda-calculus without 
vacuous abstraction (terms of the form AxM where 
x does not occur in M). There is a combinator K
(AxAy\[x\]) which would introduce vacuous abstrac- 
tion, and the CL with S and K is (extensionally) 
equivalent to the AK-calculus, i.e. the full lambda- 
calculus. 
A combinatory grammar (CG) can be defined in 
a largely analogous manner. Assume a set of basic 
categories, say S, NP, ... Then the set of categories 
is defined as follows: 
(5) a. If X is a basic category then X is a category 
b. If X and Y are categories then X/Y and X\Y are 
categories 
A convention of left-associativity will be used for 
categories, so that e.g. (S \NP) \ (S \NP)  may be 
written S \NP\ (S \NP) .  There is a set of words, 
and a lexical association of words with categories. 
There is a set of rules with combinators, mini- 
mally: 
(6) a. Forward Application (>) 
f: X/Y+Y=~X (where fxy=xy)  
b. Backward Application (<) 
b: Y+X\Y  ::~ X (wherebyx=xy)  
The set of CG-terms is defined thus: 
(7) a. If M is word of category A then M is a CG-term 
of category A
b. If X I+.  • "+Xn :~ X0 is a rule with combinator ~b, 
and $1, ..., Sn are CG-terms of category X1,..., 
Xn, then \[~# S1 ... Sn\] is a CG-term of category 
X0. 
The interpretation of a term built by (Tb) is given 
by the functional application of the combinator to 
the sub-term interpretations in left-to-right order. 
A verb phrase containing an auxiliary can be de- 
rived as in (8) (throughout, VP abbreviates S\NP).  
The meaning assigned is given by (ga), which is 
equal to (91)). 
(8) will see John 
VP/VP VP/NP NP 
.> 
VP 
) 
VP 
(9) a. (f will' (f see' John')) 
b. will' (see' John') 
Suppose the grammar is augmented with a rule 
of functional composition (10), as is claimed to be 
appropriate for analysis of extraction and coordina- 
tion (Ades and Steedman, 1982; Steedman, 1985). 
Then for example, the right hand conjunct in ( l la)  
can be analysed as shown in ( l lb) .  
-11 -  
(10) Forward Composition (>B) 
B: X /Y  + Y/Z =~ X/Z (where B x y z = x (y z)) 
(11) a. Mary \[phoned and will see\] John 
b. will see 
VP/VP VP/NP 
.>B 
VP/NP 
Forward Application of ( l lb)  to John will assign 
meaning (12) which is again equal to (gb), and this 
is appropriate because toill see John is unambigu- 
ous. 
(12) (f (B will' see') John') 
However the grammar now exhibits derivational 
equivalence, with different derivations assigning 
the same meaning. In general a sequence 
A1/A2 +A2/A3 9.A3/A4 9."'9"An can be analysed 
aS AI with the same meaning by combining any 
pair of adjacent elements at each step. Thus there 
are a number of equivalent derivations equal to 
the number  of n-leaf binary trees; this is given by 
the Catalan series, which is such that Catalan(n) 
> 2 '~-2. As well as it being inefficient o search 
through derivations which are equivalent, he expo- 
nential figure signifies computational intractability. 
Several suggestions have been made in relation 
to this problem. Pareschi and Steedman (1987) de- 
scribe what they call a 'lazy chart parser' intended 
to yield only one of each set of equivalent analy- 
ses by adopting a reduce-first parsing strategy, and 
invoking a special recovery procedure to avoid the 
backtracking that this strategy would otherwise ne- 
cessitate. But Hepple (1987) shows that their al- 
gorithm is incomplete. 
Wittenburg (1987) presents an approach in 
which a combinatory grammar is compiled into one 
not exhibiting derivational equivalence. Such com- 
pilation seeks to avoid the problem of parsing with 
a grammar exhibiting derivational equivalence by 
arranging that the grammar used on-line does not 
have this property. The concern here however is 
management of parsing when the grammar used 
on-line does have the problematic property. 
Karttunen (1986) suggests a strategy in which 
every potential new edge is tested against he chart 
to see whether an existing analysis spanning the 
same region is equivalent. If one is found, the new 
analysis is discarded. However, because this check 
requires comparison with every edge spanning the 
relevant region, checking time increases with the 
number of such edges. 
The solution we offer is one in which there is 
a notion of normal form derivation, and a set of 
contraction rules which reduce derivations to their 
normal forms, normal form derivations being those 
to which no contraction rule can apply. The con- 
traction rules might be used in a number of ways 
(e.g. to transform one derivation into another, 
rather than recompute from the start, cf. Pareschi 
and Steedman). The possibility emphasised here 
is one in which we ensure that a processing step 
does not create a non-normal form derivation. Any 
such derivation is dispensable, assuming exhaustive 
search: the normal form derivation to which it is 
equivalent, and which won't be excluded, will yield 
the same result. Thus the equivalence check can 
be to make sure that each derivation computed is 
a normal form, e.g. by checking that no step creates 
a form to which a contraction rule can apply. Un- 
like Karttunen's ubsumption check this test does 
not become slower with the size of a chart. The test 
to see whether a derivation is normal form involves 
nothing but the derivation itself and the invarlant 
definition of normal form. 
The next section gives a general outline of re- 
duction and normal forms. This is followed by an 
illustration in relation to typed combinatory logic, 
where we emphasise that the reduction constitutes 
a proof-reduction. We then describe how the no- 
tions can be applied to combinatory grammar to 
handle the problem of parsing and derivational 
equivalence, and we again note that if derivations 
are regarded as proofs, the method is an instantia- 
tion of proof-reduction. 
Reduct ion  and  Normal  Form 
It is a common state of affairs for some terms of 
a language to be equivalent in that for the intended 
semantics, their interpretations are the same in all 
models. In such a circumstance it can be useful to 
elect normal forms which act as unique represen- 
tatives of their equivalence class. For example, if 
terms can be transformed into normal forms, equiv- 
alence between terms can be equated with identity 
of normal forms. 1 
The usual way of defining normal forms is by 
1For our purposes 'identity I can mean exact syntactic 
identity, and this simplifies discussion somewhat; ina system 
with bound variables uch as the lambda-calculus, identity 
would mean identity up to renaming of bound variables. 
- 12 -  
defining a re lat ion l> ( 'contracts- to ' )  of CONTRAC- 
TION between equivalent terms; a term X is said to 
be in NORMAL FORM if and only if there is no term 
Y such that  X 1> Y. The contract ion re lat ion gen- 
erates a reduct ion re lat ion ~ ( ' reduces-to')  and an 
equal i ty  re lat ion -- ( 'equals')  between terms as fol- 
lows: 
(13) a. I fX I> YthenX_> Y 
b. X>X 
c. If X_> YandY_> Z thenX >_ Z 
(14) a. I fX I> Y thenX=Y 
b. X=X 
c. If X= YandY= Z thenX= Z 
d. I fX= YthenY= X 
The equal i ty  re lat ion is sound with respect  to a 
semant ic  equivalence relat ion -- if X = Y implies 
X = Y, and complete if X ---Y implies X -- Y. I t  is a 
sufficient condit ion for soundness that  the contrac-  
t ion re lat ion is valid. Y is a normal  form of X if and 
only if Y is a normal  form and X _> Y. A sequence 
X0 I> X1 1> . . -  I> Xn is cal led a REDUCTION (of 
X0 to X.). 
We see from (14) that  if there is a T such that  P 
>_ T and Q >_ T, then P -- Q (-- T).  In part icular ,  
if X and Y have the same normal  form, then X -- 
Y. 
Suppose the relat ions of reduct ion and equal i ty  
generated by the contract ion relat ion have the fol- 
lowing property:  
(15) Church-Rosser (C-R): If P --- Q then there is a T 
such that P >_ T and Q _> T. 
There follow as corol laries that  if P and Q are dis- 
t inct normal  forms then P ~ Q, and that  any nor- 
mal  form of a term is uniquef l  If two terms X and 
Y have dist inct  normal  forms P and Q, then X -- 
PandY- -Q ,  butP~Q,  soX~ Y. 
2Suppose P and Q are distinct normal forms and that P 
---- Q. Because normal forms only reduce to themselves and 
P and Q are distinct, there is no term to which P and Q can 
both reduce. But C-R tells us that if P = Q, then there/a 
a term to which they can both reduce. And suppose that 
a term X has distinct normal forms P and Q; then X = P, 
X = Q, and P -- Q. But by the first corollary, for distinct 
normal forms P and Q, P ~ Q. 
We have establ ished that  if two terms have the 
same normal  form then they are equal and (given 
C-R) that  if they have different normal  forms then 
they are not equal, and that  normal  forms are 
unique. Suppose we also have the following prop- 
erty: 
(16) Strong Normalisation (SN): Every reduction is finite. 
This  has the corol lary (normal isat ion) that  every 
term has a normal  form. A sufficient condit ion to 
demonstrate  SN would be to find a metr ic  which 
assigns to each term a finite non-negat ive integer 
score, and to show that  each appl icat ion of a con- 
t ract ion decrements the score by a non-zero inte- 
gral amount .  It  follows that  any reduct ion of a term 
must  be finite. Given both  C-R and SN, equal i ty is 
decidable: we can reduce any terms to their  normal  
forms in a finite number  of steps, and compare for 
identity. 
Norxizal Form and Proof -Reduct ion 
in Combinatory  Logic 
In the CL case, note for example the following 
equivalence (omitt ing types for the moment) :  
(17) B probably ~ walks ~ John ~ -- probably ~(walks' John #) 
We may have the following contract ion rules: 
(18) a. IM  I>M 
b. BMNP i>M(NP)  
c. CMNP i>MPN 
d. WMN i>MNN 
These state that  any term containing an occurrence 
of the form on the left can be transformed to one 
in which the occurrence is replaced by the form on 
the r ight.  A form on the left is cal led a REDEX, the 
form on the r ight,  its CONTRACTUM. To see the va- 
l id i ty of the contract ion re lat ion defined (and the 
soundness of the consequent equal i ty) ,  note that  
the funct ional  interpretat ions  of a redex and a con- 
t rac tum are the same, and that  by compos i t iona l  
ity, the interpretat ion of a term is unchanged by 
subst i tut ion of a subterm for an occurrence of a 
subterm with the same interpretat ion.  An exam- 
ple of reduct ion of a term to its normal  form is as 
follows: 
- 13 -  
(19) C I John' (B probably' walks n) I> 
I (B probably I walkd) Johnll> 
B probably ~ walk~ John' I> 
probably I (walks' John') 
Returning to emphasise types, observe that they 
can be regarded as formulae of implicational logic. 
In fact the type schemes of the basic combinators 
in (2), together with a modus ponens rule corre- 
sponding to the application in (3b), provide an 
axiomatisation f relevant implication (see Morrill 
and Carpenter, 1987, for discussion in relation to 
grammar): 
(20) a. A-+A 
(B-+C)-+(A-+B)-+A-+C 
(A-*B-+C)-+(B-+A-+C) 
(A.--,A-~B)--*A-'*B 
b. B---~A B 
A 
Consider the typed CL-terms in (4). For each of 
these, the tree of type formulae is a proof in im- 
plicational relevance logic. Corresponding to the 
term-reduction a d normal form in (19), there is 
proof-reduction a d a normal form for a proof over 
the language of types (see e.g. Hindley and Seldin, 
1986). There can be proof-contraction rules such 
as the following: 
(21) B N M P 
m ~ ~ m 
(B-+C)-+(A-~B)-+A-+C B-*C A-+B A 
(A-+B)-+A-+C 
A-+C 
c 
N M P 
B--~C A--,B A 
1> 
B 
c 
Proof-reduction originated with Prawitz (1965) 
and is now a standard technique in logic. The sug- 
gestion of this paper is that if parse trees labelled 
with categories can be regarded as proofs over the 
language of categories, then the problem of parsing 
and derivational equivalence an be treated on the 
pattern of proof-reductlon. 
Before proceeding to the grammar cases, a cou- 
ple of remarks are in order. The equivalence ad- 
dressed by the reductions above is not strong (ex- 
tensional), but what is called weak equivalence. For 
example the following pairs (whose types have been 
omitted) are distinct weak normal forms, but are 
extensionally equivalent: 
(22) a. B (B probablyanecessarily l) walks l 
b. B probablyW(B necessarilylwalks s) 
(23) a. B I walks I 
b. walks' 
Strong equivalence and reduction is far more com- 
plex than weak equivalence and reduction, but un- 
fortunately it is the former which is appropriate 
for the grammars. Later examples will thus differ 
in this respect from the one above. A second dif- 
ference is that in the example above, combinators 
are axioms, and there is a single rule of applica- 
tion. In the grammar cases combinators are rules. 
Finally, grammar derivations have both a phono- 
logical interpretation (dependent on the order of 
the words), and a semantic interpretation. Since 
no derivations are equivalent if they produce a dif- 
ferent sequence of words, derivation reduction must 
always preserve word order. 
Normal  Form and Proof -Reduct ion  
in Combinatory  Grammar  
Consider a combinatory grammar containing 
the application rules, Forward Composition, and 
also Subject Type-Raising (24); the latter two en- 
able association of a subject with an incomplete 
verb phrase; this is required in (25), as shown in 
(26). 
(24) Subject Type-Raising (>T) 
T: NP =~ S/(S\NP) (where T y x = x y) 
(25) a. \[John likes and Mary loves\] opera 
b. the man who John likes 
(26) John likes 
NP S\NP/NP 
"-->T 
S/(S\NP) 
.>B 
S/NP 
This grammar will allow many equivalent 
derivations, but consider the following contraction 
rules: 
- 14 -  
x /v  Y/Z z 
,>B 
x/z  
x 
x/Y v /z  z 
l>~ Y 
X 
(f(B ~y) ,) = (fx ( ry, ) )  
b. X/Y Y/Z Z/W X/Y Y/Z Z/W 
• >B >B 
X/Z 1>2 Y/W 
>B ,>B 
x /w x /w 
(B (Bxy)  z )= (Bx(By , ) )  
C. NP S\NP NP S\NP 
S/(S\NP) I>s S 
S 
(f(Tx) y) ---- (b x y) 
Each contraction rule states that a derivation 
containing an occurrence of the redex can be trans- 
formed into an equivalent one in which the occur- 
rence is replaced by the contractum. To see that 
the rules are valid, note that in each contraction 
rule constituent order is preserved, and that the 
determination of the root meaning in terms of the 
daughter meanings i (extensionally) equivalent un- 
der the functional interpretation of the combina- 
tors. 
Observe by analogy with combinatory logic that 
a derivation can be regarded as a proof over the 
language of categories, and that the derivation- 
reduction defined above is a proof-reduction. So 
far as we are aware, the relations of reduction and 
equality generated observe the C-R corollaries that 
distinct normal forms are non-equal, and that nor- 
mal forms are unique. We provid e the following 
reasoning to the effect that SN holds. 
Assign to each derivation a score, depending on 
its binary and unary branching tree structure as 
follows: 
(28) a. An elementary tree has score 1 
b. If a left subtree has score z and a right subtree has 
score y, the binary-branching tree formed from 
them has score 2z -t- y 
c. If a subtree has score z then a unary-branching 
tree formed from it has score 2z 
All derivations will have a finite score of at least 1. 
Consider the scores for the redex and contractum in
each of the above. Let z, y, and z be the scores for 
the subtrees dominated by the leaves in left-to-right 
order. For I>1, the score of the redex is 2(2z÷y)÷z 
and that of its contractum is 2z-t-(2y + z): a decre- 
ment of 2z, and this is always non-zero because all 
scores are at least 1. The case of 1>2 is the same. 
In I>s the score of the redex is 2(2z) -t- y, that of 
the contractum 2~-t-y: also a proper decrement. So 
all reductions are finite, and there is the corollary 
that all derivations have normal forms. 
Since all derivations have normal forms, we can 
safely limit attention in parsing to normal form 
derivations: for all the derivations excluded, there 
is an equivalent normal form which is not excluded. 
If not all derivations had normal forms, limitation 
to normal forms might lose those derivations in the 
grammar which do not have normal forms. The 
strategy to avoid unnecessary work can be to dis- 
continue any derivation that contains a redex. The 
test is neutral as to whether the parsing algorithm 
is, e.g. top-down or bottom-up. 
The seven derivations of John will see Mary in 
the grammar are shown below. Each occurrence of 
a redex is marked with a correspondingly labelled 
asterisk. It will be seen that of the seven logical 
possibilities, only one is now licensed: 
(29) a. John will see Mary 
NP VP/VP VP/NP NP 
> 
VP 
b. 
VP 
C 
John will see Mary 
VP /NPm , 
\ VP 
S 
c. John will see Mary 
m m 
NP VP/VP VP/NP NP 
S/NP ~. 
S 
- 15 -  
d. John will see Ma"~y 
* i  NP>T VP/VP VTTNP NP  
e. John will see Mary 
NP vP/vP vP/NP NP 
~>T ~B 
* l  S/VF' S/NP VP/NP S.>S .> )
f. John will see Mary *tNP;1,~'VP/VP V /NP>B~NP ~ 
/ J \[- "s vP) , 
g. John will see Mary 
NP VP/VP VP/NP NP 
~>T ~, 
"1~'S/VP ) 
S/VP ~B VP.> 
S 
The derivations are related by the contraction 
relation as follows: 
(so) 1 3 
2/e  " f ~ b - ~  
/ 
c a 
Consider now the combinatory grammar ob- 
tained by replacing Forward Composition by 
the Generallsed Forward Composition rule (31a}, 
whose semantics B"  is recursively defined in terms 
of B as shown in (31b). 
(31) a. 
b. 
Generalised Forward Composition (>B"): 
B": X/Y + Y/ZI.--/Zn =~ X/ZI '"/Zn 
B* =B;  B "+z = BBB n, .>  1 
This rule allows for combinations such as the fol- 
lowing: 
(32) will give 
vP/vP vP/PP/NP 
>B 2 
VP/PP/NP 
We may accompany the adoption of this rule with 
replacement of the contraction rule (27b) by the 
following generalised version: 
(ss) a. X/Y WZz"'/Zm Zm/Wz"'/W. ,)B m 
Y/Zz.. -/Zm 
-~B n 
x /zz - -  . / z~.z /wz - . . /Wn 
X/Y Y/Zz---/Z~ Zm/Wz.../Wn ,~B n 
l>g Y/ZI.../Zm.1/Wl.../Wn .)Bin+n-1 
X/Zr--/Zm.1/Wr--/Wn 
b. (B n (Bm x y) ,) = (B ('r'+"-*) x (B" y ~-)) 
for ,  > I; m>_l 
It will be seen that (33a) has (27b) as the special 
case n = 1, m = 1. Furthermore, if we admit a 
combinator B ° which is equivalent to the combi- 
nator f, and use this as the semantics for Forward 
Application, we can extend the generalised contrac- 
tion rule (33) to have (27a) as a special case also 
(by allowing the values for m and n to be such that 
, ~_ 0; m > 1). It will be seen that again, every 
contraction results in a proper decrement of the 
score assigned, so that SN holds. 
In Morrill (1988) it is argued at length that even 
rules like generalised forward composition are not 
adequate to characterise the full range of extrac- 
tion and coordination phenomena, nd that deeper 
generalisations eed to be expressed. In particular, 
a system is advocated in which more complex rules 
are derived from the basic rules of application by 
the use of metarules, like that in (34); these are sim- 
ilar to those of G azdar (1981), but with slash inter- 
preted as the categorial operator (see also Geach, 
1972, p485; Moo/tgat, 1987, plS). 
(34) Right Abstraction 
#: X+Y=~V ==~ R~b: X+Y/Z=>V/Z 
(where (R g x y) -- = gx(yz)  ) 
Note for instance that applying Right Abstraction 
to Forward Application yields Steedman's Forward 
Composition primitive, and that successive appli- 
cation yields higher order compositions: 
- 16 -  
(35) a. Rf: X /Y  + Y/Z ::~ X/Z  
b. R(Rf): X/Y + Y/Z/W ::~ X/Z/W 
Applying Right Abstraction to Backward Applica- 
tion yields a combinator capable of assembling a 
subject and incomplete verb phrase, without first 
type-raising the subject: 
(36) a. 
b. 
Rb: Y + X\Y/Z =~ X/Z 
John likes 
NP S\NP/NP 
'Rb 
S/NP 
(Note that for this approach, the labelling for a rule 
used in a derivation is precisely the combinator that 
forms the semantics for that rule.) 
Consider a g rammar  with just the applica- 
tion rules and Right Abstraction. Let R '~ be 
R( . . .  1%(~6)...) with n _> 0 occurrences of R. In- 
stead of the contraction rules earlier we may have: 
(3~) a. x v /z  z /w l . . . /w .  
R"f 
YIWI'--IW. 
VlW~...lw. 
x VlZ z lwr . . lw .  
~,~ V/Z 
Rnf 
v /w l . . . /w .  
b. (R"~b x (Rnf y z)) -- (R"r (Re x y) z) 
Suppose we now assign scores as follows: 
(38) a. An elementary tree has score I 
b. If a left subtree has score z and a right subtree has 
score y, the binary-branching tree formed from 
them has score z + 21/ 
The score ofa redex will be x+2(y-i-2z) and that of 
its contractum (x + 2y) + 2z: a proper decrement, 
so SN holds and all derivations have normal forms 
as before. For the sentence John will see Mary, 
the grammar allows the set of derivations shown in 
(39). 
(sg) a .  John will see Mary 
NP VP /VP  VP /NP  NP  
Rb  
s/vP 
Rf  
S/NP 
f 
S 
b. John will see Mary 
c. John will see Mary 
j 
f 
S 
d. John will see Mary 
NP VP/VP VP/NP NP 
Rf 
e. John will see Maw 
NP~ VP/VPRb VP/NP NP ) 
" _ v ' ,  
\ . S 
As before, we can see that only one derivation, 
(39b), contains no redexes, and it is thus the only 
admissible normal form derivation. The derivations 
are related by the contraction relation as follows: 
(40) b ' d ~ c . a 
Conc lus ion  
We have offered a solution to the problem of 
parsing and derivational equivalence by introduc- 
ing a notion of normal-form derivation. A defini- 
tion of redex can be used to avoid computing non- 
normal form derivations. Computing only normal 
form derivations i safe provided every non-normal 
form derivation has a normal form equivalent. By 
- 17 -  
demonstrating strong normalisation for the exam- 
ples given, we have shown that every derivation 
does have a normal form, and that consequently 
parsing with this method is complete in the sense 
that at least one member of each equivalence class 
is computed. In addition, it would be desirable 
to show that the Church-Rosser property holds, to 
guarantee that each equivalence class has a unique 
normal form. This would ensure that parsing with 
this method is optimal in the sense that for each 
equivalence class, only one derivation is computed. 
References  
Ades, A. and Steedman, M. J. 1982. On the Or- 
der of Words. Linguistics and Philosophy, 4: 517- 
558. 
Curry, H. B. and Feys, R. 1958. Combinatory 
logic, Volume I. North Holland, Amsterdam. 
Curry, H. B., Hindley, J. R. and Seldin, J. P. 
1972. Combinatory logic, Volume II. North Hol- 
land, Amsterdam. 
Gazdar, G. 1981. Unbounded ependencies and 
coordinate structure. Linguistic Inquiry, 12: 155- 
184. 
Geach, P. T. 1972. A program for syntax. In 
Davidson, D. and Haman, G. (eds.) Semantics of 
Natural Language. Dordrecht: D. ReideL 
Hindley, J. R. and Seldin, J. P. 1986. Intro- 
duction to combinators and h-calculus. Cambridge 
University Press, Cambridge. 
Hepple, M. 1987. Methods for Parsing Com- 
binatory Grammars and the Spurious AmbiguiW 
Problem. Masters Thesis, Centre for Cognitive Sci- 
ence, University of Edinburgh. 
Karttunen, L. 1986. Radical Lexicallsm. Re- 
port No. CSLI-86-68, Center for the Study of Lan- 
guage and Information, December, 1986. Paper 
presented at the Conference on Alternative Con- 
ceptions of Phrase Structure, July 1986, New York. 
Moortgat, M. 1987. Lambek Categoria\] Gram- 
mar and the Autonomy Thesis. INL Working Pa- 
pers No. 87-03, Instituut voor Nederlandse Lexi- 
cologie, Leiden, April, 1987. 
Morrill, G. 1988. Extraction and Coordina- 
tion in Phrase Structure Grammar and Categorial 
Grammar. PhD Thesis, Centre for Cognitive Sci- 
ence, University of Edinburgh. 
Morrill, G. and Carpenter, B. 1987. Compo- 
sitionality, Implicational Logics, and Theories of 
Grammar. Research Paper No. EUCCS/RP-11, 
Centre for Cognitive Science, University of Edin- 
burgh, Edinburgh, June, 1987. To appear in Lin- 
guistics and Philosophy. 
Pareschi, R. and Steedman, M. J. 1987. A 
Lazy Way to Chart-Parse with Extended Catego- 
rial Grammars. In Proceedinge of the £Sth An- 
nual Meeting of the Association for Computational 
Linguistics, Stanford University, Stanford, Ca., 6-9 
July, 1987. 
Prawitz, D. 1965. Natural Deduction: A Proof 
Theoretical Study. Ahnqvist and Wiksell, Uppsala. 
Steedman, M. 1985. Dependency and Coordi- 
nation in the Grammar of Dutch and English. Lan- 
guage, 61: 523-568. 
Steedman, M. 1987. Combinatory Grammars 
and Parasitic Gaps. Natural Language and Lin- 
guistic Theory, 5: 403-439. 
Wittenburg, K. 1987. Predictive Combinators: 
a Method for Efficient Processing of Combinatory 
Categorial Grammar. In Proceedings of the ~5th 
Annual Meeting of the Association for Computa- 
tional Linguistics, Stanford University, Stanford, 
Ca., 6-9 July, 1987. 
- 18 -  
