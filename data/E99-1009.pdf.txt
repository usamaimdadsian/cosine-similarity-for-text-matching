Proceedings of EACL '99 
Geometry of Lexico-Syntactic Interaction 
Glyn Morrill 
Departament de Llenguatges i Sistemes Informhtics 
Universitat Polit~cnica de Catalunya 
Jordi Girona Salgado, 1-3 
E-08034, Barcelona 
morrill @lsi.upc.es 
Abstract 
Interaction of lexical and derivational 
semantics---for example substitution 
and lambda conversion--- is typically 
a part of the on-line interpretation 
process. Proof-nets are to categorial 
grammar what phrase markers are to 
phrase structure grammar: unique 
graphical structures underlying 
equivalence classes of sequential 
syntactic derivations; but the role of 
proof-nets is deeper since they 
integrate also semantics. In this paper 
we show how interaction of lexical 
and derivational semantics at the 
lexico-syntactic interface can be 
precomputed as a process of off-line 
lexical compilation comprising Cut 
elimination in partial proof-nets. 
Introduction 
Consider the 
paraphrase: 
following examples of 
(1) a. 
b. 
C. 
Frodo lives in Bag End. 
Frodo inhabits Bag End. 
((in b) (live\])) 
(2) a. 
b. 
C. 
John tries to find Mary. 
John seeks Mary. 
((try (find rn ) ) j) 
Typically, for at least (lb) and (2b) the 
normalised semantic forms result from a 
process of substitution and lambda 
conversion subsequent to or simultaneous 
with syntactic derivation. We show how 
such interaction of lexical and 
derivational semantics at the lexico- 
syntactic interface can be precomputed as 
a process of off-line lexical compilation 
comprising Cut elimination in partial 
proof-nets. 
For accessibility, we devote in the 
initial sections a considerable proportion 
of space to an introduction to categorial 
grammar oriented towards proof-nets; see 
also Morrill (1994), Moortgat (1996) and 
Carpenter (1997). 
1 Categorial grammar 
We consider categorial grammar with 
category formulas F (categories) defined 
by the following grammar: 
(3) a. 
b. 
F : :=A IFV r l F /F IF -F  
..4 ::= S I N I CN I PP I ... 
The categories in A are referred to as 
atomic and correspond to the kinds of 
expressions which are considered to be 
"complete". Fairly uncontroversially, 
this class may be taken to include at least 
sentences S and names N; what the class is 
exactly is not fixed by the formalism. 
Left division categories A~B ('A under 
B') are those of expressions (functors) 
which concatenate with (arguments) in A 
on the left to yield Bs. Right division 
categories B/A ('B over A') are those of  
expressions (functors) which concatenate 
with (arguments) in A on the right 
yielding Bs. Product categories A.B are 
those of expressions which are the result 
of concatenating an A with a B; products 
do not play a dominant role here. 
More precisely, let L be the set of 
strings (including the empty string e) over 
a finite vocabulary V and let + be the 
operation of concatenation (i.e. (L, +, ~) is 
the free monoid generated by V) 1 . Each 
category formula A is interpreted as a 
subset \[\[A\]\] of L. When the interpretation 
of atomic categories has been fixed, that 
of complex categories i defined by (4). 
(4) \[\[AkB\]\] = {sl Vs'~ \[\[A\]\], s'+s~ \[\[B\]\] } 
\[\[B/A\]\] = {sl Vs'~ \[\[A\]\], s+s'~ \[\[B\]\] } 
\[\[A.B\]\] = {Sl+S21Sle \[\[,4\]\] & s2~ \[\[B\]\] } 
1 In fact Lambek (1958) excluded the empty 
string ---and hence empty antecedents in the 
calculus of (5)--- but it is convenient to include 
it here. 
61 
Proceedings of EACL '99 
In general, given some type assignments 
others may be inferred. Such reasoning is 
precisely formulated in the Lambek 
calculus L. 
2 Lambek sequent calculus 
In the sequent calculus of Lambek (1958) 
a sequent F ~ A consists of a sequence F
of 'input' category formulas (the 
antecedent) and an 'output' category 
formula A (the succedent). A sequent 
states that the ordered concatenation of 
expressions in the categories F yields an 
expression of the category A. The valid 
sequents are the theorems derivable from 
the following axiom and rule schemata) 
(5) a. 
id 
A~A 
F~A A1,A,  A2~C 
A1,F,  A2~C 
b. 
A,F  :=~ B kR 
F ~ A\B 
Cut 
F~A A I ,B ,  A2~ C 
A1, F, AkB, A2 ~ C 
C. 
F ,A~B /R 
F ~ B/A 
F~A A1,B,  A2 ~ C /L 
A1, B/A, F, A2 ~ C 
d. 
F1 ~A F2~B 
oR 
F1, F2 ~ AoB 
F1,A ,B ,  F2~C 
F1,AoB, F2 ~ C 
. L  
ZThe completeness of the calculus with respect 
to the intended interpretation was proved in 
Pentus (1994). 
62 
F(n) and A(n) range over context 
sequences of category formulas; A, B, and 
A*B are referred to as the active 
formulas. The calculus L lacks the usual 
structural rules of permutation, 
contraction and weakening. Adding 
permutation collapses the two divisions 
into a single non-directional implication 
and yields the multiplicative fragment of 
intuitionistic linear logic, known as the 
Lambek-van Benthem calculus LP. 3 
The validity of the id axiom and the 
Cut rule follows from the reflexivity and 
the transitivity respectively of set 
containment. The calculus enjoys the 
property of Cut elimination whereby 
every proof has a Cut-free equivalent 
(indeed, one in which only atomic id 
axioms are used: what we shall call \[3rl- 
long sequent proofs). 4 Thus, processing 
can be performed using just the left (L) 
and right (R) rules. These rules all 
decompose active formulas A*B in the 
left or the right of the conclusions into 
subformulas A and B in the premises, and 
have exactly one connective occurrence 
less in the premises than in the 
conclusion; therefore one can compute all 
the (Cut-free) proofs of any sequent by 
traversing the finite space of proof search 
without Cut. 
By way of illustration of the sequent 
calculus, the following is a proof of a 
theorem of lifting, or (subject) type 
raising: 
(6) 
N~N S~SkL  
N, N\S ~ S /R 
N ~ S/(N\S) 
Where a labels the antecedent, he coding 
of this proof as a lambda term ---what we 
3Adding also contraction and weakening we 
obtain the implicational and conjunctive 
fragment of intuitionistic logic. Thus every 
Lambek proof can be read as an intuitionistic 
proof and has a constructive content which can 
be identified with its intuitionistic normal form 
natural deduction proof (Prawitz 1965) or, what 
is the same thing under the Curry-Howard 
correspondence, its normal form as a typed 
lambda term. 
4By 'equivalent' we mean a proof of the same 
theorem with the same constructive content (fn. 
3). 
Proceedings of EACL '99 
shall call the derivational semantics--- is 
Xx(x a). The converse of lifting, lowering, 
in (7) is not derivable. A proof of a 
theorem of composition (it has as its 
semantics functional composition) is 
given in (8). 
(7) S/(N~S) ~ N 
(8) 
B~B C~C 
A~A B, B iC~C kL 
A, A~,  BiC ~ C iR 
A~,  BiC ~ AiC 
kL 
A grammar contains a set of lexical 
assignments ¢x: A. An expression 
wl+...+Wm is of category A just in case 
wl +...+win is the concatenation 
oq+...+CCn of lexical expressions such 
that ai: Ai, l<i<n, and A1 . . . . .  An ~ A is 
valid. For instance, assuming the expected 
lexical type assignments o proper names 
and intransitive and transitive verbs, there 
are the following derivations: 
(9) 
N~N S~SkL  
N,N~S ~ S 
john+runs: S 
(10) 
N~N 
N~N S~S~ 
N, NiS ~ S /L 
N, (NiS)/N, N ~ S 
john+finds+mary: S 
Ungrammaticality occurs when there is 
no validity of the sequents arising by 
lexical insertion, as in the following: 
(11) 
NiS, N ~ S 
runs+john: S 
3 Ambiguity and spurious 
ambiguity 
The sentence (12) is structurally 
ambiguous. 
(12) Sometimes it rains surprisingly. 
There is a reading "it is surprising that 
sometimes it rains" and another 
"sometimes the manner in which it rains 
is surprising". As would be expected 
there are in such a case distinct 
derivations corresponding to alternative 
scopings of the adverbials: 
(13) a. 
S/S, S, SiS ~ S 
sometimes+it+rains+surprisingly:S 
b. 
S~S S~S~ 
S~S S /S ,S~S ~ 
S/S, S, SiS ~ S 
C. 
S~S 
S~S S~SkL  
S, SiS ~ S /L  
S/S, S, SiS ~ S 
However, sometimes a non-ambiguous 
expression also has more than one 
sequent proof (even excluding Cut); thus 
the sequent in (14a) has the proofs (14b) 
and (14c). 
(14) a. 
N/CN, CN, NiS ~ S 
the+man+runs: S 
b. 
CN ~ CN 
N~N S~SkL  
N, NiS ~ S /L 
N/CN, CN, NiS ~ S 
C. 
CN ~ CN N ~ N/L  
N/CN, CN ~ N S~S£L  
N/CN, CN, NiS ~ S 
As the reader may check, N/CN, cN 
S/(N~S) has three Cut-free proofs; in 
general the combinatorial possibilities 
multiply exponentially. This feature is 
sometimes referred to as the problem of 
spurious ambiguity or derivational 
equivalence. It is regarded as problematic 
computationally because itmeans that in 
an exhaustive traversal of the proof search 
space one  must either repeat 
63 
Proceedings of EACL '99 
subcomputations, or else perform book- 
keeping to avoid so doing. 
The problem is that different \[3rl-long 
sequent derivations do not necessarily 
represent different readings, and this is 
the case because the sequent calculus 
forces us to choose between a 
sequentialisation of inferences ---in the 
case of (14)/L and kL--- when in fact they 
are not ordered by dependency and can 
be performed in parallel. 
The problem can be resolved by 
defining stricter normalised proofs which 
impose a unique ordering when 
alternatives would otherwise be available 
(K6nig 1990, Hepple 1990, Hendriks 
1993). However, while this removes 
spurious ambiguity as a problem arising 
from independence of inferences, it 
signally fails to exploit the fact that such 
inferences can be parallelised. Thus we 
prefer the term 'derivational equivalence' 
to 'spurious ambiguity' and interpret he 
phenomenon not as a problem for 
sequentialisation, but as an opportunity 
for parallelism. This opportumty is 
grasped in pro@nets. 
b. 
B+ A- 
N i / 
A\B+ 
A+ B- 
\ ii / 
AkB- 
A- B+ 
\ i / 
B/A+ 
B- A+ 
\ ii / 
B/A- 
B+ A+ 
\ ii / 
A.B+ 
A- B- 
\ i / 
A.B- 
i- and ii-tinks: 
two premises, 
one conclusion 
4 Lambek proo f -nets  
Proof-nets for L were developed by 
Roorda (1991), adapting their original 
introduction for linear logic in Girard 
(1987). In proof-nets, the opposition of 
formulas arising from their location in 
either the antecedent or the succedent of 
sequents is replaced by assignment of 
polarity: input (negative) for antecedent 
and output (positive) for succedent. A In the id and Cut links X and -X 
proof-net is a kind of graph of polar schematise over occurrences of the same 
formulas, category with opposite polarity. Note that 
the nodes of links are also marked 
First we define a more general concept (implicitly) as being either conclusions 
of proof structure. These are graphs (looking down) or premises (looking up). 
assembled out of the following links: In the i- and ii-links the middle nodes are 
the conclusions and the outer nodes the 
(15) a. premises. The i-links correspond to unary 
I I sequent rules and the ii-links to binary 
I I sequent rules. Observe that in the output, 
but not in the input, unfoldings the order 
X -X of subformulas is switched between 
id link: premises and conclusion; this is essential 
zero premises, to the characterization of ordering by 
two conclusions graph planarity. 
X -X 
t 1 
Cut link: 
two premises, 
zero conclusions 
Proof structures are assembled by 
identifying nodes of the same polar 
category which are the premises and 
conclusions of d i f ferentcomponents ;  
premises and conclusions not fused in this 
way are the premises and conclusions of 
64 
Proceedings ofEACL '99 
the proof structure as a whole. For 
example, in (16a) four links are 
assembled into a proof structure (16b) 
with no premises and two conclusions, N- 
and S/(N~S)+: 
(16) a. 
I I 
N+ S- 
N_ 
N+ S- 
\ ii / 
NkS- S+ 
N\S- S+ 
\ i / 
S/(N~S)+ 
b. 
N_ 
I 
N+ 
\ 
I 
S- 
ii / 
N\S- S+ 
\ i / 
S/(N\S)+ 
Proof-nets are proof structures which 
arise, essentially, by forgetting the 
contexts of the sequent rules and keeping 
only the active formulas, but not all proof 
structures are well-formed as proofs. 
There must exist a global synchronization 
of the partitioning of contexts by rules 
(the long trip condition of Girard 1987). 
Eschewing the (somewhat involved) 
details (Danos and Regnier 1990; Bellin 
and Scott 1994) it suffices here to state 
that a proof structure is well-formed, a 
module (partial proof-net), iff every cycle 
crosses both edges of some i-link. A 
module is a proof-net iff it contains no 
premises. The structure (16b) is a proof- 
net, in fact it is the proof-net for our 
instance (6) of lifting since its conclusions 
are the polar categories for this sequent: 
(17) 
N- S/(N\S)+ 
N ~ S/(N\S) 
The structure in (18) is not a module 
because it contains the circularity 
indicated: it corresponds to the lowering 
(7), which is invalid. 
(18) 
S+ 
N\S+ 
\ ii / 
S/(N\S)- 
m 
N- 
/ 
N+ 
s/ (~s)  ~ S 
The structure of figure 1 is a module with 
two premises and three conclusions; the 
latter are the polar categories of our 
composition theorem (8). Adding the 
remaining id axiom link makes it a proof- 
net for composition. 
For L, proof-nets must be planar, i.e. 
with no crossing edges. This corresponds 
to the non-commutativity of L. In LP, 
linear logic, which is commutative, there is 
no such requirement. 
Like the sequent calculus, proof-nets 
enjoy the Cut elimination property 
whereby every proof has a Cut-free 
equivalent. The evaluation of a net to its 
Cut-free normal form is a process of 
graph reduction. The reductions are as 
shown in figure 2. 
5 Language processing 
As is the case for the sequent calculus, 
with proof-nets every proof has a Cut-free 
equivalent in which only atomic id axiom 
links are used: what we shall call \[3q-long 
proof-nets. However, whereas some ~r I- 
long sequent proofs are equivalent, 
leading to spurious ambiguity/derivational 
equivalence, distinct \[3q-long proof-nets 
always have distinct readings. 
The analysis of an expression as search 
for \[3rl-long proof-nets can be construed 
in three phases, 1) selection of lexical 
categories for elements in the expression, 
2) unfolding of these categories into a 
.fi'ame of trees of i- and ii-links with 
atomic leaves (literals), and 3) addition of 
(planar) id axiom links to form proof- 
nets. For example, 'John walks' has the 
following analysis: 
65 
Proceedings of EACL '99 
(19) 
I 
N+ 
\ 
N- 
ii 
NiS- 
I 
S- 
/ 
S+ 
N, N~S ~ S 
john+walks :S  
The ungrammaticality of 'walks John' is 
attested by the non-planarity of the proof 
structure (20). 
(20) 
N+ 
\ ii / 
N\S - 
I 
S- 
N- S+ 
N~S,N ~S 
walks+john:S 
As expected, where there is structural 
ambiguity there are multiple derivations; 
see figure 3. But now also, when there is 
no structural ambiguity there is only one 
derivation, as in figure 4. This property is 
entirely general: the problem of spurious 
ambiguity is resolved. 
6 Proof -net  semant ic  extract ion 
Until now we have not been explicit about 
how a proof determines a semantic 
reading. We shall show here how to 
extract from a proof-net a functional term 
representing the semantics (see de Groote 
and Retor6 1996, who reference 
Lamarche 1995). This is done by 
travelling through a proof-net and 
constructing a lambcla term following 
deterministic instructions. (The proof-nets 
are the proof structures m which 
following these instructions visits each 
node exactly once.) 
First one assigns a distinct variable 
index to each i-link; then one starts 
travelling upwards through the unique 
positive conclusion. Thereafter the 
function L mapping proof-nets to lambda 
terms is as follows (for brevity we exclude 
product): 
(21) a .  
Going up through the conclusion 
of a i-link, make a functional 
abstraction for the corresponding 
variable and continue upwards through 
the positive premise: 
L( ) = )~xnL ( 
L( = ) 
b. 
Going up through one id conclusion, 
go down through the other: 
L( ) = L( ) 
) = L( 
C, 
Going down through one premise 
of Cut, go up through the other: 
d. 
Going down through one premise 
of a \i-link, make a functional 
application and continue going 
down through the conclusion 
(function) and going up through 
the other (argument): 
,4,- > L( ) = (L( ) L( ~ )) 
ii ii 
L( ) = ( L ( ~ ) L ( ~ ) )  
66 
Proceedings of EACL '99 
e.  
Going down through the premise 
of a i-link, put the corresponding 
variable: 
¥ ;. 
L(k ,~)  = xn 
L ( ~ )  = Xn 
f .  
Going down through a terminal 
node, substitute the associated 
lexical semantics: 
T 
L(~)  =qo 
Let us observe that the following 
lexical type assignments capture the 
paraphrasing of (la) and (lb); a-¢ := A 
signifies the assignment to category A of 
expression a with lexical semantics ¢. 
(22) 
frodo f 
:= N 
lives live 
:= N~S 
in in 
:= (S\S)/N 
bag+end b 
:= N 
inhabits )vx)vy( ( in x) (live y) ) 
:= (N~S)/N 
Then (la) has the analysis given in figure 
5, with semantic extraction (23), where * 
marks the point at construction and 
Roman numerals indicate the argument 
traversals, performed after the function 
traversals, triggered by entry into ii-links. 
(23) (* I) 
((* II) I) 
((in *) I) 
((in b) *) 
((in b) (* III)) 
((in b) (live *)) 
((in b) (lived')) 
Example (lb) has the analysis given in 
figure 6, for which the semantic 
extraction is (24). 
(24) (* I) 
((* II) I) 
(()vx)vy((in x) (live y)) *) I) 
(()vx)vy((in x) (live y)) b) *) 
(()Vx)vy((in x) (live y)) b)f) 
67 
This is not the same semantic term as that 
in (23) but it reduces to the same by 13- 
conversion, showing that the semantic 
content in the two cases is identical, that is, 
that there is paraphrase: 
(25) (()vx)vy((in x) (live y)) b) f) = 
)vy((in b) (live y)) f) = 
((in b) (live\])) 
Although such lambda conversion only 
calculates what the grammar defines and 
is not part of the grammar itself, 
computationally it is an on-line process. 
The following section shows how this can 
be rendered, in virtue of proof-nets, an 
off-line process of lexical compilation. 
7 Off-line semantic evaluation 
In the processing as presented so far 
semantic evaluation is, as is usual, 
normalisation of the result of substituting 
lexical semantics into derivational 
semantics. Logically speaking, this 
substitution at the lexico-syntactic 
interface is a Cut, and the normalisation is 
a process of Cut elimination. Currently 
the substitution and Cut elimination is 
executed after the proof search. However, 
if lexical semantics is represented as a 
proof-net, one can calculate off-line the 
module resulting from connecting the 
lexical semantics with a Cut to the module 
resulting from the unfolding of the 
lexical " categories. 
Lexical semantics expressed as a linear 
(=single bind) tambda term is unfolded 
into an (unordered) proof-net by the 
algorithm (26): 
(26) a° 
Start with the )v-term go at a + node: q~+. 
b. 
To unfold Kxnq)+, make it the 
conclusion of a i-link with index n 
and unfold ¢p+ at the positive premise: 
,+  
in 4 
kxn¢+ 
5 Lecomte and Retor6 (1995) propose to use the 
expressivity of modules in general to classify 
words rather than just category formulas 
(=modules without id or Cut links). Our method 
provides emantic motivation for modules at the 
machine level but we propose to maintain the 
less unwieldy categories at the user level. 
Proceedings of EACL '99 
C, 
To unfold Xxncp-, make it a Cut 
premise and unfold )~Xn(P+ at the 
other premise: 
Xxn¢- Lxn¢+ 
d.  
To unfold (q0 ~)-, make it the 
premise of a ii-link and unfold q0- 
at the conclusion and gt+ at the 
other premise: 
 ii ,!¢' 
e.  
To unfold (~0 gt)+ make it the 
conclusion of an id link and unfold 
(q0 ~)- at the other conclusion: 
(¢t¢)+ (¢V)- 
f .  
At a constant k- unfolding stops; 
to unfold a constant k+ make it an id 
premise first: 
I * 
k+ k- 
g . 
To unfold a bound variable xn- make 
it the other premise of the i-link with 
index n: 
X/'/- 
 in. 
to unfold xn+ make it an id premise first: 
xrl -  xrl  + 
 in 
For example, the lexical semantics of 
'inhabits' can be unfolded as shown in 
figure 7. The result of such unfolding of 
lexical semantics can be substituted into 
the unfolded lexical category by a Cut, 
and the resulting module normalised by 
Cut elimination in a precompilation. This 
is illustrated for the 'inhabits' example in 
figure 8. 
In this way, rather than starting the 
proof search with a frame comprising just 
the unfolding of lexical categories, one 
starts with a frame comprising the pre- 
evaluated modules resulting from lexical 
substitution. Let us consider again ( lb)  
from this point of view. First note, as well 
as figure 8, the precompilation of a 
proper name lexical assignment as in 
figure 9. The proof frame prior to proof  
search is that in figure 10. Adding axiom 
links yields the same net, and thus the 
same semantics, as that obtained for (1 a) 
in figure 5. 
A slightly more involved illustration of  
the same point is provided by the 
following lexical assignments for the 
paraphrases (2a) and (2b). 
(27) 
john - j 
:= N 
tries - try 
:= (N~S)/(N~S) 
to - Xxx 
:=  (N~S)/(N~S) 
find - f ind  
:= (N~S)/N 
mary  - m 
:= N 
seeks - )~x( try (x f ind)  ) 
:= 
These assign semantics (2c) to both (2a) 
and (2b) and, as the reader may check, by 
partially evaluating lexical modules in a 
precompilation, ormal form semantics is 
obtained directly in both cases. 
Conc lus ion  
In both the example worked out 
explicitly and the one left to the reader, 
we deal with words which are synonyms 
of continuous expressions: 'inhabits' = 
'lives in' and 'seeks' = 'tries to f ind'. 
This enables us to represent he evaluated 
lexical modules as planar. However it 
should be noted that in general lexical 
substitution involves linking syntactic 
modules which are ordered with lexical 
semantic modules which are not ordered, 
and which could be multiple-binding, and 
Cut elimination has to be performed in a 
hybrid architecture which must preserve 
the linear precedence of syntactic literals. 
It is therefore of importance to the future 
generalization of the method we propose 
to investigate the precise nature of such 
hybrid architectures. 
68 
Proceedings ofEACL '99 
Acknowledgements 
My thanks to Josep Mafia Merenciano for 
discussions relating to this work. 
References 
Bellin G. and Scott P. J. (1994) On the re- 
Calculus and Linear Logic. Theoretical 
Computer Science, 135, pp. 11--65. 
Carpenter B. (1998) Type-Logical Semantics. 
MIT Press, Cambridge, Massachusetts. 
Danos R. and Regnier L. (1990) The structure 
of muhiplicatives. Archive for Mathematical 
Logic 28, pp. 181--203. 
de Groote Ph. and Retor~ C. (1996) On the 
Semantic Readings of Proof-Nets. In 
"Proceedings of Formal Grammar 1996", G.J. 
Kruijff, G. Morrill & D. Oehrle, ed., Prague, 
pp. 57--70. 
Girard J.-Y. (1987) Linear Logic. Theoretical 
Computer Science, 50, pp. 1--102. 
Hendriks H. (1993) Studied Flexibility: 
Categories and Types in Syntax a"d 
Semantics. Ph.D. thesis, Universiteit van 
Amsterdam. 
Hepple M. (1990) Normal form theorem 
proving for the Lambek calculus. Proceedings 
of COLING 1990, Stockholm. 
K6nig E. (1989) Parsing as natural deduction. 
Proceedings of the 27th Annual Meeting of 
the Association for Computational 
Linguistics, Vancouver. 
Lamarche F. (1995) Games emantics for full 
propositional linear logic. In "Ninth Annual 
IEEE Symposium on Logic in Computer 
Science", IEEE Press. 
Lambek J. (1958) The mathematics of sentence 
structure. American Mathematical Monthly, 
65, pp. 154--170. 
Lecomte A. and Retor6 C. (1995) Pomset logic 
as an alternative categorial grammar. In 
"Proceedings ofFormal Grammar 1995", G. 
Morrill & D. Oehrle, ed., Barcelona, pp. 181- 
-196. 
Morrill G. (1994) Type Logical Grammar: 
Categorial Logic of Signs. Kluwer Academic 
Publishers, Dordrecht. 
Moortgat M. (1996) Categorial type logics. In 
"Handbook of Logic and Language", J. van 
Benthem & A. ter Meulen, ed., Elsevier, 
Amsterdam, pp. 93--177. 
Pentus M. (1994) Language completeness of 
the Lambek calculus. Proceedings of the 
Eight Annual IEEE Symposium on Logic in 
Computer Science. 
Roorda D. (1991) Resource Logics: Proof- 
theoretical Investigations. Ph.D. thesis, 
Universiteit van Amsterdam. 
o 
o~ 
N 
/ 
\ 
/ 
\ 
/ 
\ 
/ 
\ 
N 
I 
t'q 
$ 
/ 
\ 
~t7 /+  
,~ =: 
\ 
/ 
+ 
\ 
+ 
,> 
69 
S- 
\ il 
S/S- 
S+ S+ S- 
/ \ " / 
S- S- S+ 
S/S. S. SLS ~ S 
sometimes+it+rains+surprisingly: S 
S- S+ | S+ S- 
N ii / | \ .i / 
S/S- S- S- S+ 
{ I { l 
S- S+ S+ S- 
\ fi / \ " / 
S/S- S- S- S+ 
Figure 3: MultiplicRy of structural mbigully 
I , I ,\] 
N- CN+ N+ S- 
\ ii / \ , / 
N/CN- CN- N~- S+ 
NICN, CN, N~ ~ S 
the+man+hillS: $ 
Figure 4: Non-existence of spurious ambiguity 
Proceedings of EACL '99 
i 
, 
N- 
/ 
I 
N+ 
\ ii 
N~- 
live 
S÷ 
\ 
S- 
/ 
S- 
ii / I 
S~'S - N+ 
\ 5 /  
(S~S)/N- N- 
in b 
S+ 
N, N~S, (S~S)/N. N : S 
frodo+lives+in+bag+cnd: S 
Figure 5: Proof-net for 'Frodo lives m Bag End" 
I I 
N* S- 
\ ii / \[ 
NLS- N+ 
\ ii / 
N- (NLS)/N- N- S+ 
f ~.x3..K(in x) (live y)) b 
N. (N'LS)/N. N =:. S 
frodo-t-inhabits+bag+end: S 
Figure 6: Proof-net for 'Frodo inhabits Bag End' 
e e ~g 
? + ~we x2)+ ((i~,tl)(livex2))-((iaxl)llivex2)) x2- 
~. i i~  d a~ i2 ~ r""-~ g 
x2+ (livex2). (inxl)- xi+x'l- ).x2((inxl)(livex2))+ 
~. i i  ~d d~ ii  ~ il 4 'a  
live- in- ~,.,xl),x2((in xl) (live x2))+ 
Figure 7: Unfolding of texical semantics of 'inhabits' into a proof-net 
, V==l i N " / 
b 
\ /  \ / i  
c, 
/ \ ,~/- 
d. 
r, 
e 
N* 
1 I - N+ S- 
I " ' ~  N~ S- 
LI 
N÷ 
N+ 
L 
N+ 
J 
~=lX i  i /S -  
- N+ ~'\,,/ \ , , /  
Figure 8: Partial evaluation of \[mica\[ substitution for 'inhabits' 
I i N N 
b- b+ N- \[~ b 
I 1 
Figure 9: Parhal evaluation of \[exlcal subslltullon for 'Bag Fnd' 
N+ N+ \ , , /  \ . /  
N- N- S+ 
i hve In h 
N. (N',S)/N. N ~ S 
frodo+inhabits+bag+cnd: S 
F~gure IO: Proof frame for 'Frodo mhabit~ Bag End' following lex~cat pre¢ompdalmn 
70 
