A MODEL FOR PREFERENCE 
Dominique Petitpierre 
ISSCO 
University of Geneva 
54 route des Acacias 
CH-1227 Geneva, Switzerland 
Steven Krauwer 
Louis des Tombe 
Instituut voor Algemene Taalwetenschap 
Ri jksuniversiteit  Utrecht 
Trans 14 
3512 JK Utrecht, The Netherlands 
Doug Arnold 
Centre for Cognit ive Studies 
University of Essex 
Colchester, CO4 3SQ, England 
Giovanni B. Vari le 
DG XIII, Batiment Jean Monnet 
Commission of the European communit ies 
P.O. Box 1907, Luxembourg, Luxembourg 
Abstract 
In this paper we address the problem of 
choosing the best solution(s) from a set 
of interpretations of the same object (in 
our case a segment of text). A notion of 
preference is stated, based on pairwise 
comparisons of complete interpretations in 
order to obtain a partial order among the 
competing interpretations. An experimental 
implementation is described, which uses 
Prolog-l ike preference statements. 
1. Introduction 
In this paper we address the problem of 
choosing the best solution(s) from a set 
of interpretations of the same text seg- 
ment (For the sake of brevity, throughout 
this text we use the term interpretation, 
where in fact we should write representa- 
tion of an interpretation). Although 
developed in the context of a machine 
translation system (the Eurotra project, 
Arnold 1986, Arnold and des Tombe 1987), 
we believe that our approach is suited to 
many other fields of computational 
l inguistics and even outside (pattern 
recognition, etc.). 
After a brief overview of the problem 
(section 2), we suggest a general method 
to deal with preference (section 3) and 
then describe a possible implementation 
(section 4). An appendix gives actual 
examples of preference statements. 
2. What is preference? 
In the computational l inguistics 
literature, the term 'preference' has been 
used in dif ferent contexts. We shall men- 
tion a few, selectively, (in section 2.1 
which may be skipped) and then state our 
own view (in section 2.2). 
2.1. Various approaches 
Preference strategies have often been 
used for deal ing with the problem of ill- 
formed input (a part icular case of robust- 
ness, cf below section 2.2) (AJCL 1983, 
Charniak 1983). Fol lowing Weischedel and 
Sondheimer (1983) we dist inguish the cases 
134 
where preference is part of the part icular 
computation being performed (Wilks 1973, 
Fass and Wilks 1983, Pereira 1985) from 
the case where it is a separate process, 
run after the results of the computation 
have been obtained (Jensen et al 1983, 
Weischedel and Sondheimer 1983). 
A frequent approach to preference is 
scoring. A numeric score is calculated, 
independently, for each competing 
interpretation and is then used to rank 
the interpretations. The best interpreta- 
tions are then chosen. The score can be 
the number of constraints satisf ied by the 
interpretation (Wilks 1973, Fass & Wilks 
1983), where these constraints might be 
assigned relative weights by the l inguist 
(Robinson 1982, Charniak 1983, Bennett and 
Slocum 1985) or calculated by the computer 
(Papegaaij 1986). Such techniques have 
been used extensively for speech recogni- 
tion (Paxton 1977, Walker et al 1978) and 
in the field of expert systems (such as 
Mycin, Buchanan & Shortl i f fe 1984), where 
the calculation of both score and ranking 
become quite complex with probabi l i t ies 
and thresholds. 
The problem with scoring is that it 
seems quite unnatural for a l inguist to 
associate a score (or weight or probabil-  
ity) to a part icular rule or piece of data 
when the knowledge being encoded is in 
fact qualitative. Furthermore, combining 
the scores based on different types of 
reasoning to calculate a global score for 
a representation seems a rather arbitrary 
procedure. Such a uniform metric, even if 
it can model actual l inguistic knowledge, 
forces the grammar writer to juggle with 
numbers to get the behaviour he wants, 
thus making the preference process 
obscure. 
A further disadvantage of this approach is 
that the score is often based on the way 
interpretations are built, rather than on 
the propert ies of the interpretations 
themselves. 
Preference is also mentioned in a 
l inguistic controversy started by Frazier 
and Fodor (1979) with their principles of 
right associat ion and minimal attachment 
(Schubert 1984). There the problem is to 
disambiguate many readings (or interpreta- 
tions) of a sentence in order to find the 
good (preferred) one(s). Various contribu- 
tions on that issue have in common that 
bad interpretations are abandoned before 
being finished, during computation 
(Shieber 1983, Pereira 1985). Although 
this method speeds up the computation, 
there is a risk that a possibl i ty will be 
abandoned too early, before the relevant 
information has been found. This is shown 
by Wilks et al (1985) who claim to have 
the ideal solution in Preference Seman- 
tics, which uses as part of its computa- 
tion scoring and ranking. 
2.2. Our notion of preference 
Our approach, although stemming from 
earlier work in the Eurotra project 
(McNaught et al 1983, Johnson et al 1985), 
is, we believe, new and original. 
We make the fol lowing assumptions: 
i the relation 'translation of' between 
texts as establ ished by a machine 
translat ion system has to be one to one 
(1-1)? 
ii There is apriori no formal or l inguis- 
tic guarantee that this will be the 
case for the relation as a whole or for 
the translat ion steps between inter- 
mediate levels of representation. (An 
attempt to formalize this can be found 
in Krauwer and des Tombe 1984 or in 
section 4 of Johnson et al 1985). 
The problem we want to address here is the 
following: 
Given the fact that one to many (l-n) 
translat ions do occur, how do we ensure 
that the final result is still I-1. 
This problem is not restr icted to machine 
translation: 
Often a program (for example a parser or a 
text generator) produces many interpreta- 
tions of the same object (usually a text 
segment) when in the ideal case only one 
is wanted. In the fol lowing we refer to a 
'l-n translation' for this general 
phenomenon. 
We see two types of solutions to this 
problem, each of them applicable to 
specif ic classes of cases: 
i Spurious results can be el iminated on 
the basis of their own individual pro- 
perties (e.g. well-formedness, com- 
pleteness); for this we wil l  use the 
term 'filtering'. 
ii Spurious results can be el iminated via 
comparison of competing representa- 
tions, where only the best one(s) will 
have the right to survive; for this we 
will use the term 'preference'. 
It is important to note that we res- 
trict ourselves to reducing l-n transla- 
tions to (ideally) i-i. We will assume 
that the 'good' translat ion is one of the 
candidates. The problem of forcing the 
system to come up with at least 1 transla- 
tion (i.e. do something about possible 1-0 
cases) wil l  not be addressed here. In 
order to avoid confusion we wil l  use the 
term 'robustness' to refer to this type of 
problem. We are aware of the fact that we 
deviate sl ightly from the standard use of 
the term preference. 
135 
There are two main types of l-n -ness: 
i l inguist ical ly motivated (i.e. real 
ambiguity in analysis, or true synonymy 
in generation). 
ii accidental, caused by overgeneration of 
the descr ipt ive devices that define the 
result ing (or intermediate) interpreta- 
tions. 
Note that overgenerat ion and ambiguity or 
synonymy may hide cases of undergenerat ion 
(cf the robustness problem). 
We define the appl icat ion of preference 
as the select ion of the best element(s) 
from a set of competing interpretations of 
the same object. 
According to this def init ion the scor- 
ing and ranking mechanism described in the 
previous section is a case of preference. 
In the rest of this paper we wil l  
describe a preference device that is dif- 
ferent from the scoring and ranking 
mechanism in the sense that it is not 
based on the way interpretations are 
built, but rather on l inguistic propert ies 
Of the objects themselves. Its main 
character ist ics are that: 
it applies to complete and sound (well 
formed) interpretations only. That is, 
all the other modules of construction, 
transformation and f i l tering have been 
applied (Ex: parsing, Wh-movement, 
etc). Thus, for these modules all com- 
peting representat ions are equivalent, 
and all the information needed for com- 
paring them has been found. 
ii it is based on pairwise comparison 
between alternative (competing) 
interpretat ions of the same object. 
The problem can then be stated as fol- 
lows: 
How do we make use of the l inguistic 
knowledge in order to insure a i-i trans- 
lation? 
It is our basic bel ief  that it is impossi- 
ble for the l inguist to know the exact 
nature of a class of competing interpreta- 
tions in advance. This implies that he 
cannot in general formulate one single 
rule that picks out the best one. 
3. The proposed method 
3.1. Basic idea 
Our proposal is the following: 
- It should be possible to make 
(linguistic) statements of the type: if 
representat ion A has property X, and B 
property Y, then A is to be preferred over 
B (e.g. 'in law texts declarat ive sen- 
tences are better than questions', or 
'sentences with a main verb are better 
than sentences without one'). 
- On the basis of a set of such statements 
it should be possible to establ ish a par- 
tial order over the set of competing 
representations. 
- And in that case the number of candi- 
dates can be reduced by, for example, let- 
ting only the maximal elements survive, or 
discarding the minimal ones. 
3.2. Problems with the method 
The first (but least serious) problem 
is that it is not certain that l inguists 
will always be able to make such state- 
ments (we wil l  call them 'p re ference  
statements') over pairs of representa- 
tions. Exper imentat ion is necessary. 
The second one is more serious: it 
would be highly unreal ist ic  to expect that 
the result of applying of the preference 
statements wil l  be a l inear order, in fact 
there is not even a guarantee that the 
order wil l  be partial. In general the out- 
come will  be a directed graph. There are 
three ways of tackl ing this problem: 
The l inguist should try to make the set 
of preference statements homogeneous 
and constrained, and should have con- 
trol over the way in which they are 
applied, so that he can avoid contrad- 
ictory statements. 
ii One tries to make a formal device that 
checks whether contradict ions can 
Occur. 
iii One tries to compare pairs of competi- 
tors in a specif ic order such that it 
can be guaranteed that the result is 
always a partial  order. 
At the moment (iii) is the most feasible, 
(ii) the most ambitious, and (i) the most 
desirable solution. Currently we envisage 
a combinat ion of (i) and (iii). 
The third problem is that of the maxi-  
mal elements. Ideal ly there would be just 
one maximal element, i.e. the preferred 
representation. This cannot be guaranteed 
to be true. 
The problems sketched here are by no 
means trivial. That is why we want to 
experiment with a first implementation of 
this method, to identify the various 
relevant parameters in the specif ic con- 
text of Eurotra. 
4. The proposed implementation 
The implementat ion proposed  here is 
described in very general terms, and can 
136 
be adapted for a wide range of applica- 
tions. We give in the appendix some com- 
mented examples specif ic to our particular 
context. 
4.1. Preference rules 
Preference statements are expressed by 
the user in the form of rules (preference 
rules). There are three types of prefer- 
ence rules: simple rules, Dredefined rules 
and composite rules. A preference rule 
applied to two representations of 
interpretation tries to decide which one 
is better than the other (preferred to the 
other). It is not guaranteed that a rule 
can always take a decision. 
A simple preference rule is of the form 
p = (Patternl > Pattern2) 
The name of the rule is p, and Patternl 
and Pattern2 are current patterns. When 
given two arguments (two representations 
or subparts) A and B (written p(A,B)) the 
system will  try to match Patternl with A 
and Pattern2 with B. If this succeeds then 
A is better than B (or A is preferred to B 
or A>B). If it fails then the system will  
try to match A with Pattern2 and B with 
Patternl. If this succeeds then B is 
better than A. 
Predefined rules are provided for the 
cases where simple rules cannot express 
some useful basic preference statement. 
For example, in our actual implementation 
(cf appendix), two Dredefined rules say 
that a tree structure with fewer (more) 
branches than the other is to be preferred 
to one with more (fewer) branches. This 
cannot be expressed with the part icular 
language for patterns. 
A composite preference rule is of 
form 
p = (Patternl,Pattern2) 
=> (pl($V,$W), 
p2 ($X, $Y), 
.-.) 
the 
Identif iers p, pl, p2, ... are rule names, 
Patternl and Pattern2 are actual patterns, 
and SV, $W, $X, $Y, ... are variable iden- 
tifiers, that should also occur in Pat- 
ternl ($V,$X) and Pattern2 ($W,$Y) where 
they identify sub-parts of the interpreta- 
tions. When given two arguments A and B, 
the system tries to match A with Patternl 
and B with Pattern2. If this succeeds, the 
variables SV,$X,.. occurring in Patternl 
and SW,$Y .... occurring in Pattern2 are 
instantiated to sub-parts of A and B 
respectively. Then the system tries each 
preference rule of the list, with the 
instantiated arguments, till one rule can 
decide. In this case the relat ionship 
holding between A and B is the same as 
that holding between the sub-part of A and 
the sub-part of B. If no rule of the list 
can decide then preference is not decided. 
If the initial match doesn't succeed, then 
an attempt wil l  be made to match A with 
Pattern2 and B with Patternl. If this 
succeeds the system tries the rules of the 
list in the same way as above. Composite 
preference rules al low recursion. 
This formalism is very much inspired by 
the programming language Prolog: a prefer- 
ence rule is analogous to a three argument 
predicate (two interpretations and the 
result ing relationship), a simple rule to 
an assertion, and a composite rule to a 
clause with sub-goals. 
4.2. General algorithm 
Initially, all competing objects are in 
the set of non ordered objects N and the 
set of ordered objects O is empty. Then, 
the fol lowing is repeated until N is 
empty: an object is removed from N and is 
compared to each object of O (if any), 
then it is added to O. 
This algorithm does not ensure that the 
result ing directed graph of preference 
relat ionships among the competing objects 
has no cycle. Anyway, maximal (minimal) 
elements can be defined in the fol lowing 
way: 
An object E is a maximal (minimal) ele- 
ment if no competing object is better 
(worse) than E. 
Thus an object in a cycle of the graph 
cannot be maximal (minimal). 
To give the user control of how rules 
are tr ied on the competing objects, only 
one dist inguished rule is applied to each 
competing pair. In the general case it 
should be a composite rule that just 
passes its two arguments to the rules of 
the list, thus ensuring that only these 
rules are tr ied and in that order. 
The pattern matching mechanism of com- 
posite rules is quite powerful. (see also 
the appendix): It al lows some preferences 
rule to be applied only to selected 
objects (satisfying a precondition). It 
also al lows (recursive) explorat ion of 
sub-parts of representat ions (a derivation 
tree for example), in paral lel  or not. 
Finally it enables the user to give prior- 
ity to some preference rules over some 
others. 
4.3. Problems with the implementation 
Although we decided that this model is 
good enough for prel iminary experimenta- 
tion, certain problems are already 
apparent: 
- The system takes arbitrary decisions in 
the case of a contradiction, that is if 
137 
some rule can be applied to a pair of 
arguments in both orders (if p(A,B) and 
p(B,A) are both possible). In part icular a 
preference decision should not be taken 
between identical objects. 
- Infinite recurs!on can occur with ctmpo- 
site preference rules. 
- Maximal (minimal) elements may not exist 
in the result ing graph of preference rela- 
t ionships (for example if all elements are 
in a cycle). 
- Arbitrary decisions may be taken if the 
patterns al low mult iple matches: the 
current model wil l  stop with the first 
match that produces a decision. 
Currently it is the user's responsibi l -  
ity to avoid these problems by writ ing 
"sensible" rules. In the next section we 
sketch some possible solutions that are 
considered for a future implementation. 
5. Future directions 
The implementation of this preference 
model has been written in Prolog. To 
facil itate experimentation, a mechanism is 
provided for tracing the preference rules 
appl icat ion to observe their behaviour. 
The model descr ibed above is very flex- 
ible. We are currently studying the imple- 
mentation of variants of the basic com- 
parison algorithm: 
We are invest igat ing algorithms that 
would: 
- reduce the number of comparisons, by 
aiming at extract ing only the maximal 
(minimal) elements, without trying to 
order all elements. 
- calculate the transit ive closure of the 
directed graph, and then remove all con- 
tradictory relationships, thereby removing 
all cycles. This amounts to saying that 
two interpretat ions are not comparable if 
their comparison leads to contradictory 
decisions. 
- compare the competing interpretations 
stepwise, that is all comparisons are per- 
formed with the first rule in a list, then 
only the pairs for which there is no deci- 
sion yet are compared with the second 
rule, and so on. 
ACKNOWLEDGEMENTS 
We would l ike to thank Paul Bennett, 
Maghi King, Gert jan Van Noord, Mike Rosner 
and Susan Warwick for their fruitful com- 
ments and their support. 
APPENDIX 
In the current framework of EUROTRA 
(Arnold and des Tombe 1987), representa- 
tion of interpretat ions are derivation 
trees, containing at each node a set of 
attr ibute-value pairs. Here is a very 
sketchy and intuit ive descr ipt ion of the 
syntax used in the patterns: 
- The identif iers s, np, vp etc. are 
values of the  dist inguished attribute 
of the node (in these examples, the 
syntactic category). 
- Curly brackets del imit a set of condi- 
tions to be satisf ied by a node. For 
example (s,f=declarative} indicate the 
required condit ions on the node for the 
dist inguished attr ibute (should have 
value s) and for an f attr ibute (should 
have value declarative). 
- SA, SB, etc. are var iable identifiers. 
- s.\[np,vp\] indicates a tree with root s 
and two daughters np and vp. 
- ? or (?) indicates an unspecif ied node. 
- * indicates a l ist of unspeci f ied 
nodes. 
- SAiPattern indicates that the var iable 
$A is instantiated to the sub-tree that 
matches Pattern 
- $more branches (and $1ess_branches) is 
a predef ined preference rule that 
prefer the argument that has more 
(less) branches than the other. 
- The first rule declared becomes the 
dist inguished rule applied to the com- 
peting interpretations. 
Example 1 
p0 = ($A!(?),$B!(?) 
=> (pI($A,$B), 
p2($A,$B)), 
pl = ((s,f=declarative) 
> {s,f=interrogative}), 
p2 = (s.\[np,v,$A\]s,*\], 
s.\[np,v,$B!s,*\]) 
=> (pI($A,$B), 
p2($A,$B)) 
This set of preference rules wil l  
explore, in parallel, two trees, from top 
to bottom, always taking the 's' branch, 
and prefer the tree in which it finds a 
declarat ive sentence (opposed to an 
interrogative). I f  one inverts the order of 
pl and p2 in the dist inguished composite 
rule p0  the trees would be explored from 
bottom to top. 
Rule p0 just passes its arguments to pl or 
p2~ 
Rule pl prefers a declarat ive s over an 
interrogative s. 
Rule p2 identif ies the embedded s in each 
argument and passes them to pl or p2. 
Example 2 
p0 = (s.\[np,vp.\[*,$A!(?)\]\] ,  
s. \[np,vp.\[*,$B!(?)\] \])  
=> (pI($A,$B), 
p2 ($A, SB), 
p3 ($A, $B) ), 
pl = (np.\[*,pp\] > pp), 
138 
p2 = (np.\[*,$A!np\] , $B!pp) 
=> (pl($A,$B), 
p2($A,$B), 
p3($A,$B)), 
p3 = (np.\[*,$A!(?)\], 
np.\[*,$B!(?)\]) 
=> (pI($A,$B), 
p2($A,$B), 
p3($A,$B)). 
Given two sentences, this set of rules 
will prefer the one that has the pp 
attached deeper in the structure than the 
other (right attachment). This example is 
restricted to explore only embedded nps. 
For both arguments, rule p0 identif ies the 
last daughters of the vp of a sentence s, 
and passes them to preference rules pl or 
p2 or p3. 
Rule pl will prefer a pp attached under an 
np to a pp (which was attached higher in 
the structure). 
Rule p2 will be tried only if pl was not 
applicable. It is there for the case the 
pp is imbedded deeper in the np. 
Rule p3 is similar to rule p0, except that 
it takes the last daughters of a np. It is 
tried only if pl and p2 are not applica- 
ble. 
REFERENCES 
AJCL. 1983 Special issue on i l l-formed 
input. American 5ournal of computa- 
tional l inauistics 9(3-4). 
Arnold, Doug. 1986 Eurotra: A European 
Perspective On Machine Translation. 
Proceedinus of the IEEE 74(7): 979-992. 
Arnold, Doug and des Tombe, Louis. 1987 
Basic Theory and Methodology in EURO- 
TRA. In: Nirenburg, Sergei, Ed., 
Machine Translation. Cambridge Univer- 
sity Press, Cambridge, England: 114- 
135. 
Bennett, Winf ield S. and Slocum, Jonathan. 
1985 The LRC machine Translation Sys- 
tem. Computational l inquistics 11(2- 
3): iii-121. 
Buchanan, Bruce G. and Shortliffe, Edward 
H. 1984 Ru~e-based Expert Systems. 
Addison Wesley, Reading, Massachusetts. 
Charniak, Eugene. 1983 A Parser With 
Something for Everyone. In: King, Mar- 
garet, Ed., parsina Natural Lanquaqe. 
Academic Press, London, England: 117- 
149. 
Fass, Dan and Wilks, Yorick. 1983 Prefer- 
ence Semantics, I l l-Formedness, and 
Metaphor. American iournal of computa- 
tional l inauistics 9(3-4): 178-187. 
Frazier, Lyn and Fodor, Janet D. 1978 The 
Sausage Machine: A New Two-Stage Pars- 
ing Model. Coanition 6: 291-325. 
Jensen, K.; Heidorn, G. E.; Miller, L. A. 
and Ravin, Y. 1983 Parse Fitt ing and 
Prose Fixing: Getting a Hold on Ill- 
Formedness. American journal of compu- 
tational l inauistics 9(3-4): 147-160. 
Johnson, Rod; King, Margaret and des 
Tombe, Louis. 1985 EUROTRA: A Multi l -  
ingual System Under Development. Com- 
putational l inquistics 11(2-3): 155- 
169. 
Krauwer, Steven and des Tombe, Louis. 
1984 Transfer in a Mult i l ingual Machine 
Translat ion System. In: Proceedinus of 
Colinq84, Stanford, california: 464- 
467. 
Mc Naught, Jock; Arnold, Doug; Bennett, 
Paul; Fass, Dan; Grover, Claire; Huang, 
Xiuming; Johnson, Rod; Somers, Harry; 
Whitelock, Pete and Wilks, Yorick 1983 
Structure, Strategies and Taxonomy. 
Eurotra contract report ETL-I, Commis- 
sion of the European Communities, Lux- 
embourg, Luxembourg. 
Papegaaij, Bart; Sadler, Victor and Wit- 
kam, Toon. 1986 Word Expert Semantics; 
an Interl inqual Knowledae Based Ap- 
proach. Foris, Dordrecht, Holland. 
Paxton, W.H. 1977 A Framework for Speech 
Understanding. Ph.D. Dissertation, 
Stanford University, Stanford, Califor- 
nia. 
Pereira, Fernando C. 1985 A New Charac- 
terization of Attachment Preferences. 
In: Dowty, David R.; Kartunnen, Lauri 
and Zwicky, Arnold M., Eds., Natural 
lanquaqe parsinq. Cambridge University 
Press, Cambridge,. England: 307-319. 
Robinson, Jane J. 1982 DIAGRAM: A Grammar 
for Dialogues. Communications of the 
ACM 25(1): 27-47. 
Schubert, Lenhart K. 1984 On Parsing 
Preferences. In: proceedinqs of COL- 
ING84 Stanford, California: 247-250. 
Shieber, Stuart. 1983 Sentence Disambi- 
guation by a Shift-Reduce Parsing Tech- 
nique. In: proceedinqs of IJCAI-8_/3 
Karlsruhe, West Germany: 699-703. 
Walker, D.E., Ed., 1978 Understandinq Spo- 
ken Lanquaqe. North Holland, New York, 
New York. 
Weischedel, Ralph M. and Sondheimer, Nor- 
man K. 1983 Meta-rules as a Basis for 
Processing I l l -Formed Input. American 
iournal of computational l inquistics 
9(3-4): 161-177. 
Wilks, Yorick. 1973 An Artif icial Intel- 
l igence Approach to Machine Transla- 
tion, In: Schank, Roger C. and Colby, 
Mark Kenneth, Eds., Computer Models of 
Thought and Lanquaqe. W.H. Freeman and 
Co, San Francisco, California: 114-151. 
Wilks, Yorick; Huang, Xiuming and Fass 
Dan. 1985 Syntax, Preference and Right 
Attachment. MCCS-85-5, July 1985, Com- 
puting Research Laboratory, New Mexico 
State University. 
139 
