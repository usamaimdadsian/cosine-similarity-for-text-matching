Multi-Modal Combinatory Categorial Grammar
Jason Baldridge
ICCS
School of Informatics
2 Buccleuch Place
University of Edinburgh
Edinburgh EH8 9LW, UK
]mb@cogsci.ed.ac.uk
Geert-Jan M. Kruijff
Universitat des Saarlandes
Computational Linguistics
Lehrstuhl Uszkoreit
Building 17, Postfach 15 11 50
66041 Saarbriicken, Germany
gj@coli. uni—sb.de
Abstract
The paper shows how Combinatory Cat-
egorial Grammar (CCG) can be adapted
to take advantage of the extra resource-
sensitivity provided by the Categorial
Type Logic framework. The resulting
reformulation, Multi-Modal CCG, sup-
ports lexically specified control over the
applicability of combinatory rules, per-
mitting a universal rule component and
shedding the need for language-specific
restrictions on rules. We discuss some
of the linguistic motivation for these
changes, define the Multi-Modal CCG
system and demonstrate how it works
on some basic examples. We further-
more outline some possible extensions
and address computational aspects of
Multi-Modal CCG.
1 Introduction
The family of categorial grammar frameworks
contains a diverse set of formalisms committed to
many of the same core principles, such as compo-
sitionality, a strong degree of lexicalism, and se-
mantic transparency. Nonetheless, each formalism
has its own characteristics with respect to the cate-
gory constructors and rules of combination it em-
ploys and the differing kinds of linguistic explana-
tions which arise from its unique assumptions.
A formalism's category constructors and com-
bination rules together define its resource-
sensitivity: given the resources we have (i.e. ex-
pressions and their associated categories) we can,
or can not, apply particular rules to form more
complex expressions. It is particularly this idea
of resource-sensitivity that is realized differently
across different formalisms.
In this paper, we explain how two prominent
categorial grammar frameworks, namely Com-
binatory Categorial Grammar (CCG, Steedman
(2000)) and Categorial Type Logic (CTL, Mor-
rill (1994); Moortgat (1997); Oehrle (to appear)),
can be integrated to create a hybrid categorial
framework, Multi-Modal Combinatory Categorial
Grammar (Baldridge, 2002), that inherits the at-
tractive properties of both. Specifically, Multi-
Modal CCG retains the favorable computional as-
pects of CCG whilst incorporating the approach to
resource-sensitivity taken in CTL. At the theoret-
ical level, we discuss how this form of resource-
sensitivity enables us to replace the rather ad
hoc rule-specific constraints found in CCG with
a clean resource-management regime, leading to
more parsimonious linguistic analyses. We also
discuss some of the benefits of modalized CCG
for computational processing.
Although Multi-Modal CCG has the same set
of rules as standard CCG, its improved resource-
sensitivity enables it to have a universal rule com-
ponent. It places all cross-linguistic variation
in the lexicon, leading to a typological perspec-
tive on grammar that not only describes, but can
also make predictions about, syntactic structure:
Multi-Modal CCG provides a new view on how
a typological perspective can be incorporated in a
lexicalized, non-transformational setting.
211
Overview. We introduce CCG in §2, and then mo-
tivate the need for a revised notion of resource-
sensitivity in CCG in §3. In §4, we introduce
Multi-Modal CCG and present possible extensions
in §5. Finally, we discuss the computational ad-
vantages of Multi-Modal CCG in §6 and then close
with conclusions.
2 Combinatory Categorial Grammar
CCG's grammatical objects are categories which
may be either atomic elements or (curried) func-
tions which specify the canonical linear direction
in which they seek their arguments. Lexical en-
tries are specified by pairing words with categories
via the I— operator. Some simplified example en-
tries are given below: 1
(1) (a) Ed I— np, (b) Ann I— np, (c) saw I— (s\np)/np
The basic rules for combining categories are
forward (>) and backward (<) application:
(>) X/Y Y	 X
(<) Y X\Y	 X
With these rules and the categories given in (1),
we can provide the derivation (2) for a simple sen-
tence such as Ed saw Ann. Because of CCG's
semantic transparency, a logical form for the sen-
tence can be built compositionally and in parallel
to the syntactic derivation. We will, however, sup-
press semantics in this paper.
(2) Ed 	 saw 	 Ann
np (s\np)/np 	 np
s\ np
CCG also utilizes further rules based on the
composition (B), type-raising (T), and substitu-
tion (S) combinators of combinatory logic, each
of which gives rise to several directionally-distinct
rules. For example, there are forward and back-
ward rules for both composition and type-raising:
(>B) X/Y Y/Z	 X/Z
(<B) Y\Z X\Y	 X \ Z
(>T) X	 YAY\X)
(<T) X	 Y\ (Y/X)
'We use Steedman's argument rightmost notation for cat-
egories. It is common in some traditions to use an alternative
notation in which arguments sought to the left are placed on
the left of the functor, e.g. saw I— (np\s)/np.
These additional rules induce associativity in
derivations, which is crucial for building the non-
standard constituents for which categorial gram-
mars are well-known. For example, we can now
provide the following alternative derivation to (2),
in which the verb combines with its subject before
applying to its object:
(3) Ed 	 saw 	 Ann
s/(s\n>p)
np T (s\ np)/np 	 np
s/np
>
Note that the combinatory rules have an invariant
type-driven semantics, so this derivation produces
precisely the same logical form as (2).
Arguably, one of CCG's greatest successes has
been in demonstrating that the behavior of un-
bounded dependencies in syntax can be explained
in a purely type-driven fashion in which the same
lexical types that are responsible for bounded de-
pendencies interact with CCG's combinatory rules
to generalize to unbounded phenomena. For ex-
ample, the same category (lc) given for saw is im-
plicated in the derivation of not only Ed saw Ann,
but also in the relative clause object extraction that
I think that Ed saw. 
s/np
	>13
snp
n\n
Other frameworks typically rely on empty ele-
ments or extra lexical assignments to handle such
relative clauses. Such strategies are often specific
to the construction in question, whereas CCG sup-
ports a uniform treatment of phenomena as diverse
as relativization, coordination, topicalization, in-
tonational phrasing, and incremental processing
(Steedman, 2000).
The rules introduced above are all harmonic, or
order preserving. Thus, they are unhelpful when
we consider sentences in which certain elements
have "moved" with respect to their canonical po-
sition, such as in English heavy-NP shift, where
an adverb comes between a verb and its object:
(5) Ed saw briefly his old friend from Skye.
>13
(4) that
(n \ n)/(s/np)
think 	 that
np T	(s \ np)/s	 s/s
sgs \ rip)
	>13
SiS
Ed 	 saw
np T	(s \ np)/np
sgs \ rip)
s/np
212
To handle such sentences without relying on cate-
gorial ambiguity, rules are needed to combine the
adverb with the verb before the latter consumes
its object argument. CCG makes available two
permutation-inducing composition rules that pro-
vide exactly the required functionality:
(>B x) X/Y Y\Z X\Z
(<B x) Y/Z X\Y X/Z
As can be seen from the form of these rules, the
primary functor composes with the secondary one
in a manner that puts it between the secondary
functor and its argument Z. This is precisely what
is needed for (5): <B x permits a derivation us-
ing the same categories necessary for capturing the
non-shifted version. The non-order-preserving na-
ture of these rules is what boosts CCG's generative
strength beyond context-free.
3 Rule restrictions
CCG uses a limited number of rules which work
in conjunction with complex lexical categories to
provide grammatical analyses, leaving the bulk of
cross-linguistic variation in the lexicon. Even so,
any given rule can be banned or restricted in any
given grammar, so variation can thus arise in the
rule component as well. For example, Steedman
(2000) argues that the permutation-inducing rule
>B x must be banned from the grammar of En-
glish to avoid derivations such as (6), where >B x
would allow the subject of the embedded verb saw
to scramble into the higher clause.
(6) */ Ed 	 think 	 that saw Ann
np 2 (s\np i )/s	 s/s	 s\nP2* * *_>g x * **
s\np o*** 	 >Bx * **
(s\np i )\np o
s\np,
By banning >13 x from the grammar of English,
Steedman not only ensures that such scrambled or-
ders do not arise, but also correctly predicts that
embedded subjects cannot be extracted:
(7) *man. that I think that t, saw Ann
The extraction of an object is performed with
only the harmonic rules, as shown in (4). Provid-
ing a derivation for (7), however, relies on >B x
and thus fails under the assumption that >B x is
banned, as shown in (8).
(8) *man 	 that 	 I think that saw Ann
n	 (n\n)/(s\np)	 s/s	 s/s	 s\np
	>B
SiS
The rules of a given grammar can also be re-
stricted to apply only to particular types. This is
necessary in English for <I3 x , which is needed
for phenomena such as heavy-NP shift, as in (5),
but which also can lead to lead to ungrammatical
scrambled orders inside noun phrases. For exam-
ple, consider (9), in which the category of a post-
nominal prepositional phrase composes into that
of a pre-nominal adjective.
(9) *a nice 	 in 	 Edinburgh pub
np/n n/n (n\n)/np	 np
n\n
<B x
n/n
>
np
To block such derivations, Steedman (2000) re-
stricts the rule <B >< for English as follows: 2
(<B x ) Y/Z X\Y	 X/Z
where X = Y = s$
Furthermore, multiple versions of a given com-
binatory rule, each having its own restrictions, can
be employed. For example, Steedman's analysis
of Dutch utilizes two restricted versions of each
of the rules >B, >B x , and <B x .
The use of rule restrictions is unappealing for
a number of reasons. First and foremost, the re-
strictions themselves are often ad hoc and can
lead to the abuse of grammatical features. For ex-
ample, Steedman's restricted version of >B x for
Dutch can only apply when the secondary functor
is a category that will ultimately produce a matrix
clause (i.e., s_ SUBS), whereas we wish to avoid us-
ing such features to enforce combinatory control.
That is, the formal system should not have to refer
to grammar specific properties. Another ad hoc
use of features with rule restrictions is that some
analyses utilize features on categories that have the
sole function of controlling the applicability of a
single rule, such as [±FORWARD COMPOSITION]
2 The $ notation used in the restriction schematizes over
all functions into the target category s.
213
(Trechsel, 2000). A further unappealing aspect of
rule restrictions is that they are at times not sim-
ple declarations of categories with particular fea-
tures, but can also involve modified forms of the
rule schemata, such as one of Steedman's versions
of >B for Dutch:
(>B) X/Y Y/(Y\Z) X/(Y\Z)
where Y = s$
None of these ways of restricting rules is cross-
linguistically motivated — they are employed to
obtain control over very specific aspects of a par-
ticular analysis of a particular language. Also,
they can be arbitrarily sensitive to particular cat-
egories, such that in the most extreme case, we
could imagine writing a combinatory rule for ev-
ery possible combination we want our grammar to
handle. This would amount to using the categorial
grammar system as a kind of specialized phrase
structure grammar — at which point we lose the
appeal of the purely type-driven nature of catego-
rial grammar.
These problems can be solved by incorporating
the more fine-grained slash types of the Categorial
Type Logic (CTL) tradition into CCG to produce a
system with just as much control, but which has a
rule component that is universal to all grammars
Even though CTL already has a clean resource-
management regime that can deal with the prob-
lems mentioned in this section, we choose to adapt
CCG because of its far more attractive compu-
tational properties. No efficient algorithms exist
that solve the NP-hard search problem in pars-
ing CTL grammars, whereas realistic CCG gram-
mars can be parsed with much greater efficiency.
As we show in the next section, CCG's resource-
sensitivity can be straightforwardly enhanced, and
§6 shows that we do not give up CCG's computa-
tional attractiveness in doing so.
4 Improved resource
-management
The main reason why CCG has needed rule re-
strictions is that it has an impoverished notion of
the categorial slash. CCG uses a single pair of
slashes -R, /1, which allows it only to distinguish
between arguments found to the left or the right,
respectively. The rules make reference to these
slashes, which in the case of the composition rules
gives rise to a spectrum of four distinct rules. 3
There is, however, no way to discrimate between
the primary functors X \ Y of the backward rules:
(<) Y X\Y X
(<B) Y\Z X\Y X\Z
(<B x ) Y/Z X\Y X/Z
This fact means that there is no lexical way of
specifying that a particular functor can only be
used with a particular one of these rules. For
example, if we give the category (10) to the co-
ordinator, it can act as the primary functor in
the <B rule (after consuming its first argument),
and thereby produce derivations for ungrammati-
cal strings as shown in (11).
(10) and I- (s\s)/s
(11) *man 	 that 	 sleeps 	 and 	 he talks
(n\n)/(s\np) 	 s\np 	 (s\s)/s 	 np 	 s\np
S
s\<sB
s\np
n \n
To avoid such derivations, Steedman (2000) em-
ploys a ternary rule of coordination that ensures
that coordinating particles cannot behave in this
manner. However, this strategy threatens to in-
crease the size of the rule base as the semantics and
usage of different coordinators are accommodated.
In the context of providing a universal rule base,
it would thus be preferable to be able to deal with
different kinds of coordination in a lexical manner.
The Categorial Type Logic tradition (CTL,
Morrill (1994); Moortgat (1997); Oehrle (to ap-
pear)) provides a very clean solution to the lack
of discrimination noted above. The fundamental
idea is that not all slashes are the same; that is, we
should be able to distinguish any number of slash
types, each of which exhibits its own particular be-
havior. Rather than having just { \ , /} like in CCG,
CTL distinguishes multiple modes for combining
categories and each mode i is associated with its
own leftward and rightward slashes M-.4 As
with CCG, there are basic rules for string-adjacent,
non-associative combination which allow a func-
tor category to consume its arguments respecting
the directionality of the slash, but unlike CCG,
3 The Principles of Consistency and Inheritance fi lter out
other possible rules based on the composition combinator.
4We ignore the product oi and unary modes here.
214
these rules build logical structures that record the
modes through which constituents have combined.
These structures can then be subsequently recon-
figured by more powerful structural rules that al-
low specific ways of rebracketing (associativity),
reordering (permutativity), or both.
Unlike CCG's rules, the structural rules of CTL
cannot be restricted by imposing extra-logical
constraints. Instead, they are sensitive to the
modes by which sub-structures have been built and
therefore cannot apply in all contexts. The typed
slashes of CTL project their modes into struc-
tures and thereby limit or enable the application of
structural rules to their local context. Thus, con-
trary to CCG, there are no rule-constraints acting
as absolute and global choices; instead, paramet-
ric options regarding the way in which expressions
can be combined are selectively invoked via the
appropriate category assignments in the lexicon.
Despite the overall architectures of CCG and
CTL being quite different, the use of modalized
slashes to control combinatory behavior can be
incorporated in CCG to enable cleaner resource-
management and render rule restrictions unneces-
sary. The basic intuition is that each of the differ-
ent combinatory rules will be sensitive to particu-
lar modes and thus apply only to input categories
which have the appropriate slash types. To start,
we assume four modes governing different levels
of associativity and permutativity, as follows:
non-permutative permutative
non-associative * x
associative o •
Furthermore, we organize these modes into
the type hierarchy shown on the right.
The most limited mode * is
thus the top of the hierarchy,
whereas the most permissive
one • inherits the properties
of all the others.
With these modes, we can make use of their cor-
responding slash types, such as A and \ x , in the
categories of the combinatory rules. For example,
we can now state the application rules as follows:
(>) XAY Y X
(<) Y X \Y X
Because the mode * is the root of the hierarchy,
these rules are thus available to categories with any
slash type. However, now consider the modalized
composition rules:
(>B)	 X/„Y YA,Z	 XA,Z
(<B) YVZ XVY	 XVZ
(>B x ) X/x Y YVZ	 XVZ
(<B y ) Y/x Z X \x Y	 X/x Z
The first ramification of these formulations is that
categories defined with the slashes \* and 1 will
not be able to serve as input to these rules since
the mode * is not a subtype of either o or x. This
is precisely what is needed to provide lexical cate-
gories for coordinating particles without enabling
illicit derivations such as (11). We now can simply
assign the category (12) to and, with the result that
the category s Vs of and he talks cannot compose
with that of sleeps, as shown in (13).
(12) and H (sVs)/,,s
(13) sleeps 	 and 	 he talks
	s\ p 	 (s\s)/„s np s\.np
sVs .
Note that the fact that the category of intransitive
verbs has the \. slash allows it to serve as the pri-
mary functor in all the backward rules, since the
mode • is a subtype of all the other modes.
A second effect of the modalized composition
rules is that the modes 0 and x can now be used
to discriminate between the harmonic and the
crossed rules, giving Multi-Modal CCG a lexical
handle on permutation. This means that it is no
longer necessary to ban >B x in English since we
can instead assign the complementizer the cate-
gory (14). This category can only compose asso-
ciatively, thereby allowing extraction of embedded
objects while blocking that of subjects.
(14) that H s6s
Similarly, we get lexical control over <B x and
the permutation of elements within noun phrases
(9). Whereas standard CCG requires a rule restric-
tion to avoid such derivations, the applicability of
the <B >< rule can be blocked by the use of the
modes * and 0 on the categories of pre-nominal
and post-nominal modifiers:
(15) "a	 nice	 in 	 Edinburgh pub
np/,,n n/on (n Vn)/np	 np 
>
n
215
Note that the categories n /0.n and n \,,n cannot com-
bine through either >B, or <B,.
Although the mode x (non-associative & per-
mutative) does not appear necessary for English,
it is needed in the grammar of Dutch. The CCG
account given by Steedman (2000) for crossing
dependencies in Dutch subordinate clauses relies
crucially on >B„. However, Steedman must re-
strict the harmonic rule >B in order to block some
ungrammatical orders. With the multi-modal set-
ting, Baldridge (2002) shows that such restrictions
are unnecessary because the same slash / x that al-
lows two subordinate verbs to combine through
>B„ also correctly blocks >B from applying.
The encoding of Steedman's analysis into Multi-
Modal CCG thus predicts that certain word orders
are ungrammatical, whereas this must be stipu-
lated in standard CCG. The encoding also has no
need of the restrictions Steedman places on sev-
eral other rules — instead it uses exactly the same
rules that are used for English.
The input to the type-raising rules does not
make reference to any slashes, but there are two
slashes in the output category. Type-raising is ac-
tually provable in the most basic CTL system, and
any mode can decorate the output slashes; how-
ever, it must be the same mode on both slashes.
We use a variable mode i for the modalized ver-
sions of the type-raising rules:
(>T) X YA(Y\iX)
(<T) X Y\i(Y/iX)
There is no modal control over the applicability of
type-raising, but the combinatory potential of the
output category will be subject to constraints made
on the category it applies to.
The core aspect of the multi-modal extension
of CCG is thus the simple, but powerful ability
to stratify the rules so that lexical items can be
declared suitable or unsuitable as inputs to dif-
ferent rules. We have outlined here just a few
of the motivating examples that demonstrate the
utility of this ability and the manner in which it
allows us to cast aside rule restrictions for con-
trolling the grammar. This is a principled move
which replaces arbitrary, globally declared restric-
tions with a small set of cross-linguistically moti-
vated distinctions encoded in terms of the multiple
slash types utilized in CTL. Baldridge (2002) sup-
ports this formulation with multi-modal analyses
for a wide range of phenomena in English, Dutch,
Turkish, Tagalog, and Toba Batak.
5 Extensions
Modes lead not only to a very clean formaliza-
tion of resource-sensitivity, but also give rise to
an interesting linguistic perspective. As e.g. Hep-
ple (1995) notes, each pair of decorated slashes
{ \„ /i} can correspond to a particular grammati-
cal phenomenon. Rules then model how different
phenomena can be combined to form larger gram-
matical structures.
For example, one way we can use modal deco-
ration is to model dependency, the asymmetry be-
tween heads and dependents, which has been used
in CTL to give accounts of coordination and word
order, e.g. (Moortgat and Morrill, 1991; Kruijff,
2001). Observe that we really need modes here:
function-argument structure does not correspond
to dependency. For example, a sentential adjunct
can have the category s \ s where the adjunct acts
as the function, taking a verb (s) as its argument.
However, the adjunct itself is the dependent of the
verbal head, and not vice versa.
Adopting notation common in dependency
grammar, we use as our basic modes a pair of ar-
rows <—, that point from head (h) to dependent
(d): (d h) or (h d). Additionally, we use
n to handle headless constructions (e.g. coordi-
nation), and H as analogous to •. The issue that
now arises is how to integrate these modes with
{*, o, x , .1: the latter modes control adjacency, and
we would like to keep adjacency and dependency
as separate (orthogonal) dimensions.
Therefore, we propose to keep these dimensions
as separate decorations on slashes as well, as fol-
lows: given dependency mode d, and adjacency
mode a, we can form slashes \ ad versus / ad . Com-
binatory rules can operate on either dimension or
on both, e.g. consider (<B ,) with dependency:
(<B,) Z X Y X Z
Another modal dimension is one which distin-
guishes a slash as being suitable or unsuitable as
the primary functor in a combinatory rule. This
can be used to implement the notion of antecedent
government discussed by Steedman (2000) for al-
lowing some arguments to be extractable but not
216
movable. Encoding this modally avoids the need
to require all lexical noun phrases to be declared as
not antecedent governed and maintains the separa-
tion we desire between features that control com-
bination and features for agreement, tense, etc.
Though we have not made use of CTL's unary
modes in the presentation of Multi-Modal CCG
given here, they could prove useful in limiting
the applicability of type-raising rules. Following
CTL, we introduce 0.i and its residuated counter-
part DI. such that we have, for an arbitrary cate-
gory A, 111;k>iA A and A <>i ELIA. Having
unary modes would remove the need under some
analyses to make type-raising of all argument cat-
egories obligatory. Thus, >T would appear as fol-
lows:
(>T) Y/i(Y\iX)
As such, >T can only apply to air 'd categories:
the categories for determiners and noun phrases
would then be (111 -ItAr np)kn and 111,<>tr n p, re-
spectively. Because of residuation, we can drop
CIL<>tr if we do not need to type-raise.
Finally, the multi-modal setting also enables us
to introduce more powerful combinators into the
grammar, possibly taking it beyond mild context-
sensitivity. Precisely because of the tight resource-
sensitive control over the applicability of combi-
natory rules, we can avoid a collapse to a situation
where "anything goes".
6 Computational aspects and
implementation
CCG has mildly context-sensitive generative
power and CCG grammars can be parsed in worst-
case polynomial time by using a structure sharing
algorithm (Vijay-Shanker and Weir, 1990). This
algorithm does incur some computational over-
head, and Komagata (1999) shows that the per-
formance of a worst-case exponential CKY parser
with a semantic equivalency check is cubic in the
average case (tested on Japanese sentences averag-
ing 20 words in length). This a major attraction of
CCG over CTL, for which no reasonably efficient
parsers have been constructed that can handle re-
alistic grammars
Multi-Modal CCG inherits CCG's attractive
computational properties and adds the possibility
to take advantage of some new strategies. Most
importantly, it remains mildly context-sensitive.
We have not added any new rules of combina-
tion; instead, we employ the standardly assumed
rules and make them sensitive to particular kinds
of slashes. A Multi-Modal CCG grammar can be
simulated with standard CCG by adding a mode
feature to the ultimate targets of (possibly com-
plex) categories and then formulating the rules
with restrictions that reference those features. For
example, the multi-modal category (16) would be
converted into (17).
(16) (s\. np)/x (s\. nip)
(17) (s\nPmode= )1 (Smode=X\ n Pmode=-)
The rule >B would then be formulated as fol-
lows, where a and b are variables standing for any
atomic category.
(<B) Y/Z X\Y X/Z
where Y = a mode= X $i and Z = Lode= X $2
Using restrictions in this manner in standard CCG
would technically provide the same advantages as
Multi-Modal CCG, but is a less clean formulation.
Furthermore, by using modally decorated slashes
to enforce these effects, we have a clear separa-
tion between specifications that control category
combining operations and more standard features
which encode distinctions such as number, gender,
verbal voice, tense, etc.
It is straightforward to adapt an existing CCG
parser to deal with modally decorated slashes as
they are a simple, non-recursive feature added to
the slash specification. Though there are no reduc-
tions in overall parsing complexity, we nonethe-
less obtain several advantages by using Multi-
Modal CCG. One is that the invariant rule com-
ponent makes it possible to implement the combi-
natory rules as hard-coded procedures that are the
same for all grammars (Baldridge, 2002). With
standard CCG rules, it may be necessary to unify
the input categories against several restrictions in
order to verify that a rule can even be applied,
whereas a multi-modal rule needs only to inspect
the simple slash data structures of the input cat-
egories to do the same. Also, a standard CCG
rule may need to check that the X portion of a
combinatory rule satisfies some restriction (e.g.,
the restricted <B x rule for English). A multi-
217
modal rule can instead ignore the X and just en-
sure that the Y portion of both inputs unify. Fi-
nally, CCG grammars typically need multiple ver-
sions of the same rule, whereas only one version
of each is necessary in Multi-Modal CCG. The ex-
tra resource-sensitivity of multi-modal rules thus
allows us to pack the functionality of several stan-
dard CCG rules into a single procedure, again cut-
ting down on the number of unifications which are
necessary in applying a grammar's rules.
The fact that slashes are more refined could
make it seem that writing grammars would be-
come more difficult since we must make choices
about the modes. Our experience, however, is that
the task becomes easier since different construc-
tions can be dealt with on their own terms without
worrying about complex interactions with rule re-
strictions that are already in place for other aspects
of the grammar. We can further reduce the "bur-
den" of specifying modes by defining the grammar
as a lexical inheritance hierarchy along the lines
of Villavicencio (2002), thereby exploiting redun-
dancy between different classes of lexical items.
7 Conclusions
We have presented an adaptation of CCG in which
the applicability of combinatory rules is controlled
directly through lexically assigned categories. Us-
ing modally decorated slashes as in CTL, we ob-
tain a fine-grained form of derivational control in a
purely lexicalized fashion. Consequently, we can
assume all combinatory rule schemas to be ac-
tive universally. Grammars need to differ in the
types of lexical categories only, i.e. what types of
modalized slashes they use, and thus what rules
they make applicable. We motivated the basic the-
ory on data from English and Dutch, and discussed
several possible extensions. Further linguistic evi-
dence and more in-depth Multi-Modal CCG anal-
yses for English, Dutch, Turkish, Tagalog, and
Toba Batak are provided in Baldridge (2002).
In this paper, we have omitted semantics. See
Steedman (2000) or Baldridge and Kruijff (2002)
for different ways of constructing logical forms
compositionally with CCG.
Acknowledgements. We would like to thank
Cem Bozsahin, Mark McConville, Mark Steed-
man and the EACL reviewers for comments. Ja-
son Baldridge's work is supported by Edinburgh-
Stanford Link R36763, ROSIE project. Geert-Jan
KruijIT's work is supported by the DFG SFB 378
Resource-Sensitive Cognitive Processes, Project
NEGRA EM6.
References
Jason Baldridge and Geert-Jan Kruijff. 2002. Coupling CCG
and hybrid logic dependency semantics. In Proceedings of
40th Annual Meeting of the Association for Computational
Linguistics, pages 319-326, Philadelphia, Pennsylvania.
Jason Baldridge. 2002. Lexically Specified Derivational
Control in Combinatorial Categorial Grammar. Ph.D.
thesis, University of Edinburgh.
Mark Hepple. 1995. Mixing modes of linguistic description
in categorial grammar. In Proc. EACL-7, Dublin Ireland.
Nobo Komagata. 1999. Information Structure in Texts:A
Computational Analysis of Contextual Appropriateness in
English and Japanese. Ph.D. thesis, University of Penn-
sylvania.
Geert-Jan M. Kruijff. 2001. A Categorial Modal Architec-
ture of Informativity: Dependency Grammar Logic & In-
formation Structure. Ph.D. thesis, Institute of Formal and
Applied Linguistics (UFAL), Faculty of Mathematics and
Physics, Charles University, Prague, Czech Republic.
Michael Moortgat and Glyn Morrill. 1991. Heads
and phrases: Type calculus for dependency and con-
stituent structure. Unpublished manuscript. Available
from http://www-lsi.upc.esrglyn/.
Michael Moortgat. 1997. Categorial type logics. In Johan
van Benthem and Alice ter Meulen, editors, Handbook of
Logic and Language. Elsevier Science B.V.
Glyn V. Morrill. 1994. Type Logical Grammar: Categorial
Logic of Signs. Kluwer Academic Publishers, Dordrecht,
Boston, London.
Richard T. Oehrle. to appear. Multi-modal type-logical
grammar. In Robert D. Borsley & Kersti Borjars, editor,
Non-transformational Syntax: A Guide to Current Debate.
Basil Blackwell, Oxford, United Kingdom.
Mark Steedman. 2000. The Syntactic Process. The MIT
Press, Cambridge Mass.
Frank Trechsel. 2000. A CCG account of Tzotzil pied pip-
ing. Natural Language and Linguistic Theory, 18:611—
663.
K. Vijay-Shanker and David Weir. 1990. Polynomial time
parsing of combinatory categorial grammars. In Proceed-
ings of the 28th Annual Meeting of the Association for
Computational Linguistics, Pittsburgh, pages 1-8, June.
Aline Villavicencio. 2002. The Acquisition of a Unification-
Based Generalised Categorial Grammar. Ph.D. thesis,
University of Cambridge.
218
