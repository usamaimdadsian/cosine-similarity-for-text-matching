Generation in the Lambek Calculus Framework:  an Approach with 
Semantic Proof Nets 
Sylvain Pogodalla 
sylvain.pogodalla @ xrce.xerox.com 
Xerox Researce Centre Europe 
6, chemin de Maupertuis 
38240 Meylan - -  France 
1 Introduction 
Thc lincar logic (Girard, 1987) provides a power- 
ful framcwork to cxprcss categorial gt'ammars (Aj- 
dukicwicx, 1935) and Lambek calculus (Lambek, 1958), 
and a lot of work has presented proof nets uses for lin- 
guistic purposcs, with a special look at proof nets for 
Lambek calculus (Roorda, 1991; Lamarche and Retor6, 
1996). But they have mainly explored the syntactic a- 
pabilities of proof nets, describing parsing processes. 
This paper wants to focus on the generation capa- 
bilities of proof nets thanks to their semantic readings 
as expressed in (de Groote and Retor6, 1996). The 
main features of our proposal consist in the use of proof 
nets lot Lambek calculus, of the Curry-Howard iso- 
morplaisna (Howard, 1980; Girard et al., 1988), of se- 
mantic proof nets with semantic expressions ?t la Mon- 
tagu¢ (Montague, 1974; Dowry et al., 1981), and in an 
algorithm for proof search with a target proof net. 
Unlike a previous proposal for generation in the Lam- 
bek calculus framework (Merenciano and Mort'ill, 1997), 
this point of view avoids the use of the A-term unification 
to lead the generation process. And the algorithmic un- 
decidability of this latter mechanism (from second order 
unification) does not occur any more. 
In this work, we do not consider the choice of lexi- 
cal items from a given semantic expression the syntactic 
rcalization of which we want to generate, but rather tile 
way we can associate given lexical entries to fit the given 
semantic expression and generate a syntactically correct 
cxpression. For this purpose, we express our problem as 
a proof search one in (multiplicative) linear logic which 
is decidable. Moreover, we characterize the semantic 
recipes of lexical items that provide a polynomial solu- 
tion for the generation process. 
2 Multi Usage Proof Nets 
2.1 Proof Nets 
(Girard, 1987) introduced proof nets formalism as the 
natural deduction syntax for linear logic, also studied 
in (Retor6, 1993). They represent proofs in linear logic 
with more accuracy than sequential proofs: on one hand 
they are more compact, on the other hand they identify 
unessentially different sequential proofs (for instance in 
the order of the rules introduction). 
From a one-sided sequent and a sequential proof of 
it, we obtain a proof net by unfolding every formula as 
a tree (whose nodes are the binary connectives and the 
leaves are formulas, e.g. atomic ones) and linking to- 
gether the formulas occurring in the same axiom rule of 
tile sequent calculus. 
But proof nets have a more intrinsic definition that pre- 
vents us to come back every time to sequential proofs. 
They can be defined as graphs with a certain property 
(i.e. verifying a correctness criterion) such that every 
proof net with this property corresponds to a sequential 
proof and such that every proof net built from a sequen- 
tial proof has this property. So that we do not present he 
sequent calculus but only the proof net calculus. 
In this paper, we do not consider all the proof nets, but 
a part of the multiplicative ones: those of the intuition- 
istic implicative linear logic. In this case, sequents are 
made of several antecedent \[brmulas, but only one succe- 
dent formula. To deal with tile intuitionistic notion with 
proof nets (since we consider one-sided sequents), we 
use the notion of polarities with the input (,: negative) 
and the output (o: positive) (Danos, 1990; Lamarche, 
1995) to decorate formulas. Positive ones correspond to 
succedent formulas and negative ones to antecedent for- 
mulas. 
Given the links of table 1, we define proof structures 
as graphs made of these links such that: 
1. any premise of any link is connected to exactly one 
conclusion of some other link; 
2. any conclusion of any link is connected to at most 
one premise of some other link; 
3. input (resp. output) premises are connected to input 
(resp. output) conclusions of the same type. 
Note that the two links for tile negative and positive 
implications correspond to the two connectives of the lin- 
ear logic: Tensor and Par, so that we name these links 
after these latter connectives. But in the following, only 
the graphical forms of the links play a role. 
Proof nets are proof structures that respect he correct- 
ness criterion. 
We mentioned the intrinsic definition of proof nets that 
enables the complete representation f sequential proofs. 
Tile cut elimination property of sequent calculus also ap- 
pears intrinsically in the proof net formalism with a sire- 
"/1131 70
Table 1: Links 
Name Axiom Tensor Par Cut 
Link CI C2 ~ 2 
C 
~, g2 
" ' \ l / /  
C 
P, 'cmises none  t)1, P2 Pl , P2 Pl ,  P2 
Conc lus ions  c l ,  c2 c none  
C 1 :A  + 
o , :A -  
Pl : ,4- 
P2 : B + 
e : (A -o  B)+ 
C 
Pl : A + 
P2 : /3 -  
c : (A  ---0 B) -  
,,O I :A -  
P2 :A+ 
Types 
Table 2: Cut-elimination rewriting rules 
x x y y 
i ......................... ! ............................... 
Y Y x x 
,l' 1 ./3 2 
Y 
Yi Y2 
Y 
xl x:) Yl Y2 
L J 
pie rewriting process described in table 2 (in case of com- 
plex formulas as in the third rewriting rule, those rules 
can apply again on the result and propagate until reach- 
ing atoms). 
2.2 Syntactic Proof Nets 
Definitions of proof nets tbr Lambek calculus first ap- 
peared in (Roorda, 1991 ). They naturally raised as Lam- 
bek calculus is an intuitionistic fragment of non commu- 
tative linar logic (with two linear implications: "'\" on 
the left and " /"  on tile right), and the consequences on 
the proof net calculus we presented in section 2.1 are: 
. we get two tensor links: one for the formulas 
(B /A) -  (the one in table 1) and one lbr the for- 
mula (B \A) -  (just inverse the polarities of the 
premises). And two par links : one for the lbrmula 
(A \B)  + and one for (A /B)  + (idem); 
• formulas in Lambek's equents are ordered, so that 
conclusions of the proof nets are cyclically ordered 
and axiom links may not cross. 
If T v is the set of basic types (e.g. S, NP . . .  ), the set 
T of syntactic types ~bllows T ::= ~\[T \T \ [T /T .  
Note that from a syntactic ategory, we can untbld the 
formula to obtain a graph which only lacks axiom links 
to become a proof structure. So that the parsing process 
in this framework is, given the syntactic ategories of the 
items and their order, to put non crossing axiom links 
such that the proof structure is a proof net. It means there 
is a proof of .b' given types in a certain order. For tech- 
nical reasons, the order of the conclusions (i.e. the types 
used) in the proof net to prove S is the reverse order of 
the words associated to these types. 
As an example, with the lexicon of table 3, proving 
that John lives in Paris is a correct sentence leads to find 
axiom links between the atoms in the figure l(a). Fig- 
ure I(b) shows it actually happens and proves the syn- 
tactic correctness of the sentence. 
Table 3: Lexicon 
lexical entry syntaxiccategory 
John NP 
Paris N P 
lives N P\,b' 
in (,S'\,S') / N P 
2.3 Semantic Proof Nets 
In this section, we present how (de Groote and RetortL 
1996) propose to use proof nets as semantic recipes. As 
a slight difference with this work, we only deal in this 
paper with semantic recipes that correspond to linear A- 
terms in the Montague's semantics framework. 
The idea of expressing the semantics with proof 
nets refers to the fact that both the A-terms (with the 
Curry-Howard isomorphism) and the proof nets repre- 
sent prooS; of intuitionistic implicative linear logic. And 
indeed, the linear A-terms may be encoded as proof nets. 
On the other hand, given an intuitionistic implicative 
proof net, a simple algorithm (given in (de Groote and 
71 
.S'- ,q'+ 
II<~---.i- o 
~ ,5'- .,¥~+ 
• .V P -  \], N P i  
Paris in 1" " Ives John 
(a) Unfolding of the syntactic types 
o S+ 
Figure I: Parsing 
Rotor6, 1996), based on (Lamarche, 1995)'s dependency 
paths), wc can obtain a A-term. 
Then, instead of associating a A-term to a \[exical entry, 
wc can associate a proof net. For instance, on the seman- 
tic side, we can use the Montagovian types e and t and 
typed constants. Of course, we want to keep the compo- 
sitionalily principle of Montague's emantics that maps 
any syntactic association rule with a semantic associa- 
tion rule. We express it in a straightforward way with the 
ft~llowing homomorphism (for as many basic categories 
as required): 
"H(.:VP) = e 7¢(A \B)  = "K(A)  ~ "H(B) 
"H(,~') = t "H(A/B)  = "H(B) --o "H(A) 
And for a lexical item, given its syntactic type, we as- 
SUlne its semantic proof net to verify: 
• the type of its unique output conclusion is the ho- 
momorplaic image of the syntactic type: 
• its input conclusions (if any) are decorated with 
typed constants. 
An example of such a lexicon is given in table 4. 
Figure 2: Syntactic proof net for John lives in Paris 
Let us illustrate the process on a short example. We 
use the lexicon of table 4 to parse the sentence John lives 
in Paris. The first thing is to define with the syntactic at- 
egories of the different lexical items the syntactic proof 
net of figure 2. It provides the way we should compose 
the semantic recipes of each lexical item: we take its ho- 
momorphic image as in figure 4(a), and we substitute to 
every input its semantic definition with cut-links. 
Then the cut-elimination on the resulting proof net 
gives a new proof net (on figure 4(b)) we can use as the 
semantic analysis of Jolm lives in Paris. If necessary, we 
can come back to the A-term expression:(in p) ( l i ve  j). 
i 
(b) Matching the dual atoms to obtain a 
proof net 
of John lives in Paris 
3 Generation: Stating the Problem 
Let us now consider the problem of generation. We have 
a given semantic proof net (like the one in figure 4(b)) 
and we want to gather syntactic entries with axiom links 
such that: 
I. this yields a correct (syntactic) proof net; 
2. the meaning of the resulting proof net matches the 
given semantic expression. 
As we already said it, we assume that we have some lex- 
ical entries, and we try to make the generation with these 
entries, each one used once and only once. 
Thus, if we define: 
* I/0 the semantic proof net of the expression we want 
to generate; 
* IIi the semantic proof nets associated to the given 
lexical entries i we use; 
* Ti the unfolding in proof structure of the syntactic 
formula of the lexical item i; 
• F the forest made of the syntactic trees of all the 
considered lexical entries plus the output (the type 
we want to derive). 
The generation problem (see figure 5) is to find a match- 
ing M of atomic formulas of F such that: 
1. F endowed with M (let us call this proof structure 
F ' )  is a correct proof net; 
2. when cut-linking H(F' )  with the Hi, and eliminat- 
ing these cuts, we obtain H0. 
This problem is not an original one: making proof 
search with proof nets always leads to look for match- 
ing between atomic formulas of opposite polarities. So 
that an answer to this problem would consist in taking f '  
and try every possible matching. This brute-force tech- 
nique would of course appear essentially inefficient, and 
our purpose is to use everything we know to prune tile 
search domain. 
Nevertheless, note that even with such an algorithm, 
we already reach the decidability (because the finitness 
of the number of the matchings) without making any as- 
sumption on the form of the semantic entries (neither on 
the order of the associated A-terms, nor the presence of a 
free variable). And we want to keep these good proper- 
ties in our algorithm. 
72 
Table 4: Lexicon 
lexical entry syntaxic ategory 
Jo h n N P 
Mary N P m 
Pa,is p 
Lives 
In 
Seeks 
XP 
mP\S 
(,5'\,s')/:vP 
(.VP'~,S')/(((NP\,S')/XP)\(Xp\,b')) 
associated A-term 
J 
Aa: . l i ve  x 
A~..A~/.(in .r).q 
A.r .(try(xf ind))  
semantic proof net 
II john (cf. figure 3(a)) 
\[IMary (cf. figure 3(b)) 
IIPari s (cf. figure 3(c)) 
\[Iliv¢ (cf. figure 3(d)) 
gin (cf. figure 3(e)) 
(cf. figure 3(t)) 
(a) 
1 ljohn 
, , i  i 
1 9 
,L<- <% ,p- ~+; 
i m <+~~nl~ - ,,!o y 'W 
(b) (c) (d) Fllive (e) Flin 
FIMary 1-!. Paris 
find 
i 
. . . . . . . . .  <-1 
\] , 
4 5 6 16 17 , - _ IY  ) ,+ 
try 
(f) Hseek s 
Figure 3: Semantic proof nets of the lexicon of table 4 
4 Cut -e l iminat ionas  Matr ix  Computat ion  
This section first establishes ome equivalent relations 
between cut-elimination on proof nets and matrix equa- 
lions. We then show how to use these equations in the 
generation process and how we can solve them. It en- 
ables us to characterize the properties required by the se- 
mantic proof nets to have a polynomial resolution of the 
generation process. 
4.1 Principles 
First, as expressed in (Girard, 1989) and refornmlated 
in (Retord, 1990: Girard, 1993; Girard, 1995), we state 
the algebraic representation f cuFeliminalion on proof 
nets. Due to lack of space, we can not develop it, but tile 
principle is to express cut-elimination between axioms 
with incidence matrices and paths in graphs. 
Let us consider aproof net U. We denote by (e i ) 1 < i<.~ 
all the vertices taking place for atoms in ft. We can 
define U the incidence matrix of axiom links, cr the in- 
cidence matrix of cut links (we assume without loss of 
generality that they happen only between axiom links), 
and II the incidence matrix of axiom links of-ff where ~- 
is the proof net resulting from all the cut eliminations on 
73 
1 llJohn 
I t - t  + 
L - - -  • ........................................................................................................... 
\[IParis 
6-  
iiii iii 
I t  
(a) Before cut-elimination (b) After cut-elimination 
Figure 4: Semantic proof nets tor (in p)( l ive \]) 
Match ing  :11  
- ! ,,, 
Figure 5: The generation problem 
Then we have (Girard, 1989): 
I1 = (1 - o.a)U(l + ~-" (o .U)k ) (1 -  o. :') (1) 
1 
~1 (e/~) ) is  U = Moreover, s ince(c rU) i sn i lpotent , ( l+~  k
inversible, and its inverse is (1 - crU). The next section 
make explicit he relation ( I ) with a special choice of the 
base (~ i ). 
4.2 Matrix Relation for Cut Elimination 
In tile problem we are dealing with, we know II and some 
of the axiom links in/~'. Let us assume that Vi E \[1,p\], 
both ¢ i and 13(ei ) i are not cut-linked in L; (this assump- 
tion entails no loss of generality). 
4.3 Expressing the Reduction of U into II 
In this section, we want to give a relation equivalent to ( I ) 
which focuses on some axiom links we are interested in. 
As mentioned in section 4.2, we can consider the (ei) 
such that in ~" : 
• Vi E \[1,p\], ei is not cut-linked (then, because of 
the hypothesis made in section 4.2, B(ei)  is cut- 
linked); 
• '7'i E \ [p+ 1. p+ m\], ei is cut-linked but B(ei) is not 
cut-linked; 
• Vi E \[p + m + 1, p + 1~ + n\], both e.i and B(ei ) are 
cut-linked. 
Note: Remember we assume that there is no axiom link 
such that both its conclusions are not cut-linked. So p = 
I I I .  
I B(e ) is the atom in \[7 such that here is an axiom link between e 
and BIe). 
I 
cul -elilninal~,~n lit, 
I 
Then in this base, we express tile matrices (every ax- 
iom link of t--7 has at least one of its conclusion involved 
in a cut link): 
0 Uj !  0 \] 6 \] 
6 ..... 6 
ro : :o io~ 
o.= / ::ai   il 
\[rl~:: o ::o \] 
n =/6 i676 i i  
LO:,O ioJ 
If we define A = ( tU l I I1  - o . l tU l ) ( - r l  and X = 
Uz(1 - o'4U3) -1,  we can state the theorem: 
Theorem 1 Let -U be a correct proof net reducing in 
Res(cr, U) after cut elimination. These relations are 
equivalent: 
• Res(cr, U) = (1 - o:-')U(1 - o .U) - l (1  - o "2) 
• ( tUlII1 - o.1 tLil)U1 = o.=,~,h(1 - o'4t'3) -1 to.._, 
• A = tcr,_Xcr'., arrd U3 = X -1  -~ 0"4. 
Of course, all tire terms are defined. 
We base the proof search algorithm corresponding to the 
generation process we are dealing with on this third rela- 
tion, as explained in the next sections. 
4.4 Solving the Equations 
In this section (proof search oriented), we consider" that 
the axiom links we are looking for are those whose two 
conclusions are involved in cut links. That is we want to 
complete U3. As in the previous ection we proceeded 
74 
by equivalence, solving the equation (1) correponds to 
solving the equation 
.4 = ¢r,.Y tcr._, (2) 
in .Y with X inversible. Then, we have to solve 
(r3 : X -1  +0"4  
such that tU3 = (ra and U a = 1. 
Let 0"._, ¢ .~,,,,,,(1R), X = (xi, j)  E A4,+(IR)and 
.1 E .XA,,(LR). Let the two sequences 1 < it < . . .  < 
i/ < m and 1 < Ji < . . .  < j/ < m be such that with 
(( , ,  6) ¢ \ [ i ,  ,1l\] × \ [ \ [ ,  l l \ ] ,  Eab = (5iaSjb)i,jEtl,m\]x\[1,,1\] 2 
<, : E,,j, : ),,+ 
I l 
In other words, 0.'-uj = 1 ca> Ell E \[1,1\] A i = i h A j = 
i l l  • 
Then 
l / 
cr.,X tcr.-_, = ( E EittJq ) * X * t( E Ei,.+j,.., )
/ t= l  /-,=1 
l / 
= E E (a i i l l+t>Jq J+2OJ i la ) l<- i ' JS rn  
l l  =1 lz=l 
It follows that i fA  = (aij)i,j = o'2-'~-" to2 then 
V(11,12) E \[1,1\]'+',xj,,j,~ = aiqi,2. (3) 
A consequence of this result is that if o4 = 0, then 
/ = n and we determine X completely with relation (3), 
and then the same for  Ua. This configuration correspond 
to the fact that in the (given) semantic proof nets, no out- 
put contains the two conclusions of a same axiom link. 
In this latter case, the computation is not so simple and 
should be mixed with word o,'der constraints. 
5 Example  
Let us process on an example the previous results. We 
still use the lexicon of table 4, and we want to generate 
(if possible) a sentence whose meaning is given by the 
proof net of ligure 7: (try(find j ))m. 
We first need to associate very atom with all index (in 
the figures, we only indicate a number i beside the atom 
to express it is el). Of course, we have to know how to 
recognize the ei that are the same in U (figure 6) and in 
11 (figure 7). This can be done by looking at the typed 
constants decorating the input conclusions (for the mo- 
ment. we don't have a general procedure in the complex 
cases). 
We also assume in this numbering that we know which 
of the atoms in H(F)  are linked to t + (the unique out- 
put). In our case where 0.4 = 0, it is not a problem to 
, { l i f i= j  
-5 , j  = Oi f i#  j 
make such a statement. In other cases, tile complexity 
would increase polynomially. 
Then, the given matrices are: 
"00010000 
00001000 
00100000 
01000000 
10000000 
00000100 
00000010 
00000001 
00000000 
-00000000 
00" 
00 
00 
00 
00 H i= 
O0 
O0 
O0 
10 
O1 
000010000~ 
000100000 
0000000010 
0100000000 
1000000000 
0000000100 
0000000001 
0000010000 
0010000000 
00000100 
0" 1 _~_ 
So 
0000000000"  
0000000000 
0000000000 
0000000000 
0000000000 
0000000100 
0000000000 
0000010000 
0000000000 
0000000000.  
0" 2 = 
00001000-  
00010000 
10000000 
01000000 
00100000 
00000000 
0O0O0100 
00000000 
00000010 
00000001 
.4 = (U-11 I I1  - o" 1 tu1) tUl l  = 
0001000000 
0000100000 
0000000010 
1000000000 
0100000000 
0000000000 
0000000001 
0000000000 
0010000000 
-000000100 
According to the definition of the (it) and tile (jr) fami- 
lies such that 0.2 = E l  El+j+, we have: 
; 4 +2 ,o I 
2 3 4 5 6 7 8 
Then 
.1;5,2 - -  1 - -  a l ,  4 
.1~3,4 - -  1 - -  a5 ,  2 
ah:;,8 ~ 1 ~ a7 ,10  
./?2, 5 -= 1 --~ a4,1 
./.'i, 7 ~ 1 - a3 ,  9 
;l~8, 6 ~-- 1 --~ a lo ,7  
X4, 3 -= I = a2, 5 
397,1 = 1 = ag, 3 
and in this case 0"4 = 0, so according to tile preceeding 
notes . \  is completely determined and 
X = Ua = 
i ooooo il 000100~ 
001000 
010000 
000000  oooooo  
C 000010 3 
We can add this matching to the syntactic forest of fig- 
ure 8(a) (do not forget that//3 represents the edges be- 
tween ei with i E \[17,22\])and obtain on F the matching 
of figure 8(b). 
75 
~L 
m 
B 
- ! i  
rl 
+ 
% 
+- \ i/ 
/" /" 
+ 
\ 
\ / 
/ 
" \  
i ;  =~ 
i ,  / 
+ 
t*'. 
e-  
c 
t " -  
21 
i 
,1 51 16 7 
Y ' "C  : : 
try j m 
find F igure 7: Marking atoms on I I  
8 
t + 
t! 22 23 24 25 ; ~ _ ~  26 e+ 
t+ 
t- ~.--- 
seeks 
e + 
27 
(a) The syntactic forest 
e-  
J~4m 
28 
e-~ t 4 
Mao" 
21 22 23 24 25 
26 
e i ~ 5 "1" 
seeks 
27 ~ 
I 
1 
28 
J~,hn Mary 
8 
t ÷ 
(b) The syntactic forest endowed with the matching described by 
Figure 8: Applying the matching on the syntactic forest 
We still have to ensure the correctness of this proof net 
(because we add all the tensor and par links), but it has a 
quadratic complexity (less than the matrix computation). 
In this case, it is correct. 
Note: 
• Actually, this only gives us the axiom links. It still 
necessitates to compute the word order to have no 
crossing axiom link. This can be done from the ax- 
iom links easier than quadratic time: it is a well- 
bracketing check. Here, it is easy to see that putting 
76  
the John item on the left would achieve the result of 
Mary seeks John, 
• The choice of seeks and its high order type (for in- 
tcnsionnality) shows there is no limitation on the or- 
der of the A-term. 
6 Conc lus ion  
We took advantage of proof nets on the semantic point 
of view and we expressed the generation process as a 
guided proof search. On top of keeping the decidability 
property of this framework, we characterized the seman- 
tic proof nets that enable a polynomial time process. 
Such properties are crucial because it is the central part 
of the generation process (considering Lambek calculus). 
But there are other things left to look at. As the very next 
steps, we should work on the atoms numbering and the 
choice of the lexical items. Appropriate interactions be- 
tween word order contraints and matrix resolution in the 
hard case should also be considered. Moreover, another 
point is to benefit from the power of linear logic and deal 
with non linear A-terms. 
Finally. since different extensions of Lambek calcu- 
lus based on proof nets (Moortgat, 1996; Lecomte and 
Retor6, 1995) have been considered, we hope our pro- 
posal and its good properties to apply to other linguistic 
approaches. 
Acknowledgments  
I would like to thank Christian Retor6 who pointed out 
to me Girard's algebraic interpretation of the cut elimi- 
nation. 
Re ferences  
Kazimierz Ajdukiewicz. 1935. Die syntaktische Kon- 
nexitat. Studia Philosophica, 1:1-27. English trans- 
lation in Storrs McCall (ed), Polish Logic 1920-1939, 
Oxford University Press, pp. 207-231. 
Vincent Danos. 1990. Une Application de la Logique 
Lin6aire fs I'F.tude des Processus de Normalisation 
(principalement duA-calcul). Ph.D. thesis, Universit6 
Paris VII, June. 
Philippe de Groote and Chritian Retor& 1996. On 
the semantic readings of proof-nets. In Glyn Morrill 
Gccrt-Jaal Kruijff and Dick Oehrle, editors, Formal 
Grammar, pages 57-70, Prague, August. FoLLI. 
David R. Dowty, Robert E. Wall, and Stanley Peters. 
1981. hztroduction to Montague Semantics. Kluwer 
Academic Publishers. 
Jean-Yves Girard, Yves Lafont, and P. Taylor. 1988. 
Proofs" and Tyl?es. Cambridge Tracts in Theoretical 
Computer Science 7. Cambridge University Press. 
Jean-Yves Girard. 1987. Linear logic. Theoretical 
Computer Science, 50: I - 102. 
Jean-Yves Girard. 1989. Geometry of interaction I: In- 
terpretation of system F. In C. Bonotto, R. Ferro, 
S. Valentini, and A. Zanardo, editors, Logic Collo- 
quium '88, pages 221-260. North-Holland. 
Jean-Yves Girard. 1993. Linear logic: Its syntax and se- 
mantics. In J.-Y. Girard NS Y. Latont and L. Regnier. 
editors, Advances in Linear Logic, Ithaca, New York, 
June, 
Jean-Yves Girard. 1995. Geometry of interaction III: 
The general case. In J.-Y. Girard, Y. Lafont, and 
L. Regnier, editors, Advances in Linear Logic, pages 
329-389. Cambridge University Press. Proceedings 
of the Workshop on Linear Logic, Ithaca, New York, 
June 1993. 
W. A. Howard, 1980. To H. B. Curry: Essays on combi- 
natory logic, Lambda Calculus and Formalism, chap- 
ter The Formula~-as-Types Notion of Construction, 
pages 479-490. Academic Press, 
Franqois Lamarche and Christian Retor6. 1996. Proof- 
nets for the lambek calculus - an overview. In 
V. Michele Abrusci and Claudio Casadio, editors, 
Proceedings 1996 Roma Workshop. Proofs and Lin- 
guistic Categories, pages 241-262. Editrice CLUEB, 
Bologna, April. 
Franqois Lamarche. 1995. Games semantics for full 
propositional linear logic. In Proceedings, Tenth An- 
nual IEEE Symposium on Logic in Computer Science, 
pages 464-473, San Diego, California, 26-29 June. 
IEEE Computer Society Press. 
Joachim Lambek. 1958. The mathematics of sen- 
tence structure. American Mathematical Monthly, 
65(3):! 54-170. 
Alain Lecomte and Christian Retor6. 1995. Pomset 
logic as an alternative categorial grammar. In Formal 
Grammar, Barcelona. 
Josep M. Merenciano and Glyn Morrill. 1997. Genera- 
tion as deduction on labelled proof nets. In Christian 
Retor6, editor, Proceedings of the 1st International 
Conference on Logical Aspects of Computational Lin- 
guistics (LACL-96), volume 1328 of LNAI, pages 310- 
328, Berlin, September23-25. Springer. 
Richard Montague. 1974. Formal Philosophy: Selected 
Papers of Richard Montague. Yale University Press, 
New Haven, CT. 
Michael Moortgat. 1996. Categorial type logics. In Jo- 
han van Benthem and Alice ter Meulen, editors, Hand- 
book of Logic attd Language, pages 5-91. Elsevier 
Science Publishers, Amsterdam. 
Christian Retor6. 1990. A note on turbo cut elimination. 
Manuscript, September. 
Christian Retor6. 1993. R~seaux et s~quents ordonn~s. 
Ph.D. thesis, University of Paris VII. 
Dirk Roorda. 1991. Resource Logics: Proof-theoretical 
htvestigations. Ph.D. thesis, University of Amster- 
dam, September. 
77 
