The Multimedia Articulation of Answers in a Natural 
Language Database Query System 
Susan  E. Brennan 
Stanford  Un ivers i ty  
and  
Hewlet t  Packard  Labs  
1501 Page  Mi l l  Road  
Pa lo  A l to ,  CA  94304 
Abstract  
This paper describes a domain independent strategy 
for the multimedia rticulation of answers elicited by 
a natural language interface to database query ap- 
plications. Multimedia answers include videodisc im- 
ages and heuristically-produced complete sentences 
in text or text-to-speech form. Deictic reference and 
feedback about the discourse are enabled. The inter- 
face thus presents the application as cooperative and 
conversational. 
1 Int roduct ion 
It is useful to evaluate human-computer communica- 
tion in light of Grice's cooperative principle and max- 
ims \[Gri75\]. Recently there has been much interest 
in a "cooperative response" paradigm for interfaces 
to database query and expert systems \[Ste87\]. The 
most promising strategies in this area of investigation 
involve applying insights gained from psycholinguis- 
tics research in order to create better conversational 
human/computer interfaces. However, inventing ad- 
equate user modeling and inferencing systems for this 
purpose is no easy task, and much of the literature 
on the subject describes proposals for systems yet 
unimplemented or theoretical approaches which may 
depend heavily on a particular domain model. Our 
multimedia rticulator consists of principled solutions 
which have been implemented in a domain indepen- 
dent manner and which produce answers that are rea- 
sonably relevant, informative, and conversational in
style. Such a system makes it possible to begin to 
study users interacting with a question-answering ap- 
plication. 
2 System overv iew 
The system described here functions as a conversa- 
tional human/computer interface to database query 
systems. It consists of a natural language front end 
and a module which articulates multimedia nswers. 
The system accepts well-formed strings as input; 
these sentences are interpreted by an HPSG-based 
parser \[PS87\] which produces a parse tree. After fur- 
ther processing by a semantics module, a pragmatics 
processor \[BFP87\] and a disambiguator, a logical for- 
mula in the language NFLT \[CP85\] is produced. This 
formula is transduced into a database query. Two 
database query formats are currently supported: a 
frame-based representation language, HPRL, and the 
standard relational database query language, SQL. 
Answers returned from the database are then pack- 
aged appropriately by the articulator for presentation 
to the user. 
The two database applications currently supported 
are a database of people and equipment (a subset 
of which we have proposed as a natural language 
evaluation test suite \[FNSW87\]), and a database of 
paintings by 19th century Dutch artist Vincent Van 
Gogh and his contemporaries. The latter database 
was based on the index to a commercially available 
videodisc \[Nim82\] and augmented from other sources. 
Both applications can be run on workstations config- 
ured with or without multimedia output devices. 
3 Database  answer  fo rmat  
The driver of a database query application (i.e. the 
domain dependent part of the system) is responsible 
for returning answers in a list format which consists of 
a keyword specifying the type of the answer, followed 
by the answer itself. The answer types expected by 
the articulator are boolean, number, item, set, quan- 
tity, and table. 
In deciding how to package a response, the articu- 
lator uses the answer type along with additional in- 
formation provided by the parser which identifies the 
illocutionary act of a query as imperative, declara- 
tive, yes/no question, or wh-question. An answer 
is presented textually as a single phrase, as a com- 
plete sentence which parallels the user's query, or 
as a table. In addition, depending on answer type 
and the system's hardware configuration, an answer 
may include videodisc images, text-to-speech, icons 
and maps. While a user can request answers in a 
particular medium via menus, a default strategy is 
in place which yields a fairly satisfying style of hu- 
man/computer interaction. 
4 Text  answers  
4.1  S ty le  
Questions and answers are a common kind of adja- 
cency pair in human language use. The preferred 
style of an answer is often elliptical and shows paral- 
lelism with the surface syntactic structure of the pre- 
ceding question \[CC77\]. In addition, lexical choice 
in the answer is constrained by that in the question. 
An answer which is articulated using different lexical 
entries than its projecting question may lead the user 
to infer that the system is making a distinction when 
it is in fact only using a synonym. 
Although elliptical answers may be the norm in hu- 
man/human conversation, the articulator described 
here defaults to "verbose mode"; it responds to most 
queries with complete sentence answers. The moti- 
vation for this approach arose when we noticed that 
shorter answers were unsatisfying in certain situa- 
tions. When additional textual material intervenes 
on the user's screen after the input query is typed in 
and before the answer appears, and in other cases 
where the user is distracted or not watching the 
screen when the textual answer arrives, a short an- 
swer takes on something of the character of a non- 
sequitur. This problem manifested itself in an early 
version of our system that worked by having users 
send queries over the network via electronic mail to 
a single natural language server which in due time 
mailed its responses back to the user, and also in 
the current system, which returns most answers in 
a few seconds but can be operated in a mode which 
prints modular timing and status information during 
processing. Even more unsatisfying was the articula- 
tion of answers using text-to-speech hardware. Gen- 
erated speech is often hard for users to understand 
\[TRC84\] and in our system, short answers delivered 
this way often failed even to attract a user's atten- 
tion as information-bearing. To echo the query au- 
dibly seemed confusing; what was needed was the 
capability to frame the answer in a complete sen- 
tence based on the query. The final impetus for 
the verbose articulator was our desire to approxi- 
mate some of the effects that real natural language 
generation capability might provide in a question- 
answering human/computer interface, before com- 
mitting resources to a full-scale natural anguage gen- 
eration effort. 
In verbose mode, a sententi~d answer consists sim- 
ply of a string derived from the formatted atabase 
answer with constituents of the user's original query 
wrapped around it. Articulation achieves the dual 
purposes of satisfying the user's request for informa- 
tion while preserving a conversational style of inter- 
action (figure 1). It is interesting to compare these 
answers with the kind of paraphrasing capacity that 
one finds in some other systems which are commer- 
cially available (figure 2). 
To paraphrase a user's query in a form that reflects 
the actual database access method (figure 1) can be 
extremely helpful in identifying misinterpretations of 
the query. However, that approach may interfere with 
2 
User: Who has a terminal? 
System: DAN FLICKINGER HAS A TERMINAL. 
Figure 1: Adjacency pair 
User: Who has a terminal? 
System: Shall I do the following? Create a 
report showing the full name and 
the manager and the equipment from 
the forms on which the equipment 
includes "TERMINAL"?" 
Figure 2: Dialogue from Q&A \[Hen85\] 
natural interaction by insisting that the user confirm 
his or her every conversational move. Furthermore, 
whether the system's interpretation of what the user 
meant by the query with respect o the database is 
a correct mapping or not, the user is forced to re- 
formulate his or her question in a program-like or 
logical form. Such an interface imposes a significant 
cognitive load on the user. Presumably, a central mo- 
tivation for providing a natural anguage interface to 
a database is to avoid forcing the user to use a for- 
eign language. This strategy pays homage to Grice's 
maxim of manner, "avoid obscurity of expression". 
On the other hand, the argument has been made 
that separate, non-equivalent representations provid- 
ing different views of the world should be maintained 
by the system \[Spa83\]; each of these views should 
be available to the user at appropriate times. Thus 
logical paraphrases, desirable in establishing initial 
system credibility, should be available upon specific 
request by the user. 
4 .2  "Namely"  answers  
Grice's maxim of quantity for cooperative communi- 
cation is a reminder that it is frequently desirable to 
provide more information in an answer than was lit- 
erally requested. For example, when a user asks "Are 
there any secretaries?" the best answer may be not 
"Yes", but "Yes - namely, X, Y, and Z" (where X, 
Sentence: How many employees are there? 
Answer list: (NUMBER 4 (NAMELY {abrams} 
{chiang} {devito} {browne})) 
Articulated: THERE ARE 4 EMPLOYEES - 
NAMELY, IRA ABRAMS, LYN 
CHIANG, KAT DEVITO, AND 
DEREK BROWNE. 
Figure 3: "Namely" answer 
Y, and Z are the names of the secretaries). Several 
question-answering systems have addressed issues of 
this sort \[WMJB83\] \[WJMM82\]. While our system 
does not explicitly model the user's goals or know 
anything about indirect speech acts, it provides ex- 
tended answers to some queries via a list containing 
the keyword namely, which appears as the last item 
in the answer list passed to the articulator (figure 3). 
Extended answer lists are constructed as follows. 
When an answer is of type number and its cardinal- 
ity is below a certain threshold, or else when it is 
both of type boolean and affirmative, the articulator 
makes an additional query to the database which re- 
turns information for constructing the "namely" an- 
swer. This additional information is combined with 
the short answer to the user's original query, to cre- 
ate an extended answer. In this way we attempt o 
comply with Grice's maxims of manner and quan- 
tity: to "be brief' and to "make your contribution as 
informative as is required". 
4 .3  Verbose  mode 
Verbose mode works as follows. Initially, a short an- 
swer string is created from the formatted list that the 
database returns. First, the type keyword is stripped 
off the answer list. Depending on the type, the re- 
maining short answer list is transformed into a string 
which is a textual phrase consisting of one of the fol- 
lowing: a name or names (for type set or item the 
database is queried and returns appropriate nouns 
or proper names), a string containing an integer (for 
type number), a string containing a number followed 
by units of measure (for type quantity), or the strings 
"yes" or "no" (for type boolean). Set answers are 
expanded into coordinated noun phrases with appro- 
priate punctuation. If  the type is table, a table is 
produced. 
In constructing the short answers to wh-questions, 
some simple additional heuristics are used. First, if 
the short answer string was derived from a null set 
or null item, the answer is converted from the empty 
string to an appropriate string: "nowhere" if the wh- 
question word is "where", "never" for "when", "no- 
body's" for "whose", and either "none" or else "no" 
plus the string corresponding to the modified NP 
head for "which", "what" or "how many" phrases. 
Otherwise, when the answer is not an empty set and 
the wh-question word is "whose", " 's" is appended 
to the answer. When "whose" modifies the head of 
a noun phrase, the noun phrase is appended to the 
answer. 
Then, once the short answer has been produced, if 
the query is not an imperative (and the answer is 
not a table), the input query's parse tree represen- 
tation is transformed into a template with which to 
frame the short answer. Four functions traverse the 
parse tree and return strings corresponding to con- 
stituents from the input query: these constituents 
are subject, auxiliary verb (if there is one), main verb 
phrase, and preposition (if the wh-question word is 
within a prepositional phrase or fills a trace in one). 
An end-of-sentence string is created which contains, 
simply, terminating punctuation, or else an expanded 
phrase consisting of "namely," followed by a coor- 
dinated noun phrase with appropriate punctuation. 
This expanded phrase is constructed whenever a 
short to medium-length namely list is available at the 
end of an answer list, as shown in figure 3. 
Finally, the verbose answer string is constructed us- 
ing one of two strategies: if the wh-question word 
is in subject position in the query, the constituents 
are positioned in the answer as follows, (the items 
in parentheses may or may not be present): answer 
(aux-verb) (main-verb-phrase) (preposition) end-of- 
sentence; if the wh-question word is in non-subject 
position, the positioning is: subject (aux-verb) main- 
verb-phrase (preposition) answer end-of-sentence. 
If the query is a declarative or a yes/no question, a 
boolean answer results. When a boolean answer is af- 
firmative, the string "yes," with the modified input 
string appended, is articulated. For negative boolean 
answers, if the input string contains an auxiliary verb, 
Sentence: 
Answer list: 
Articulated: 
Does Ira program? 
(BOOLEAN NIL) 
NO, IRA DOES NOT PROGRAM. 
Figure 4: Negation 
Sentence: 
Answer list: 
Articulated: 
Sentence: 
Answer list: 
Articulated: 
Are there any consultants? 
(BOOLEAN T (NAMELY {WASOW} 
{SAG})) 
YES, THERE ARE SOME 
CONSULTANTS - NAMELY, 
TOM WASOW AND IVAN SAG. 
Will any consultants work 
for Kat? 
(BOOLEAN NIL) 
NO, NO CONSULTANTS WILL WORK 
FOR KAT. 
Figure 5: Some/any 
the following sequence is articulated: "No," sub- 
ject auz-verb "not" main-verb-phrase end-of-sentence 
(figure 4). If there is no auxiliary verb in the nega- 
tive answer, the canned phrase "No, it is not true 
that," with the original input string appended, is ar- 
ticulated. In addition, a some/any transformation is 
applied to yes/no questions. "Any of" is replaced by 
"none of" or "some of", depending on whether the 
answer is affirmative or negative. If the input query 
contains an auxiliary verb and the word "any" with- 
out "of' ,  "any" is replaced by "no" or "some" (figure 
5). If the constructed answer template contains suc- 
cessive double negatives (as might result from a query 
containing a negation), these are removed. 
Finally, contrast he situation where the answer list 
is (BOOLEAN NIL) with the one where the answer 
list is simply NIL (which means the database failed to 
return an answer). In this case, the system answers "I 
don't know whether" with the modified input query 
appended (figure 6). 
The style of the articulator's verbose responses, while 
somewhat quaint, appears cooperative because the 
answer is delivered using the same lexical and syn- 
Sentence: 
Answer list: 
Articulated: 
Do any v icepres idents  work? 
NIL 
I DON'T KNOW WHETHER ANY 
VICE PRESIDENTS DO WORK. 
Figure 6: Successful failure 
Sentence: 
Answer list: 
Articulated: 
Which manager is Kat Devito? 
(ITEM) 
KAT DEVITO IS NO MANAGER. 
Figure 7: Pragmatic strangeness 
Sentence: 
Answer list: 
Articulated: 
Sentence: 
Ans.er list: 
Articulated: 
WHAT SELF-PORTRAITS DID 
VAN GOGH PAINT? 
(SET "F0296 .... F0627 .... F0522") 
VAN GOGH DID PAINT 
SELF-PORTRAIT, SELF-PORTRAIT, 
AND SELF-PORTRAIT 
WITH GRAY FELT HAT. 
SHOW ME STARRY NIGHT. 
(ITEM "F0612") 
STARRY NIGHT. 
Figure 8: When words aren't enough 
tactic forms that the user chooses in the query. Of 
course, this technique of wrapping the query around 
the answer works only in very simple question- 
answering applications, where the system has little of 
its own to say. Failure in the form of ungrammatical 
answers to wh-questions sometimes occurs due to lack 
of agreement; rather than extend the verbose articu- 
lator any further, it seems a better strategy to simply 
detect those cases and suppress an ungrammatical 
verbose answer in favor of a short one. Pragmatic 
failures that are still syntactically well-formed may 
also occur, particularly in negative boolean answers 
and empty set answers; we have not arrived at a con- 
sistently successful strategy for detecting and treat- 
ing presuppositional failures (figure 7). Our imple- 
mentation Mso does not take into account syntactic 
constraints on given/new information in framing the 
answer in the query. Despite these limitations, the 
appeal of verbose articulation argues for integrating 
a real generation capability with a natural anguage 
interface to database query. 
5 Mu l t imed ia  
While the articulator always manages to produce 
some sort of textual answer, it is often desirable to 
respond with an answer in a different medium (fig- 
ure 8). Visual images from a videodisc can be dis- 
played whencver item or set answers are associated 
with videodisc frames in the database, in addition to 
whenever an imperative is used to explicitly request 
images. 
The articulator consults a module called circus which 
contains the drivers and methods pertaining to the 
videodisc player and the text-to-speech hardware. 
This module queries the database application to dis- 
cover whether any entities in the answer list can be 
displayed as videodisc images. These images are rep- 
resented and accessed by videodisc frame numbers 
which are stored in the database in SQL tables or in 
HPRL slots. 
When the system is configured with the text-to- 
speech generator and the items in a set answer are 
associated with videodisc images, the entire textual 
answer is displayed first. Then a synchronizing func- 
tion in circus articulates the items in the set by dis- 
playing the approprate image on the video monitor 
and speaking the corresponding items, one at a time. 
Thus the user hears the name of an item spoken im- 
mediately after it comes up on the video monitor; 
videodisc images are displayed for a few seconds each. 
We have not synchronized the textual answers with 
the videodisc answers, since these media are displayed 
on two separate screens at somewhat different rates 
and it would be difficult for a user to attend simul- 
taneously to both. Laser videodiscs in CAV format 
(constant angular velocity) advertise fast, random ac- 
cess to still images, yet with most videodisc players 
there is some time cost to searching for frames on a 
disc and for changing search direction. We minimize 
this cost by reordering the items in the set according 
to their videodisc frame numbers, which correspond 
to their ordering on the disc. 
It seems appropriate to mention here that videodisc 
imagery, like sex and violence, can be either gratu- 
itous or meaningful. In the course of our project, we 
have demonstrated both. In the context of our peo- 
ple and equipment database, the articulator is capa- 
ble of displaying a picture of a featureless cubicle or a 
slide show of nervously posed employees in conjunc- 
tion with a textual answer. On the other hand, the 
database of Van Gogh paintings has proven to be a 
very appealing application for visual articulation. 
With visually articulated answers, we were provided 
with an opportunity to begin to experiment with de- 
ictic reference. While personal pronouns are inter- 
preted by the pragmatics processor using a discourse 
model which takes a centering approach \[Gro77\] 
\[Sid79\] [JW81\] \[GJW83\] \[BFP87\], demonstrative pro- 
nouns are interpreted via a rudimentary environment 
model that knows which painting is currently dis- 
played on the video screen. Note that the displayed 
image may not be the one currently under discussion 
in the the discourse, but may be left over from an ear- 
lier query if no intervening queries elicited videodisc 
answers. Since imagery can be such a salient part 
of the user's environment, it is necessary to support 
deictic references to the current image. At present in 
our system, "this" and "that" have the same interpre- 
tation, but we are exploring alternatives such as inter- 
preting "that" as referring to the previously displayed 
image when it appears contrastively in the same con- 
text as "this". A more thorough treatment should of 
course integrate spatial, temporal and discourse per- 
spective \[Lin79\]. We are attempting to model more 
of the visual environment, including graphic elements 
on the screen, and to integrate deictic information 
more fully into the discourse. 
By now it should be evident that one should not con- 
sider articulation of answers entirely independently 
from discourse. A natural language interface to a 
database query application can provide textual feed- 
back about the discourse apart from the literal an- 
swer. Our articulator makes explicit the interpre- 
tation of the user's pronominal reference by sub- 
stituting the phrase it cospecifies for the pronoun 
in the verbose answer (figure 9). Thus the user 
is likely to discover any misunderstanding instantly. 
On the other hand, since verbose answers rely on 
more or less blindly-applied heuristics to wrap text 
around the answer, the articulator is not a full part- 
ner in the discourse and is not capable of achieving 
Q: What did Gauguin paint? 
A: GAUGUIN PAINTED VINCENT PAINTING. 
Q: How many pictures of Van Gogh were not 
painted by him? 
A: 8 PICTURES OF VAN GOGH WERE NOT PAINTED 
BY GAUGUIN. 
Figure 9: References made explicit 
subtle but nevertheless critical discourse functions 
through syntactic choices. A true generation com- 
ponent would presumably exercise lexical and syntax 
choices, thus avoiding eccentric as well as ungram- 
matical exchanges. 
6 Conc lus ion  
Obviously there is much ground to be covered in the 
areas of natural language communication and con- 
versational human/computer interfaces. Yet interim 
applications can be built which are incrementally im- 
proved over previous ones. This approach is necessary 
in order to observe real users of these systems. 
The domain independent articulation strategy pre- 
sented here enables two very different database query 
systems to present answers conversationally. Gen- 
erality is achieved through the use of answer type 
keywords (provided by the application driver) and 
the illocutionary act of the query (provided by the 
parser). From this information, multimedia nswers 
are assembled and templates in which to frame the 
textual answer are constructed from the input query. 
Although it lacks inferencing ability, the articulator 
described here provides everal features desirable in a 
cooperative interface. These features include answers 
presented in a style that parallels the user's question, 
extended answers, the ability to refer deictically to an 
image, and explicit feedback regarding co-specifiers of 
personal pronouns. 
Finally, multimedia articulation provides serendipi- 
tous opportunities for dispersing ambiguity, due to 
multiple representation of the answer. Take the fol- 
lowing query to our Van Gogh database: "Show 
me the pictures of Van Gogh that he didn't paint." 
The textual answer came back: "The pictures of 
Van Gogh that Van Gogh didn't paint are Vincent 
Painting and Self-Portrait." As we puzzled over "Self- 
Portrait" (how could a self portrait be of Van Gogh, 
but not painted by him?) the videodisc answer was 
displayed on the adjacent screen: first, a portrait of 
Van Gogh that had been painted by his friend Gau- 
guin, and - surprisingly - a self portrait of Van Gogh 
that was not painted, but drawn. 
7 Acknowledgements 
The work reported herein was jointly supported 
by the National Science Foundation and Hewlett 
Packard Labs. It was done in collaboration with 
HPLab's Natural Language group. I would especially 
like to thank Lew Creary, Dan Flickinger, Lyn Fried- 
man and Herb Clark. 
References 
\[BFP87\] 
\[CC77\] 
\[cP851 
\[FNSW87\] 
\[cJwsz\] 
S.E. Brennan, M.W. Friedman, and C.J. 
Pollard. A centering approach to pro- 
nouns. In Proc., 25st Annual Meeting 
of the ACL, Association of Computa- 
tional Linguistics, pages 155-162, Stan- 
ford, CA, 1987. 
H.H. Clark and E.V. Clark. Psychol- 
ogy and Language. Harcourt Brace Jo- 
vanovich, Publishers, 1977. 
L. Creary and C.J. Pollard. A computa- 
tional semantics for natural language. In 
Proc., 23st Annual Meeting of the ACL, 
Association of Computational Linguis- 
tics, pages 172-179, Chicago, IL, 1985. 
D.P. Flickinger, J. Nerbonne, I. Sag, and 
T. Wasow. Toward evaluation of NLP 
systems (in conjunction with panel). In 
25st Annual Meeting of the ACL, As- 
sociation of Computational Linguistics, 
Stanford, CA, 1987. 
B.J. Grosz, A.K. Joshi, and S. Weinstein. 
Providing a unified account of definite 
\[Gri75\] 
\[Gro77\] 
\[cs85\] 
\[Hen85\] 
\[Jw81\] 
\[Kap82\] 
\[KJM86\] 
\[Lin79\] 
\[LS85\] 
noun phrases in discourse. In Proc., 21st 
Annual Meeting of the ACL, Association 
of Computational Linguistics, pages 44- 
50, Cambridge, MA, 1983. 
H.P. Grice. Logic and conversation 
(from the William James lectures, Har- 
vard University, 1967). In P. Cole and J. 
Morgan, editors, Syntax and Semantics 
3: Speech Acts, pages 41-58, Academic 
Press, Inc., 1975. 
Barbara.J. Grosz. The representation 
and use of focus in dialogue understand- 
ing. Technical Report 151, SRI Inter- 
national, 333 Ravenswood Ave, Menlo 
Park, Ca. 94025, 1977. 
B.J. Grosz and C.L. Sidner. The struc- 
ture of discourse structure. Technical 
Report CSLI-85-39, Center for the Study 
of Language and Information, Stanford, 
CA, 1985. 
G. Hendrix. Q&A. Software, Symantec, 
1985. 
A.K. Joshi and S. Weinstein. Control 
of inference: role of some aspects of dis- 
course structure - centering. In Proe., 
International Joint Conference on Arti- 
ficial Intelligence, pages 385-387, Van- 
couver, B.C., 1981. 
S.J. Kaplan. Cooperative r sponses from 
a portable natural anguage query sys- 
tem. Artificial Intelligence, 2(19), 1982. 
J. Kalita, M. Jobes, and G. McCalla. 
Summarizing natural anguage database 
responses. Computational Linguistics, 
12(2):107-124, 1986. 
C. Linde. Focus of attention and the 
choice of pronouns in discourse. In T. 
Givon, editor, Syntax and Semantics, 
pages 337-354, Academic Press, Inc., 
1979. 
W.G. Lehnert and S.P. Schwartz. Data 
base querying by computer. In A.C. 
Graesser and J.B. Black, editors, The 
Psychology of Questions, pages 359-374, 
Lawrence Erlbaum Associates, Publish- 
ers, 1985. 
\[Nim82\] 
\[Po185\] 
\[PS87\] 
\[ReiSS\] 
\[Sid79\] 
\[Sid81\] 
\[Spa83\] 
\[Ste87\] 
\[TRC84\] 
\[WJMM82\] 
\[WMJB83\] 
L. Nimoy. Vincent Van Gogh: a portrait 
in two parts. Videodisc, Philips Interna- 
tional/North American Philips Corpora- 
tion, 1982. 
M. Pollack. Information sought and 
information provided. In CHI '85, 
pages 155-160, San Francisco, CA, 1985. 
C. Pollard and I.A. Sag. Information- 
Based Syntax and Semantics. Vol. i: 
Fundamentals. (in press). Lecture notes 
series no. 13, Center for the Study of 
Language and Information, Stanford, 
CA, 1987. 
R. Reichman. Getting Computers to 
Talk Like You and Me. MIT Press, Cam- 
bridge, MA, 1985. 
Candace L. Sidner. Toward a computa- 
tional theory of definite anaphora com- 
prehension in English. Technical Re- 
port AI-TR-537, MIT, 1979. 
C.L. Sidner. Focusing for interpreta- 
tion of pronouns. American Journal 
of Computational Linguistics, 7(4):217- 
231, 1981. 
K. Sparck-Jones. Shifting meaning rep- 
resentations. In Proc., International 
Joint Conference on Artificial Intelli- 
gence, pages 621-623, 1983. 
P. Stenton. Designing a co-operative in- 
terface to an expert system. Technical 
Report HPL-BRC-TM-87-023, HPLabs 
Technical Memo, 1987. 
J.C. Thomas, M.B. Rosson, and M. 
Chodorow. Human factors and syn- 
thetic speech. In Proc., INTERA CT '84, 
pages 37-42, 1984. 
B. Webber, A. Joshi, E. Mays, and K. 
McKeown. Extended natural language 
data base interactions. International 
Journal of Computers and Mathematics: 
Special issue on computational linguis- 
tics, 1982. 
W. Walster, H. Marburger, A. Jameson, 
and S. Busemann. Over-answering yes- 
no questions: extended responses in a 
NL interface to a vision system. In Proc., 
International Joint Conference on Arti- 
ficial Intelligence, pages 643-646, 1983. 
