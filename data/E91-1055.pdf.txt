A COMMON FRAMEWORK FOR ANALYS IS  AND GENERATION 
Allan t~ amsay 
Department of Computer Science, 
University College Dublin, 
Belfield, DUBLIN 4, Ireland 
ABSTRACT 
It seems highly desirable to use a single representa- 
tion of linguistic knowledge for both analysis and 
generation. We argue that the only part of the 
average NL system's knowledge that we can have 
any faith in is its vocabulary and, to a lesser ex- 
tent, its syntactic rules, and we investigate the 
consequences of this for generation. 
1 ANALYS IS  
Consider a typical NLU system. You give it a piece 
of text, say: 
(1) The house I live in is damp. 
It grinds away, trying out syntactic rules until 
it has an analysis of the structure of the text. 
The syntactic rules incorporate a semantic ele- 
ment, which automatically builds up a representa- 
tion of the meaning of the text in some appropri- 
ate formal language - -  something like the follow- 
ing: presupp(.\[3! B (hon,e(B) & p~e,uw( . \ [3  ! C 
(speaker(C))\]), 3 n (,~ate(n, live) ~ ~gen~(n, 
C) & 3 E : l interval(E)} (contains(E, now) & 
during(E, D)) & in(n, B))\]), 3 e (condition(F, 
damp) & object(F, B) b. 3 G : (interval(G)} 
(contains(G, now) during(G, F))) 
Exactly what formal language you choose for 
the representation of meaning will depend on a 
number of things, notably on the intended appli- 
cation (if any) of the system, on the availability 
of automatic inference systems for the language 
in question, and on the perceived need for ex- 
pressive power. For the system that lies behind 
the discussion in this paper we chose a version of 
Turner's \[1987\] property theory. The details of 
property theory do not really matter very much 
here. What matters is that any attempt o give a 
complete formal paraphrase of (1) must include at 
least as much information as we have given above. 
In particular, the logical structure of our para- 
phrases contains essential information (about, for 
instance, the differences between objects which are 
introduced in the utterance and ones whose exis- 
tence is presupposed), even if there is still consid- 
erable debate about the best way of representing 
this information. 
2 GENERATION 
Suppose we have the formula given above as a for- 
mal paraphrase of (1), and we want to generate 
an English sentence which corresponds to it. We 
might hope to use our syntactic/semantic rules 
"backwards", looking for something which would 
generate a sentence and whose semantic compo- 
nent could be made to match the given sequence. 
The final rule we actually used in our analysis of 
(1) is an elaboration of the standard S ---, NP VP 
rule which contains a description of how the mean- 
ings of the NP and the VP should be combined 
to obtain the meaning of the NP. Space does not 
permit inclusion of this rule. The important point 
for our present purposes is that the representa- 
tion of the meaning of the S is built up from the 
discourse representations of the subject and the 
predicate. The subject and predicate each pro- 
vide some background constraints, and then their 
meanings get combined (along with a complex ab- 
straction to the effect that there is some object g 
which satisfies two properties PO and Pl) to pro- 
duce a further constraint. The question we want 
to investigate here is: can we use rules of this kind 
to generate (1) from the above semantic represen- 
tation? 
The problem is that rules of this kind explain 
how to combine the meanings of constituents once 
you have identified them. Given an expression of 
property theory like the one above, it is very dif- 
ficult to see how to decompose into parts corre- 
sponding to an NP and a VP. So difficult, in fact, 
that without a great deal of extra guidance it must 
be regarded as impossible. 
The final semantic representation reflects our 
beliefs about the best formal paraphrase of the 
English text, whereas the semantic representations 
of the components reflect the way we think that 
this paraphrase might be obtained. Somebody else 
might decide that they liked our final analysis, but 
that they preferred some other way of deriving it. 
In view of the number of different ways of obtain- 
ing a given expression E as the result of simplifying 
some complex expression (t E *\[z, P\]), it is sim- 
ply unreasonable to hope to find the right decom- 
position of a given semantic representation u less 
you already know a great deal about the way the 
linguistic theory being used builds up its repre- 
sentations. Indeed, unless you already have this 
knowledge it is unlikely that you will even be able 
to tell whether some semantic representation has 
a realisation as a natural anguage text at all. 
If we look again at the knowledge available to 
our "average NL system", we see that it will in- 
clude a vocabulary of lexical items, a set of syntac- 
- 309 - 
tic rules, and a set of semantic interpretations of
those rules. It is worth reflecting briefly on the ev- 
idence that lies behind particular choices oflexical 
entry, grammatical rule and semantics interpreta- 
tion. 
The evidence that leads to a particular choice 
of words to go in the vocabulary is fairly concrete. 
We can, for instance, take a corpus of written En- 
glish and collect all the contiguous equences of 
letters separated by spaces. We can be fairly con- 
fident that nearly every such sequence is a word, 
and that those things that are not words will be 
fairly easily detected. We would in fact proba- 
bly want to do a bit better than simply collecting 
all such letter sequences, ince we would want to 
recognise the connection between eat and eaten, 
and between die and dying, but at least the ob- 
jects that we are interested in are available for 
inspection. 
The evidence that leads to a particular choice 
of syntactic theory is less directly available. Once 
we have a vocabulary derived from some corpus, 
we can start to build up word classes on the basis 
of looking for words that can be exchanged with- 
out turning a meaningful sentence into a mean- 
ingless one - -  to spot that almost any meaning- 
ful sentence containing the word rJalk could be 
turned into a meaningful sentence containing the 
word run, for instance. We can then start looking 
for phrase types and for relations between phrase 
types. We can perhaps be reasonably confident 
about our basic classification into word classes, 
though we may find some surprises, but the ev- 
idence for specific phrase types is often in the eye 
of the beholder, and the evidence for subtler rela- 
tionships can be remarkably intangible. Nonethe- 
less, there is some concrete evidence, and it has led 
to some degree of consensus about the basic ele- 
ments of syntactic theory. You will, for instance, 
find very few NL  systems that do not utilise the 
notion of an NP, or that do not r~cognise the phe- 
nomena of agreement and unbounded dependency. 
The evidence for specific semantic theories, by 
contrast, is almost entirely circumstantial. We can 
usually tell whether two sentences mean the same 
thing; we can usually tell whether a sentence is 
ambiguous; and we can sometimes tell whether 
one sentence entails another, or whether one con- 
tradicts another. To get from here to a decision 
that one representation scheme is more appropri- 
ate than another, and to a particular translation 
of some piece of NL  into the chosen scheme, re- 
quires quite a bit of faith. In order to build a sys- 
tem for translating NL  input into some computer- 
amenable representation we have no choice but 
to make that act of faith. We have to choose 
a representation scheme, and we have to decide 
how to translate specific fragments of NL  into it 
and how to combine such translated fragments to 
build translations of larger fragments. Examples 
abound. The system that constructed the trans- 
lation of (1) into the given sequence of proposi- 
tions in PT is described and defended at length 
in \[Ramsay 1990\], and we will not recapitulate it
here. We note, however, that the rules we use 
for translating from English into this representa- 
tion scheme wilt not generate arbitrary such se- 
quences. Only sequences which correspond to the 
output of the rules we are using applied to the 
translations we have allocated to the lexical items 
in our vocabulary will be generated. Tibia is true of 
all NL s!/stems that translate from a natural lan- 
guage into some formal representation language. 
For any such system, only a fraction of the pos- 
sible sentences of the representation language will 
correspond to direct translations of NL sentences, 
and the only way of telling which they are is to 
look for the corresponding NL sentence. 
Suppose we wanted to develop a system which 
used our linguistic knowledge base to generate 
texts corresponding to the output of some appli- 
cation system. It would be absurd to expect the 
application program to generate sentences of our 
chosen representation language, and to try to work 
from these via our syntactic/semantic rules to an 
NL realisation. We have no convincing evidence 
that our representation language is correct; we 
have no easy way of specifying which sentences 
of the representation language correspond via our 
rules to NL sentences; and even if we did have 
a sentence in the representation language which 
corresponded to an NL sentence, we would have 
a great deal of difficulty in breaking it into ap- 
propriate components, particularly if this involved 
replacing a single formula by the instantiation of 
some abstraction with an appropriate term. 
We suggest instead that the best way to get an 
NL system to generate text to satisfy the require- 
ments of some application program is for it to of- 
fer suggestions about how it is going to build the 
text, along with explanations of why it is going to 
build it that way. We therefore supplement our 
descriptions of linguistic structures with a compo- 
nent describing their functional structure. 
For the rule for S, for instance, we add an ele- 
ment describing what the SUBJECT and PRED are 
for. We could say that the SUBJECT is the theme 
and the PRED is the theme, using terms from func- 
tional grammar \[Halliday 1985\] for the purpose. A 
language generation system using the above rule 
can now ask the application program whether it 
is prepared to describe a theme and a theme. Ad- 
mittedly this still presumes that the application 
program knows enough about the linguistic theory 
to know about themes and themes, but at least it 
does not need to know how they are organised into 
sentences, how they can be realised, or how their 
semantic representations are combined to form a 
sentence in the representation language. Further- 
more, if the application program is to make full 
use of the expressive power of NL then it must be 
able to make sensible choices about such matters, 
since any hearer will be sensitive to them. If the 
combination of application program and N L gener- 
- 310 . ,  
ation system cannot make rational decisions about 
whether to say, for instance, John ate it or It was 
eaten by John then they must expect to be mis- 
understood by native English speakers who are, 
albeit unconsciously, aware that these two carry 
different messages. 
Once the application program has agreed to de- 
scribe a theme and a rheme, the NL system can 
then elicit these descriptions. Since the rule being 
used specifies that the theme must be an NP then 
it can move on to rules and lexieal entries that 
can be used for constructing NPs and start asking 
questions about these. 
3 COMPARISONS 
We are concerned here almost entirely with what 
has come to be known as the "tactical" component 
of language generation - -  with how to realise some 
chosen message as NL text, rather than with how 
to decide what message we want realised. The 
two are not entirely separable, but we have lit- 
tle to say about "strategic" tasks such as deciding 
what properties hould be used for characterising 
an item being referred to by an NP, which we ex- 
pect the application program to deal with. The 
responsibility for deciding whether to pronomi- 
nalise something, for instance, would be handed 
over to the application program by the NL sys- 
tem bluntly asking whether a description with the 
property qua l i f  i e r  :pronoun was acceptable. We 
thus completely side-step the issues addressed by 
systems which plan what to say to produce spe- 
cific effects in a hearer \[Appelt 1985\], which work 
out how organise multi-sentence t xts in order to 
convey complex messages without disorienting the 
heater \[McKeown 1985\], or which invent effective 
descriptions for use in referring expressions /Dale 
1988\]. These are all important asks, but they are 
not what we are concerned with here. 
The most direct comparison is with \[Shieber 
et al. 1990\], where an approach to generat- 
ing text from a given logical form is described. 
The algorithm described by Shieber and his col- 
leagues takes a realisable A-calculus expression 
and uses their syntactic/semantic rules "back- 
wards" to generate appropriate text. Their em- 
phasis is on controlling the way these rules are ap- 
plied, with rules satisfying certain rather stringent 
criteria being applied top-down and al\] other rules 
being used bottom-up. The algorithm looks effec- 
tive, so long as (a) it is reasonable to assume that 
an application program can be relied on to pro- 
duce realisable expressions in the representation 
language and (b) there are any rules which satisfy 
their criteria. We argued at some length above 
that the first of these conditions is unlikely to hold 
unless the application program knows a great deal 
about the syntactic/semantic rules which are go- 
ing to be used. We also suspect hat the way they 
control the top-down application of rules imposes 
unacceptable constraints on the way that seman- 
tic representations of wholes are composed out of 
semantic representations of parts. Certainly none 
of the rules we used in the system described in 
\[Ramsay 1990\] satisfy their criteria. We there- 
fore believe that our approach, where the appli- 
cation decides whether the fragments of text pro- 
posed by the NL system are acceptable as they 
are proposed, is more flexible than any approach 
which depends on getting a reaiisable expression 
of the representation language from the applica- 
tion program and systematically translating it into 
a natural anguage using syntactic/semantic rules 
which were primarily designed for translating in 
the other direction. 
REFERENCES 
Appelt D. (1085): Planning English Sentences: 
Cambridge University Press, Cambridge. 
Dale R. (1988): Generating Referring Ezpres- 
sions in a Domain of Objects and Processes, 
Ph.D. thesis, Centre for Cognitive Science, 
University of Edinburgh. 
Halliday M.A.K. (1985): An Introduction to 
Functional Grammar: Arnold, London. 
Kamp H. (1984): A Theory of Truth and Seman- 
tic Representation, i  Formal Method8 in Lhe 
Study of Language (eds. J. Groenend~jk, J. 
Janssen & M. Stokhof): Foris Publications, 
Dordtecht: 277-322. 
McKeown K. (1985): Generating English Tezt: 
Cambridge University Press, Cambridge. 
Ramsay A.M. (1990): The Logical Structure of 
English: Computing Semantic Content: Pit- 
man, London. 
Shieber S.M, van Noord G., Pereira F.C.N. & 
Moore R.C. (1090): Semantic-Head-Driven 
Generation, Computational Linguistics 16(1): 
30-42. 
Turner R. (1087): A Theory of Properties, Jour- 
nal of Symbolic Logic 52(2): 455-472. 
-311  - 

