Inheritance and the CCG Lexicon
Mark McConville
Institute for Communicating and Collaborative Systems
School of Informatics
University of Edinburgh
2 Buccleuch Place, Edinburgh, EH8 9LW, Scotland
Mark.McConville@ed.ac.uk
Abstract
I propose a uniform approach to the elim-
ination of redundancy in CCG lexicons,
where grammars incorporate inheritance
hierarchies of lexical types, defined over
a simple, feature-based category descrip-
tion language. The resulting formalism is
partially ‘constraint-based’, in that the cat-
egory notation is interpreted against an un-
derlying set of tree-like feature structures.
I argue that this version of CCG subsumes
a number of other proposed category no-
tations devised to allow for the construc-
tion of more efficient lexicons. The for-
malism retains desirable properties such
as tractability and strong competence, and
provides a way of approaching the prob-
lem of how to generalise CCG lexicons
which have been automatically induced
from treebanks.
1 The CCG formalism
In its most basic conception, a CCG over alpha-
bet ? of terminal symbols is an ordered triple
?A,S, L?, where A is an alphabet of saturated cat-
egory symbols, S is a distinguished element of A,
and L is a lexicon, i.e. a mapping from ? to cate-
gories over A. The set of categories over alphabet
A is the closure of A under the binary infix con-
nectives / and \ and the associated ‘modalities’ of
Baldridge (2002). For example, assuming the sat-
urated category symbols ‘S’ and ‘NP’, here is a
simple CCG lexicon (modalities omitted):
John ` NP(1)
Mary ` NP
loves ` (S\NP)/NP
The combinatory projection of a CCG lexicon is
its closure under a finite set of resource-sensitive
combinatory operations such as forward applica-
tion (2), backward application (3), forward type
raising (4), and forward composition (5):
X/Y Y ? X(2)
Y X\Y ? X(3)
X ? Y/(Y \X)(4)
X/Y Y/Z ? X/Z(5)
CCG ?A,S, L? over alphabet ? generates string
s ? ?? just in case ?s, S? is in the combinatory
projection of lexicon L. The derivation in Figure
1 shows that CCG (1) generates the sentence John
loves Mary, assuming that ‘S’ is the distinguished
symbol, and where >T, >B and > denote in-
stances of forward raising, forward composition
and forward application respectively:
John loves Mary
NP (S\NP)/NP NP
>T
S/(S\NP)
>B
S/NP
>
S
Figure 1: A CCG derivation
2 Lexical redundancy in CCG
CCG has many advantages both as a theory of
human linguistic competence and as a tool for
practical natural language processing applications
(Steedman, 2000). However, in many cases de-
velopment has been hindered by the absence of
an agreed uniform approach to eliminating redun-
dancy in CCG lexicons. This poses a particular
problem for a radically lexicalised formalism such
as CCG, where it is customary to handle bounded
1
dependency constructions such as case, agreement
and binding by means of multiple lexical cate-
gory assignments. Take for example, the language
schematised in Table 1. This fragment of English,
though small, exemplifies certain non-trivial as-
pects of case and number agreement:
John John
he loves me
the girl you
girls him
I us
you love them
we the girl
they girls
girls girls
Table 1: A fragment of English
The simplest CCG lexicon for this fragment is pre-
sented in Table 2:
John ` NPsgsbj, NPobj
girl ` Nsg
s ` Npl\Nsg, NPplsbj\Nsg, NPobj\Nsg
the ` NPsgsbj/Nsg, NPobj/Nsg,
NPplsbj/Npl, NPobj/Npl
I,we, they ` NPplsbj
me, us, them, him ` NPobj
you ` NPplsbj, NPobj
he ` NPsgsbj
love ` (S\NPplsbj)/NPobj
s ` ((S\NPsgsbj)/NPobj)\((S\NP
pl
sbj)/NPobj)
Table 2: A CCG lexicon
This lexicon exhibits a number of multiple cate-
gory assignments: (a) the proper noun John and
the second person pronoun you are each assigned
to two categories, one for each case distinction;
(b) the plural suffix -s is assigned to three cate-
gories, depending on both the case and ‘bar level’
of the resulting nominal; and (c) the definite arti-
cle the is assigned to four categories, one for each
combination of case and number agreement dis-
tinctions. Since in each of these three cases there
is no pretheoretical ambiguity involved, it is clear
that this lexicon violates the following efficiency-
motivated ideal on human language lexicons, in
the Chomskyan sense of locus of non-systematic
information:
ideal of functionality a lexicon is ideally a func-
tion from morphemes to category labels, modulo
genuine ambiguity
Another efficiency-motivated ideal which the
CCG lexicon in Table 2 can be argued to violate
is the following:
ideal of atomicity a lexicon is a mapping from
morphemes ideally to atomic category labels
In the above example, the transitive verb love is
mapped to the decidedly non-atomic category la-
bel (S\NPplsbj)/NPobj. Lexicons which violate the
criteria of functionality and atomicity are not just
inefficient in terms of storage space and develop-
ment time. They also fail to capture linguistically
significant generalisations about the behaviour of
the relevant words or morphemes.
The functionality and atomicity of a CCG lexi-
con can be easily quantified. The functionality ra-
tio of the lexicon in Table 2, with 22 lexical entries
for 14 distinct morphemes, is 2214 = 1.6. The atom-
icity ratio is calculated by dividing the number of
saturated category symbol-tokens by the number
of lexical entries, i.e. 3622 = 1.6.
Various, more or less ad hoc generalisations of
the basic CCG category notation have been pro-
posed with a view to eliminating these kinds of
lexical redundancy. One area of interest has in-
volved the nature of the saturated category sym-
bols themselves. Bozsahin (2002) presents a ver-
sion of CCG where saturated category symbols
are modified by unary modalities annotated with
morphosyntactic features. The features are them-
selves ordered according to a language-particular
join semi-lattice. This technique, along with the
insistence that lexicons of agglutinating languages
are necessarily morphemic, allows generalisations
involving the morphological structure of nouns
and verbs in Turkish to be captured in an elegant,
non-redundant format. Erkan (2003) generalises
this approach, modelling saturated category labels
as typed feature structures, constrained by under-
specified feature structure descriptions in the usual
manner.
Hoffman (1995) resolves other violations of the
ideal of functionality in CCG lexicons for lan-
guages with ‘local scrambling’ constructions by
means of ‘multiset’ notation for unsaturated cat-
egories, where scope and direction of arguments
can be underspecified. For example, a multiset
category label like S{\NPsbj, \NPobj} is to be un-
derstood as incorporating both (S\NPsbj)\NPobj
and (S\NPobj)\NPsbj.
Computational implementations of the CCG
formalism, including successive versions of the
2
Grok/OpenCCG system1, have generally dealt
with violations of the ideal of atomicity by allow-
ing for the definition of macro-style abbreviations
for unsaturated categories, e.g. using the macro
‘TV’ as an abbreviation for (S\NPsbj)/NPobj.
One final point of note involves the project re-
ported in Beavers (2004), who implements CCG
within the LKB system, i.e. as an application of
the Typed Feature Structure Grammar formalism
of Copestake (2002), with the full apparatus of un-
restricted typed feature structures, default inheri-
tance hierarchies, and lexical rules.
3 Type-hierarchical CCG
One of the aims of the project reported here has
been to take a bottom-up approach to the prob-
lem of redundancy in CCG lexicons, adding just
enough formal machinery to allow the relevant
generalisations to be formulated, whilst retaining a
restrictive theory of human linguistic competence
which satisfies the ‘strong competence’ require-
ment, i.e. the competence grammar and the pro-
cessing grammar are identical.
I start with a generalisation of the CCG for-
malism where the alphabet of saturated category
symbols is organised into a ‘type hierarchy’ in
the sense of Carpenter (1992), i.e. a weak order
?A,vA?, where A is an alphabet of types, vA is
the ‘subsumption’ ordering on A (with a least ele-
ment), and every subset of A with an upper bound
has a least upper bound. An example type hi-
erarchy is in Figure 2, where for example types
‘Nomsg’ and ‘NP’ are compatible since they have
a non-empty set of upper bounds, the least upper
bound (or ‘unifier’) being ‘NPsg’.
NPsgsbj NP
pl
sbj NP
sg
obj NP
pl
obj
QQ
Q
QQ
Q
PPPP
PP



NPsbj NPobj NPsg NPpl Nsg Npl
## LL HHH
H
PPPP
PPP
  PPPP
P
HHH
H
  
NP Nomsg Nompl N


   @@ PPPP
PPNomS
!!!! PPPP
top
Figure 2: Type hierarchy of saturated categories
A type-hierarchical CCG (T-CCG) over alpha-
bet ? is an ordered 4-tuple ?A,vA, S, L?, where
1http://openccg.sourceforge.net
?A,vA? is a type hierarchy of saturated category
symbols, S is a distinguished element of A, and
lexicon L is a mapping from ? to categories over
A. Given an appropriate vA-compatibility rela-
tion on the categories over A, the combinatory
projection of T-CCG ?A,vA, S, L? can again be
defined as the closure of L under the CCG com-
binatory operations, assuming that variable Y in
the type raising rule (4) is restricted to maximally
specified categories.
The T-CCG lexicon in Table 3, in tandem with
the type hierarchy in Figure 2, generates the frag-
ment of English in Table 1:
John ` NPsg
girl ` Nsg
s ` Nompl\Nsg
the ` NPsg/Nsg, NPpl/Npl
I,we, they ` NPplsbj
me, us, them ` NPplobj
you ` NPpl
he ` NPsgsbj
him ` NPsgobj
love ` (S\NPplsbj)/NPobj
s ` ((S\NPsgsbj)/NPobj)\((S\NP
pl
sbj)/NPobj)
Table 3: A T-CCG lexicon
Using this lexicon, the sentence girls love John is
derived as in Figure 3:
girl s love John
Nsg Nompl\Nsg (S\NPplsbj)/NPobj NPsg
<
Nompl
>T
S/(S\Nompl)
>B
S/NPobj
>
S
Figure 3: A T-CCG derivation
The T-CCG lexicon in Table 3 comes closer to sat-
isfying the ideal of functionality than does the lex-
icon in Table 2. While the latter has a functionality
ratio of 1.6, the former’s is 1614 = 1.1.
This improved functionality ratio results from
the underspecification of saturated category sym-
bols inherent in the subsumption relation. For ex-
ample, whereas the proper noun John is assigned
to two distinct categories in the lexicon in Table
2, in the T-CCG lexicon it is assigned to a sin-
gle non-maximal type ‘NPsg’ which subsumes the
two maximal types ‘NPsgsbj’ and ‘NP
sg
obj’. In other
3
words, the phenomenon of case syncretism in En-
glish proper nouns is captured by having a general
singular noun phrase type, which subsumes a plu-
rality of case distinctions.
The T-CCG formalism is equivalent to the ‘mor-
phosyntactic CCG’ formalism of Bozsahin (2002),
where features are ordered in a join semi-lattice.
Any generalisation which can be expressed in a
morphosyntactic CCG can also be expressed in a
T-CCG, since any lattice of morphosyntactic fea-
tures can be converted into a type hierarchy. In
addition, T-CCG is equivalent to the formalism
described in Erkan (2003), where saturated cat-
egories are modelled as typed feature structures.
Any lexicon from either of these formalisms can
be translated into a T-CCG lexicon whose func-
tionality ratio is either equivalent or lower.
4 Inheritance-driven CCG
A second generalisation of the CCG formalism in-
volves adding a second alphabet of non-terminals,
in this case a set of ‘lexical types’. The lexical
types are organised into an ‘inheritance hierarchy’,
constrained by expressions of a simple feature-
based category description language, inspired by
previous attempts to integrate categorial grammars
and unification-based grammars, e.g. Uszkoreit
(1986) and Zeevat et al. (1987).
4.1 Simple category descriptions
The set of simple category descriptions over al-
phabet A of saturated category symbols is defined
as the smallest set ? such that:
1. A ? ?
2. for all ? ? {f, b}, (SLASH ?) ? ?
3. for all ? ? ?, (ARG ?) ? ?
4. for all ? ? ?, (RES ?) ? ?
Note that category descriptions may be infinitely
embedded, in which case they are considered to
be right-associative, e.g. RES ARG RES SLASH f.
A simple category description like (SLASH f) or
(SLASH b) denotes the set of all expressions which
seek their argument to the right/left. A description
of the form (ARG ?) denotes the set of expressions
which take an argument of category ?, and one
like (RES ?) denotes the set of expressions which
combine with an argument to yield an expression
of category ?.
Complex category descriptions are simply sets
of simple category descriptions, where the as-
sumed semantics is simply that of conjunction.
4.2 Lexical inheritance hierarchies
Lexical inheritance hierarchies (Flickinger, 1987)
are type hierarchies where each type is associated
with a set of expressions drawn from some cate-
gory description language ?. Formally, they are
ordered triples ?B,vB, b?, where ?B,vB? is a
type hierarchy, and b is a function fromB to ?(?).
An example lexical inheritance hierarchy over
the set of category descriptions over the alpha-
bet of saturated category symbols in Table 2 is
presented in Figure 4. The intuition underlying
these (monotonic) inheritance hierarchies is that
instances of a type must satisfy all the constraints
associated with that type, as well as all the con-
straints it inherits from its supertypes.
verbpl
RES ARG Nompl
 
verbsg
RES ARG Nomsg
detsg
ARG NomsgRES Nomsg



detpl
ARG NomplRES Nompl
BB
BB
suffixsg
ARG verbplRES verbsg

suffixpl
ARG NsgRES Nompl
CC
CC
verb
SLASH f
ARG NPobjRES SLASH b
RES ARG NPsbjRES RES S

det
SLASH f
ARG N
RES NP
suffix
SLASH b
HHH
HHH
top
Figure 4: A lexical inheritance hierarchy
This example hierarchy is a single inheritance hi-
erarchy, since every lexical type has no more than
one immediate supertype. However, multiple in-
heritance hierarchies are also allowed, where a
given type can inherit constraints from two super-
types, neither of which subsumes the other.
4.3 I-CCGs
An inheritance-driven CCG (I-CCG) over alpha-
bet ? is an ordered 7-tuple ?A,vA, B,vB, b,
S, L?, where ?A,vA? is a type hierarchy of sat-
urated category symbols, ?B,vB, b? is an inheri-
tance hierarchy of lexical types over the set of cat-
egory descriptions overA?B, S is a distinguished
symbol inA, and lexicon L is a function from ? to
A ? B. Given an appropriate vA,B-compatibility
relation on the categories overA?B, the combina-
tory projection of I-CCG ?A,vA, B,vB, b, S, L?
can again be defined as the closure of L under the
4
CCG combinatory operations.
The I-CCG lexicon in Table 4, along with the
type hierarchy of saturated category symbols in
Figure 2 and the inheritance hierarchy of lexical
types in Figure 4, generates the fragment of En-
glish in Table 1. Using this lexicon, the sentence
John ` NPsg
girl ` Nsg
s ` suffix
the ` det
I,we, they ` NPplsbj
me, us, them ` NPplobj
you ` NPpl
he ` NPsgsbj
him ` NPsgobj
love ` verbpl
Table 4: An I-CCG lexicon
girls love John is derived as in Figure 5, where
derivational steps involve ‘cache-ing out’ sets of
constraints from lexical types.
girl s love John
Nsg suffix verbpl NPsg
SLASH b RES ARG Nompl
suffixpl verb
ARG Nsg SLASH f
RES Nompl ARG NPobj
< RES SLASH b
Nompl RES ARG NPsbj
>T RES RES S
RES S
SLASH f
ARG RES S
ARG ARG Nompl
ARG SLASH b
>B
RES S
ARG NPobj
SLASH f
>
S
Figure 5: An I-CCG derivation
This derivation relies on a version of the CCG
combinatory rules defined in terms of the I-CCG
category description language. For example, for-
ward application is expressed as follows — for all
compex category descriptions ? and ? such that
(SLASH b) 6? ?, and {? | (ARG ?) ? ?} ? ? is
compatible, the following is a valid inference:
? ?
>
{? | (RES ?) ? ?}
The functionality ratio of the I-CCG lexicon in Ta-
ble 4 is 1414 = 1 and the atomicity ratio is 1414 = 1.
In other words, the lexicon is maximally non-
redundant, since all the linguistically significant
generalisations are encodable within the lexical in-
heritance hierarchy.
The optimal atomicity ratio of the I-CCG lexi-
con is a direct result of the introduction of lexical
types. In the T-CCG lexicon in Table 3, the transi-
tive verb love was assigned to a non-atomically la-
belled category (S\NPplsbj)/NPobj. In the I-CCG’s
inheritance hierarchy in Figure 4, there is a lexical
type ‘verbpl’ which inherits six constraints whose
conjunction picks out exactly the same category.
It is with this atomic label that the verb is paired
in the I-CCG lexicon in Table 4.
The lexical inheritance hierarchy also has a role
to play in constructing lexicons with optimal func-
tionality ratios. The T-CCG lexicon in Table 3
assigned the definite article to two distinct cate-
gories, one for each grammatical number distinc-
tion. The I-CCG utilises the disjunction inherent
in inheritance hierarchies to give each of these a
common supertype ‘det’, which is associated with
the properties all determiners share.
Finally, the I-CCG formalism can be argued
to subsume the multiset category notation of
Hoffman (1995), in the sense that every mul-
tiset CCG lexicon can be converted into an I-
CCG lexicon with an equivalent or better func-
tionality ratio. Recall that Hoffman uses gener-
alised category notation like S{\NPsbj, \NPobj}
to subsume two standard CCG category labels
(S\NPsbj)\NPobj and (S\NPobj)\NPsbj. Again it
should be clear that this is just another way of
representing disjunction in a categorial lexicon,
and can be straightforwardly converted into a lexi-
cal inheritance hierarchy over I-CCG category de-
scriptions.
5 Semantics of the category notation
In the categorial grammar tradition initiated by
Lambek (1958), the standard way of providing a
semantics for category notation defines the deno-
tation of a category description as a set of strings
of terminal symbols. Thus, assuming an alphabet
? and a denotation function [[. . .]] from the sat-
urated category symbols to ?(?), the denotata of
unsaturated category descriptions can be defined
as follows, assuming that the underlying logic is
simply that of string concatenation:
[[?/?]] = {s | ?s? ? [[?]], ss? ? [[?]]}(6)
[[?\?]] = {s | ?s? ? [[?]], s?s ? [[?]]}
This suggests an obvious way of interpreting the
I-CCG category notation defined above. Let’s
5
start by assuming that, given some I-CCG ?A,vA,
B,vB, b, S, L? over alphabet ?, there is a deno-
tation function [[. . .]] from the maximal types in
the hierarchy of saturated categories ?A,vA? to
?(?). For all non-maximal saturated category
symbols ? in A, the denotation of ? is then the
set of all strings in any of ?’s subcategories, i.e.
[[?]] = ??vA?[[?]]. The denotata of the simple
category descriptions can be defined by universal
quantification over the set of simple category de-
scriptions ?:
• [[SLASH f]] = ??,???[[?/?]]
• [[SLASH b]] = ??,???[[?\?]]
• [[ARG ?]] = ????[[?/?]] ? [[?\?]]
• [[RES ?]] = ????[[?/?]] ? [[?\?]]
This just leaves the simple descrip-
tions which consist of a type in the
lexical inheritance hierarchy ?B,vB,
b?. If we define the constraint set of some
lexical type ? ? B as the set ? of all category
descriptions either associated with or inherited
by ?, then the denotation of ? is defined as
?
???[[?]].
Unfortunately, this approach to interpreting I-
CCG category descriptions is insufficient, since
the logic underlying CCG is not simply the logic
of string concatenation, i.e. CCG allows a limited
degree of permutation by dint of the crossed com-
position and substitution operations. In fact, there
appears to be no categorial type logic, in the sense
of Moortgat (1997), for which the CCG combi-
natory operations provide a sound and complete
derivation system, even in the resource-sensitive
system of Baldridge (2002). An alternative ap-
proach involves interpreting I-CCG category de-
scriptions against totally well-typed, sort-resolved
feature structures, as in the HPSG formalism of
Pollard and Sag (1994).
Given some type hierarchy ?A,vA? of saturated
category symbols and some lexical inheritance hi-
erarchy ?B,vB, b?, we define a class of ‘category
models’, i.e. binary trees where every leaf node
carries a maximal saturated category symbol in A,
every non-leaf node carries a directional slash, and
every branch is labelled as either a ‘result’ or an
‘argument’. In addition, nodes are optionally la-
belled with maximal lexical types from B. Note
that since only maximal types are permitted in a
model, they are by definition sort-resolved. As-
suming the hierarchies in Tables 2 and 4, an ex-
ample category model is given in Figure 6, where
arcs by convention point downwards:
S
  
R
NPplsbj
@@
A
\

R
NPsgobj
QQ
Q A
/ : verbpl
Figure 6: A category model
Given some inheritance hierarchy ?B,vB, b? of
lexical types, not all category models whose nodes
are labelled with maximal types from B are ‘well-
typed’. In fact, this property is restricted to those
models where, if node n carries lexical type ?,
then every category description in the constraint
set of ? is satisfied from n. Note that the root
of the model in Figure 6 carries the lexical type
‘verbpl’. Since all six constraints inherited by this
type in Figure 4 are satisfied from the root, and
since no other lexical types appear in the model,
we can state that the model is well-typed.
In sum, given an appropriate satisfaction rela-
tion between well-typed category models and I-
CCG category descriptions, along with a definition
of the CCG combinatory operations in terms of
category models, it is possible to provide a formal
interpretation of the language of I-CCG category
descriptions, in the same way as unification-based
formalisms like HPSG ground attribute-value no-
tation in terms of underlying totally well-typed,
sort-resolved feature structure models. Such a se-
mantics is necessary in order to prove the correct-
ness of eventual I-CCG implementations.
6 Extending the description language
The I-CCG formalism described here involves a
generalisation of the CCG category notation to in-
corporate the concept of lexical inheritance. The
primary motivation for this concerns the ideal of
non-redundant encoding of lexical information in
human language grammars, so that all kinds of lin-
guistically significant generalisation can be cap-
tured somewhere in the grammar. In order to fulfil
this goal, the simple category description language
defined above will need to be extended somewhat.
For example, imagine that we want to specify the
6
set of all expressions which take an NPobj argu-
ment, but not necessarily as their first argument,
i.e. the set of all ‘transitive’ expressions:
ARG NPobj(7)
? RES ARG NPobj
? RES RES ARG NPobj
? . . .
It should be clear that this category is not finitely
specifiable using the I-CCG category notation.
One way to allow such generalisations to be
made involves incorporating the ? modal itera-
tion operator used in Propositional Dynamic Logic
(Harel, 1984) to denote an unbounded number
of arc traversals in a Kripke structure. In other
words, category description (RES* ?) is satisfied
from node n in a model just in case some finite se-
quence of result arcs leads from n to a node where
? is satisfied. In this way, the set of expressions
taking an NPobj argument is specified by means of
the category description RES* ARG NPobj.
7 Computational aspects
At least as far as the I-CCG category notation de-
fined in section 4.1 is concerned, it is a straight-
forward task to take the standard CKY approach
to parsing with CCGs (Steedman, 2000), and gen-
eralise it to take a functional, atomic I-CCG lex-
icon and ‘cache out’ the inherited constraints on-
line. As long as the inheritance hierarchy is non-
recursive and can thus be theoretically cached out
into a finite lexicon, the parsing problem remains
worst-case polynomial.
In addition, the I-CCG formalism satisfies
the ‘strong competence’ requirement of Bresnan
(1982), according to which the grammar used by
or implicit in the human sentence processor is
the competence grammar itself. In other words,
although the result of cache-ing out particularly
common lexical entries will undoubtedly be part
of a statistically optimised parser, it is not essen-
tial to the tractability of the formalism.
One obvious practical problem for which the
work reported here provides at least the germ of
a solution involves the question of how to gener-
alise CCG lexicons which have been automatically
induced from treebanks (Hockenmaier, 2003). To
take a concrete example, Cakici (2005) induces a
wide coverage CCG lexicon from a 6000 sentence
dependency treebank of Turkish. Since Turkish is
a pro-drop language, every transitive verb belongs
to both categories (S\NPsbj)\NPobj and S\NPobj.
However, data sparsity means that the automati-
cally induced lexicon assigns only a small minor-
ity of transitive verbs to both classes. One possi-
ble way of resolving this problem would involve
translating the automatically induced lexicon into
sets of fully specified I-CCG category descrip-
tions, generating an inheritance hierarchy of lex-
ical types from this lexicon (Sporleder, 2004), and
applying some more precise version of the follow-
ing heuristic: if a critical mass of words in the au-
tomatically induced lexicon belong to both CCG
categories X and Y , then in the derived I-CCG
lexicon assign all words belonging to either X or
Y to the lexical type which functions as the great-
est lower bound of X and Y in the lexical inheri-
tance hierarchy.
8 Acknowledgements
The author is indebted to the following people for
providing feedback on various drafts of this paper:
Mark Steedman, Cem Bozsahin, Jason Baldridge,
and three anonymous EACL reviewers.
References
Baldridge, J. (2002). Lexically Specified Deriva-
tional Control in Combinatory Categorial
Grammar. PhD thesis, University of Edinburgh.
Beavers, J. (2004). Type-inheritance Combina-
tory Categorial Grammar. In Proceedings of
the 20th International Conference on Compu-
tational Linguistics, University of Geneva.
Bozsahin, C. (2002). The combinatory morphemic
lexicon. Computational Linguistics, 28(2):145–
186.
Bresnan, J., editor (1982). The Mental Represen-
tation of Grammatical Relations. MIT Press,
Cambridge MA.
Cakici, R. (2005). Automatic induction of a CCG
grammar for Turkish. In Proceedings of the Stu-
dent Research Workshop, 43rd Annual Meeting
of the Association for Computational Linguis-
tics, University of Michigan, pages 73–78.
Carpenter, B. (1992). The Logic of Typed Fea-
ture Structures. Cambridge Tracts in Theoret-
ical Computer Science. Cambridge University
Press.
Copestake, A. (2002). Implementing Typed Fea-
ture Structure Grammars. CSLI Publications,
Stanford CA.
7
Erkan, G. (2003). A Type System for Combina-
tory Categorial Grammar. Master’s thesis, Mid-
dle East Technical University, Ankara.
Flickinger, D. P. (1987). Lexical Rules in the Hi-
erarchical Lexicon. PhD thesis, Stanford Uni-
versity.
Harel, D. (1984). Dynamic logic. In Gabbay, D.
and Guenthner, F., editors, Handbook of Philo-
sophical Logic, Volume 2, pages 497–604. Rei-
del, Dordrecht.
Hockenmaier, J. (2003). Data and Models for
Statistical Parsing with Combinatory Catego-
rial Grammar. PhD thesis, University of Ed-
inburgh.
Hoffman, B. (1995). The Computational Analy-
sis of the Syntax and Interpretation of ”Free”
Word Order in Turkish. PhD thesis, University
of Pennsylvania.
Lambek, J. (1958). The Mathematics of Sentence
Structure. American Mathematical Monthly,
65:154–170.
Moortgat, M. (1997). Categorial type logics. In
van Benthem, J. and ter Meulen, A., editors,
Handbook of Logic and Language, pages 93–
177. North Holland, Amsterdam, NL.
Pollard, C. J. and Sag, I. A. (1994). Head-Driven
Phrase Structure Grammar. The University of
Chicago Press.
Sporleder, C. (2004). Discovering Lexical Gener-
alisations: A Supervised Machine Learning Ap-
proach to Inheritance Hierarchy Construction.
PhD thesis, University of Edinburgh.
Steedman, M. (2000). The Syntactic Process. MIT
Press, Cambridge MA.
Uszkoreit, H. (1986). Categorial Unification
Grammars. In Proceedings of the 11th Inter-
national Conference on Computational Linguis-
tics, Bonn, pages 187–194.
Zeevat, H., Klein, E., and Calder, J. (1987). Uni-
fication Categorial Grammar. In Haddock, N.,
Klein, E., and Morrill, G., editors, Categorial
Grammar, Unification Grammar and Parsing,
Working Papers in Cognitive Science. Centre
for Cognitive Science, University of Edinburgh.
8
