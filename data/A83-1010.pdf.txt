PARSING WITH LOGICAL VARIABLES 
Timothy W. Finln and Martha Stone Palmer 
Department of Computer and Information Science 
University of Pennsylvania 
Philadelphia, PA 19104 
ABSTRACT 
Logic based programming systems have enjoyed 
an increas ing  popu lar i ty  in app l ied  AI work in the 
last few years. One of the  contributions to 
Computational Linguistics made by the Logic 
Programming Paradigm has been the Definite Clause 
Grammar. In comparing DCG's wlth previous parsing 
mechanisms such as ATN's, certain clear advantages 
are seen. We feel that the most important of these 
advantages are due to the use of Logical Variables 
with Unification as the fundamental operation on 
them. To illustrate the power of the Logical 
Variable, we have implemented an experimental ATN 
system which treats ATN registers as Logical 
Variables and provides a unification operation over 
them. We would llke to simultaneously encourage 
the use of the powerful mechanisms available in 
DCG's, and demonstrate that some of these 
techniques can be captured without reference to a 
resolution theorem prover. 
\ [ .  Introduction 
Logic based programming systems have enjoyed 
an increasing popularity in applied AI work in the 
last few years. One of the contributions to 
Computational Linguistics made by the Logic 
Programming Paradigm has been the Deflnite Clause 
Grammar. An excellent introduction to this 
formalism can be found in \[Perelra\] in which the 
authors present the formalism and make a detailed 
comparison to Augmented Transition Networks as a 
means of both specifying a language and parsing 
sentences in a language. 
We feel Chat the major strengths offered by 
the DCG formalism arise from its use of Logical 
variables with Unification as the fundamental 
operation on them. These techniques can be 
abstracted from the theorem proving paradigm and 
adapted to other parsing systems (see \[Kay\] and 
\[Bossie\] ). We have implemented an experimental ATN 
system which treats ATN registers as Logic 
variables and provides a unification operation over 
them. 
The DCG formalism provides a powerful 
mechanism for parsing based on a context free 
grammar. The grammar rule 
S -> NP VP 
can be seen as the universally quantified logical 
statement, 
For all x, y, and z : 
N'P(x) /\ VP(y) /\ Concatenate(x,y,z) -> S(z). 
where "x" and "y" represent sequences of words 
which can be concatenated together to produce a 
sentence, "S." Prolog, a progra~mulng language 
baaed on predicate calculus, allows logical 
statements to be input as Horn clauses in the 
foilowlng (reversed) form: 
s(Z) <- np(X),vp(Y),Concatenate(X,Y,Z). 
The resolution theorem prover that 
"interprets" the Prolog clauses would take the 
oegatlon of S as the goal and try and produce the 
null clause. Thus the preceding clause can be 
interpreted procedurally as, "To establish goal S, 
try and establish subgoals, NP, VP and 
Concatenate." DCG's provide syntactic sugar on top 
of Prolog so that the arrow can be reversed and the 
"Concatenate" predicate can be dispensed with. The 
words in the input string are looked at 
sequentially each time a "\[Word\]" predicate is 
executed which implicitly tests for concatenation 
(see figure \[). DCG's allow grammar rules to be 
expressed very cleanly, while still allowing 
ATN-type augmentation through the addition of 
arbitrary tests on the contents of the variables. 
Pereira and Warren argue that the DCG 
formalism is well suited for specifying a formal 
description of a language and also for use with a 
parser. In particular, they assert that it is a 
significant advance over an ATN approach on both 
philosophical and practical grounds. Their chief 
claims are that: 
\[. DCGs provide a common formalism for 
theoretlcal work in Computational Linguistics 
and for writing efficient natural language 
processors. 
62 
2. The rule based nature of a DCG result %n 
systems of greater clarity and modularity. 
3. DCG's provide greater freedom in the range of 
structures that can be built in the course of 
analyzing a constituent. \[n particular the DCG 
formalism makes it easy to create structures 
that do not follow the structure implied by 
the rules of a conscltuenc and easy Co create 
a structure for a constituent thac depends on 
items not yec encountered in the sentence. 
Fig. 1.  A DeflniCe Clauee Grammar 
s(P) -> rip(X, P l ,  P),  vp(X, P t ) .  
The flrsC two points have been discussed in 
the past whenever the ATN formalism is compared 
with a rule-based grammar (see \[PracC\] , \[Heldorn\] 
, \[Codd\] , or \[Bates\] ).  The outcome of such 
discussions vary.  I t  i s  safe Co say chat how one 
feels about these points depends quite heavily on 
past experience in using the two formalisms. 
We f ind the th i rd  po int  co be wel l  founded, 
however. Ic i s  c lear  chac the DCG d i f fe rs  moeC 
from prev ious ru le -baaed pars ing  systems in ice 
inc lus ion  of Logical  var iab les .  These resu l t  in 
g reater  f lex ib i l i ty  in bu i ld ing  s t ruc tures  co 
represent  const i tuents  that  do mot follow the 
Inherent  s t ruc ture  determined by the ru les  
themselves. They also allow one co create 
structures which refer Co Items chac have not yec 
been discovered i n  the course of analysing the 
sentence. 
We have bu i l t  an exper imenta l  ATN system which 
can c res t  ATN reg is te rs  as Logical  var iab les  and, 
we fee l ,  capture  these important s t rengths  o f fe red  
by the DCG formalism in the ocherwlse standard ATN 
formalism. 
The second sect ion  g ives  a more deta i led  
desctpCton of DCG's and presents  a s imple grammar. 
In the th i rd  sect ion  we show am ATN grammar which 
i s  "equ iva lent"  to the DCC grammar and d i scuss  the 
source of Its awkwardness. The fourth section chert 
presence an ATN formalism extended co include 
viewing ATN registers as Logical variables which 
are subject to the standard unlficacloa operaclon. 
The final section concludes this note and suggests 
that logical variables might be fruitfully 
introduced into ocher pars ing  a lgor i thms and 
systems. 
rip(X, Pl, P) -> dec(X, P2, PI, P), 
n(X, P3), 
relclauee(X, P3, P2). 
rip(X, P, P) -> name(X). 
vp(X, P) -> tranev(X,  Y, P l ) ,  np(Y, P l ,  P).  
vp(X, P) -> tncransv(X,  P). 
re lc lause(X ,  PI ,  (And PI P2)) -> \ [ chat \ ] ,  vp(X, P2). 
re lc lauae(X ,  P, P) -> \[\], 
dec(X, Pl, P2, (ForAll X (-> P! P2))) -> \[everyl. 
dec(X, P l ,  P2, (ForSome X (And Pt P2))) -> \ [a \ ] .  
n(X, (man X)) -> \[,u.\]. 
n(X, (woun X) )  -> \[wom~.\]. 
n(X, (dog X)) -> \[dog\]. 
name(John) -> \[John\] 
name(mary) -> \[mary\] 
namI( f ldo)  -> \[fido\] 
transv(X, Y, (loves X Y)) -> \[loves\]. 
transv(X, Y, (breaches X Y)) -> \[breathesl. 
Incranev(X,  ( loves  X) -> \ [ loves \ ] .  
lncransv(X,  ( l i ves  X).-> \ [ l i ves \ ] .  
incranev(X,  (b reathes  X) -> \ [b reathes \ ] .  
2. Definite Clause Grammars 
Figure \[ shows a simple DCG grammar adapted 
from \[Perelra\] . Figure 2 gives a sentence in the 
language recognized by thls grammar together wlth 
the associated surface syntactic structure and the 
semantic structure built by the grammar. 
F i  E • 2 .  A Sentence,  S t ruc ture  and Representat ion  
SENTENCE 
"John loves every woman who breathes" 
The way in which unification produces the 
appropriate bindings for this example ls actually 
quite subtle, and requires a detailed analysis of 
the parse, as represented by the refutation graph 
in Figure 3. For the the refutation graph the 
Prolog clauses have been put into claueal normal 
form. Some liberties have been taken with the 
ordering of the predicates in the interest of 
compactness. 
In trying to establish the "s(P)" goal, the 
"np(X,Pt,P)" is first attempted. The "PI" is an 
empty variable that is a "place-holder" for 
predicate information chat will come from the verb. 
It will "hold" a place in the sentence structure 
that will be provided by =he determiner. "P" is  
destined to contain the sentence structure. The 
SYNTACTIC STRUCTURE 
(S (NP (NAME john)) 
(VP (TRANSV loves) 
(NP (DET every) 
(NOUN woman) 
(REL (VP (INTRANSV breathes))))))) 
SEMANTIC REPRESENTATION 
(ForAll XI (=> (And (woman XI) (breathes XI)) 
(loves john XI))) 
63 
Pig. 3. Refutation Graph 
- . .~ /~ \ /  -np(X.Pt,e) \ /  -vp(X,et) 
"vp(X,Pt ) \ / 'np(X,P i ,P )  np(X.P,P) V - ~ , . q . . ~ ~  \ /  - \ [ john\]  
"vD(to~~.,~.~\/'transv(X,Y,Pt)\/-n ~ _ ~  
-np(Y,PL,P),/-transv(John.Y.Pl)~rnn.v(X-Y-love.(X.Y~\/-\[Loves\]~'~l\] 
) flovesl \[ 1 -det(X,F2,PL,P)\/ nD(Y loves ~ohn Y) P \ /  loveq 
ve -n(X'P3)\/relclause(X'P31P2)\/n~ 
\[~\[__sry_\]\ / -det(X,Pi ,P2t(ForalX X ( >Pl P2))) -decCY.P2.Loves(iohn.Y).P)\/ 
/ -n(Y,P3)\/-relclause(Y,P3,P2) 
(P is bound to "Forall Y(=>~ lo~s(john,Y))") 
\[ \] "\[woman\]\/-n(X,{woma~V'relclause(Y,P3,P2) 
\[woman\] "\[woman\]\/ -relclause(Y.(woman Y).P2~ -vp(X,P2)\/ -\[that\]\/ 
\ re l¢  PL .0o)). (PI is bound to "And-(woman Y) P2")//lause(x'PL'(And 
intransv(X.~eathes(X~ -Int~'~nq.(V:P2~ 
~/  (P2 is bound Co "breathes(Y)") 
64 
first "np"  clause will be matched, but it will 
eventually fall since no determiner is present. 
The second "rip" clause will'succeed, having forever 
identified the contents of  "Pl" with the contents 
of "P, " whatever they may be. Since there  is no 
determiner in the first noun phrase, there is no 
quantification information. The quantlflcatlonal 
structure must be supplied by the verb phrase, so 
the  s t ruc ture  fo r  the sentence  will be the same as 
the s t ruc ture  fo r  the  verb  phrase .  The var iab le  
"X"  w i l l  be bound to " John" .  
In  t ry ing  co es tab l i sh  "vp( John ,P l ) ,  " the  
first "wp" clause w(ll succeed, since "loves" is a 
transitive verb. It is important not  to get the 
variables confused. Within the "vp" clause our 
original "Pl" has been renamed "P" and and we have 
a new "PI" variable that will be Instantlated to 
"(loves John Y)" by the success of the "=canny" 
goal. The "Y" I s  as yet  undetermined, but  we can 
see that I t  will be supplied by the next 
"np(Y , ( loves  John ¥) ,P ) "  goa l .  I t  shows great  
fo res ight  on " t ransv 's "  par t  to pass  back a 
var iab le  in such a way that  i t  will cor respond to a 
var iab le  that  has a l ready  been named. Th is  pat tern  
i s  repeated  throughout  the  grammar, w i th  power fu l l  
repurcuss lons .  I t  i s  even c learer  In  the  success  
of the "np(Y,(loves John Y),P)" goal, where the 
presence of the determiner "every" causes "P" to be 
bound to 
(Fora l l  Y ( -> PI ( loves  John Y)) 
This "P" is of course the "P" mentioned above which 
has been waiting for the verb phrase to supply It 
with a quantlflcatlonal structure. 
As the relative clause for this "up" is 
processed, the "PI" embedded in this structure, 
(our  second new PII), is eventually bound to "(And 
(woman Y) (breaches Y))" giving us the full 
structure: 
(Forall Y (-> (And (woman Y) (breaches Y)) 
(loves John Y))) 
This is whac is returned as the binding to the 
first "Pl" in the original "vp(X,Pt)" goal. Since 
our "np(X,P\[,F)" goal identified "P" wlth "Pl, " 
our "s(P)" goal succeeds with the binding of 
(Forall Y (=> (And (woman Y) (breathes Y)) 
(loves John Y))) 
for "P" - the final structure built for the 
sentence .  
In following the execution of this grammar i t  
becomes clear that very ~trong predictions are made 
about which parrs of the parse will be supplying 
particular ~ypes of information. Determiners will 
provide the quanClElers for the propositional 
~tructure of the sentence, the flrsc noun phrase 
and the noun phrase following the verb will be the 
two participants in ~he predicate implied by the 
verb, etc. Obviously this is a simple grammar, but 
the power of the logical variables can only be made 
use of  th rough the encod ing  o f  these s t rong  
l ingu is t i c  assumpt ions .  DCG's seem to prov ide ,  a 
=echanlsm we l l  qua l i f ied  fo r  express ing  such 
assumptions and then executing them. Coming up 
with the assumptions in the first place Is, of 
course ,  someth ing  of a major  task  In i t se l f .  
3. Comparing DC and ATN Grammars 
Figure 4 shows an ATN grammar which is the 
"equivalent" of the DCG grammar given in Figure t. 
The format used to specify the grammar is the one 
described in \[flninl\] and \[finln2\] . There are 
only two minor ways that this particular formalism 
differs from the standard ATN formalism described 
in \[WoodsY0\] or \[Bates\] . First, the dollar sign 
Character (i.a. $) followed by the name of a 
register stands for the contents of that register. 
Second, the function DEFATN defines a set of arcs, 
each of which is represented by a llst whose first 
element is the name of the state and whose 
remaining elements are the arcs emanating from the 
state. 
I n  add i t ion ,  th i s  example uses a very  s imple  
lex ica l  manager in  which  a word has (1)  a set  o f  
syntact i c  ca tegor ies  to  which It belongs (2) an 
optional set of features and (3) an optional root 
form for the word. These attributes are associated 
with a word ualng the function LEX, which supplies 
appropr ia te  default values fo r  unspecified 
arguments. 
In the standard ATN model, a PUSH arc invokes 
a sub-computatlon which takes no arguments and, if 
successful, returns a single value. One can 
achieve the affect of passing parameters to a 
sub-computatlon by giving a register an initial 
value via a SENDR register setting action. There 
are two methods by which one can achieve the 
effect of returning more than one value from a 
sub-computatlon. The values to be returned can be 
packaged into a llst or the LIFTR register setting 
action can be used to directly set values in the 
higher level computation. This grammar makes use 
of SENDR and LIFTR to pass parameters into and ouC 
of ATN computations and thus the actions of the DCC 
example. 
Cons ider  what must happen when look ing  fo r  a 
noun phrase .  The representat ion  fo r  a NP w i l l  be a 
pred icate  i f  the noun phrase  i s  indef in i te  ( i .e .  "a 
man" becomes (man X)) or  a constant  I f  the noun 
phrase is a name (l.e. "John" becomes John). in 
this simple language, a NP is dominated by a either 
a sentence (if it is the subject) or by a verb 
phrase (if It ts the object). \[n either case, the 
NP also determines, or must agree with, the overall 
s t ructure  used to  represent  the dominat ing  
constituent. If the NP is a simple name, then Lt 
exerts no additional influence on the 
representation of its dominator. If the NP is noc 
a name, then It is indeflnice and will eventually 
result in a quantified expression for the 
dominating sentence or verb phrase, in this case 
we need to tell the dominating computation what the 
predicate, quantifier, connective, and variable 
name must be. In  th i s  ATN grammar, th i s  ts done b? 
hav ing  the NP network  re turn  a va lue  to  represent  
the NP predicate and llft values for the 
quantifier, connective and variable name. 
65 
Fig. 4. An Equivalaut ATN Gra~ar  
¢lOmq~ 
V 
(defatn 
(s (push npt  (setr subj *) (to s /sub J ) ) )  
(s /subJ  (push vp t ( se t r  vp *) 
(sendr  subJvar $var) (to s /end) ) )  
(s/end (pop ( l i s t  $quanc $var 
( l i s t  $connect $aubJ $vp)) $subj) 
(pop gYp (null gsubj))) 
(np (wrd a t (liftr quant "ForSome) 
(llftr connect "And)(co np/det)) 
(wrd every t (liftr quant "ForAll) 
(liftr connect "->)(to np/det)) 
(cat  name t ( se t r  vat *) (to rip/rip))) 
(np/det  (cat  n t ( sect  var (gensym)) 
( se t r  n (list * Svar)) (to np/n) ) )  
(np/n (wrd (who that which) t (to up/n/who)) 
(Jump np/np t)) 
(np/np (pop gn C ( l i f t r  var ) ) )  
(np/n/who 
(push vp t (sendr subJvar gvar) 
(serf n ( l i s t  "And gn *)) ( to np/np))) 
(vp (cat  v t ( se t rv  *) (co vp/v) ) )  
(vp/v (push np (getf trans Sv) (sect obJ *) 
(seCt objvar Svar) (to vp/vp)) 
(pop (list gv $subjvar) (gaff lntrans $v))) 
(vp/vp (pop (list gquant $objvar 
(list $connect $obJ 
(list gv $subJvar $objvar))> 
$obj) 
(pop (flat $v gsubjvar $obJvar) (null $obJ)))~ 
; (le× <word> <category> <features> <rootform>) 
(lex man n) 
(lex woman n) 
(lax loves v (intrans crans)) 
(lax breathes v (incrans trans)) 
(lax lives v (Intrans)) 
(lex john name) 
(lex mary name) 
(lex fldo name) 
66 
Similarly, when we are lookzn8 for a verb 
phrase, we must know what token (i.e. variable name 
or constant) represents the subject (if the verb 
phrase is dominated by a S) or the head noun (if 
the verb phrase acts as a relative clause). This 
is done by sanding the subJvar register in the 
sub-computation the appropriate value via the SENDR 
function. The techniques used to quancificatlon 
and build an overall sentence structure in chls ATN 
grammar are similar co those used in th~ BBN Lunar 
Grammar \[Woods72\] . 
This heavy use of SENDR and LIFTR co 
communicate between levels in the grammar makes the 
ATN grammar cumbersome and difficult to unaerstand. 
In the next secton we investigate treating ATN 
registers as logic variables and providing a 
unification operation on them. 
4. Replacing ATN Registers with ATN Variables 
Although the previous &TN grammar does the 
Job, it is clearly awkward. We can achieve much of 
the elegance of the DCG example by treating the ATN 
reg is ters  as l og ica l  var iab les  and inc lud ing  a 
unification operation on them. We will call such 
registers ATN Variables. 
Since our ATN variables must not be tampered 
with between unifications, assignment operations 
such as SETR, LIFTR and SENDR are precluded. Thus 
the only operations on ATN Registers are access and 
ualfy. I t  is possible to provide operations similar 
to the standard SENDR and LIFTR by defining 
unification operations which do the unification in 
the another environment, but we have not explored 
these possibilities. 
The scheduler component of the ATN parser has 
been modified to be sensitive to the success or 
failure of attempted unifications, if a 
unification operation on an arc fails, the arc is 
blocked and may not be taken. 
Figure 5 shows a grammar in the extended ATN 
formalism. A symbol preceded by a "$" represents 
an ATN Variable and "*" will again stand for ~he 
current constituenE. Thus in the state S in the 
grammar: 
(S (PUSH NP (UNIFY "($SUBJVAR gYP $S) *) 
(TO S/SUBJ))) 
the parser pushes to the state NP co parse a noun 
phrase. If one is found, it will pop back wi~h a 
value which will then be unified wi~h the 
expression (SSUBJVAR $VF $S). If this unification 
is successful, the parser will advance to state 
S/SUBJ. If It fails, the arc is blocked causing 
the parser to backtrack into the NP network. 
Although our grammar succeeds in mimicking the 
behavlour of the DCG, there are some open questions 
Involvlng the use of unification \[n parsing natural 
languages. An examination of ~his ATN grammar 
shows that we are really using unification as a 
method of passing parameters. The full power of 
unlficatton ls noc needed In this example since the 
Fig. 5. An Equivalent ATN Gra.mar with ATN Var iables 
NP 
. . . .  
(defatn 
(s (push np (uni fy  "($subJvar $vp es) *) 
(to s/subJ))) 
(s/subJ (push vp t (uni fy  "$vp *)  (tO s / s ) ) )  
( s / s  (pop es t ) )  
(np (wrd a t (unify 
"$np 
'(gorSome $var (And epred ehole))) 
(to np/det ) )  
(wrd every t (unify 
'Sup 
" (ForA l l  ever (=> epred Shole) ) )  
( to  np/det ) )  
(cat  name t (unify 'Sap ' $ho le)  
(unify "eYrir *) 
(tO np/np))) 
(np/det (cat n C (unify "$var (gensym)) 
(unify "$pred "(* evar)) 
( to  np /n ) ) )  
(np/n (wrd (who that  which) t (to np/ulwho)) 
(Jump rip/rip t)) 
(up/up (pop (Slat evar "$hole $np) t )) 
(np/n/who 
(push vp t (unify "$subJvar '$var) 
(unify "$pred "(And Spred *)) 
(to up/up))) 
(vp (cat v (getf trans *) 
(unify "$v "(* esubjvar $obJvar)) 
(to vp/v t rans) )  
(cat v (getf \[ntrans *) 
(unify "$v '(* $subjvar)) 
(to vp/vp) ) )  
(vp/vtrans (push np t (unify "($objvar ev $vp) *) 
(tO vp/vp)))  
(vp/vp (pop evp t ) )  
67 
grammar does not try to find "most-general 
unifiers" for complicated sets of terms. Most of 
the time it is simply using unification to bind a 
var iab le  to the contents of another variable. The 
most sophisticated use involves binding a variable 
in a term to another copy of that term which also 
has a variable to be bound as in the "a man loves a 
woman" example in Figure 6. But even this binding 
is a simple one-way application of standard 
unification. St is not clear to the authors 
whether this is due to the s imple nature of the 
grammars involved or whether it i s  an inherent  
property of the d l rectedneee of natura l  language 
pars ing .  
A situation where full unification eight be 
required would arise when one is looking for a 
constituent matching some partial description. For 
example, suppose we were working with a syntactic 
grammar and wanted to look for a singular noun 
phrase. We might do this with the following PUSH 
arc: 
(PUSH NP T (UNIFY * '(NP (DET eDET) 
(NUMBER SINGULAR) 
(ADJ $ADJS) ...)) 
If we follow the usual schedule of interpreting ATN 
gra. - - - rs  the unification will not occur until the 
NP network has found a noun phrase and popped back 
with a value. This would requi re  a fully symmetric 
unification operation since there are variables 
being bound to values in both arguments. It is also 
highly i ne f f i c ient  since we may know rlghc away 
that the noun phrase in the input is not singular. 
What we would iike is to be able to do the 
unification Just after the push is done, which 
would more closely parallel a Prolog-based DCG 
parse. Then an attempt to "unify" the number 
register with anything other than singular will 
fall immediately.  
This could be done automatically if we 
constrain a network to have only one state which 
does a pop and place some additional constraints on 
the forms that can be used as values to be popped. 
Although we have not explored this idea at any 
length, it appears to lead co some interesting 
possibilities. 
5. Conclusions 
We have found the use of log ica l  var iab les  and 
un i f i ca t ion  to be a powerful  technique in parsing 
natura l  language. I t  \[s one of the main sources of 
the strengths of the Definite Clause Grammar 
formalism. In at tempt ing to capture th is  
technique for  an ATN grammar we have come co 
several interesting conclusions, First, the 
strength of the DCG comes as much from the skillful 
encoding of linguistic assumptions about the 
eventual outcome of the parse as from the powerful 
tools it relies on. Second, the notion of logical 
variables (with unification) can be adapted to 
parsing systems ouside of the theorem proving 
paradigm. We have successfully adapted these 
techniques to an ATN parser and are beginning to 
embed them in an existing parallel bottom-up parser 
\[flnln3\] . Third, the full power of unlfication may 
not be dddessary tO suddessfully u&e ldgidal 
variables in natural lanuage parsers. 
Fig. 6. Zxatple Pa~Ses with the ATW G~am~ 
"John loves every woman who breathes" 
(ForAll XI (-> (And (woman Xl) (breathes XI)) 
(loves John Xl))) 
"John loves a woman" 
(ForSome Xl (And (woman Xl) (loves John XI))) 
"a man loves a woman" 
(ForSome XI 
(And (man X\[) 
(ForSome X2 (And (woman X2) 
(loves Xl X2)))) 
"every man who lives loves" 
(ForAll Xl (-> (And (man XI) (lives XI)) 
(loves Zi))) 
"every man who loves mary loves a woman who 
loves john" 
(ForAll Xl 
('> (And (man XI) (loves XI mary)) 
(ForSome X2 (And (And (woman X2) 
(loves X2 John)) 
(loves XI X2))))) 
"every man who loves a woman who loves every dog 
loves every dog" 
(ForAll XI 
(=> (And (man XI) 
(ForSome X2 
(And (And (woman X2) 
(ForAll X3 
(=> (dog X3) 
(loves X2 X3)))) 
(loves Xl X2)))) 
(ForAll X4 
(-> (dog X4) (loves Xl X4))))) 
6. References 
\[. Bates, M., Theory and Practice or %ugmented 
Transition Network Grammars, in Natural Language 
Communication with Computers, ~ 7 - - " ~ c ~  
Springer-Verlag, \[978. 
2. Bossle, S., "A Tactical Component for Text 
Generation: Sentence Generation Using a Functional 
Grammar", report  HS-CIS-\[982-26, Computer and 
Informatlon Science, University of Pennsylvania, 
1982. 
3. Codd, E. F., Arnold, R.S., Cad\[on, J-M., Chang, 
C. L. and Roussopoulos, N., RENDEZVOUS Version 1: 
An Experimental Engllsh-Language Query Formulation 
System for Casual Users of Relational Data Bases, 
Report RJ2144, IBM Research Laboratory, San Jose, 
January 1978 
4. Coimerauer, A., "Metamor1~hosls Grammars", in L. 
Bolt (Ed.), Natural Language Communication with 
Computers, Sprlnger-Verlas, I978. 
5. Finln, T., An Interpreter and Compiler for 
Augmented Transition Networks, Coordinated Science 
Laboratory technical report T-48, University of 
Illinois, 1977. 
6. Finln, T., Parsing with ATN Grammars; to appear 
an Leonard Bolt (ed.) Data Base question Answerin~ 
Systems, Sprlnger-Verlag, Berlin, \[982. 
7. Fin\[n, T. and B. L. Webber, BUP - A Bottom Up 
Parser, report MS-CZS-\[982-27, Computer and 
Information Science, University of Pennsylvania, 
\[982. 
8. ffeidorn, G., Augmented Phrase Structure Grammar, 
TINLAP-\[, \[975. 
9. Kay, H., "Functional Grammar", Proceedings of 
th__ee Fifth Annual Meeting of the Berkeley Lin~uistic 
Sgciety , \[979. 
\[0. Pratt, V. "LINGOL, A Progress Report", IJCAI ~, 
1975. 
I\[. ?ereira, F. and D. Warren, "Definite, Clause 
Grammars for Language Analysis - A Survey of the 
Formalism and a Comparison with Augmented 
Transition Networks"., Artificial Intelligence \[3 
( \ [980),  231-278. 
\[2. Winograd, T.,  Language as  ~ Co~nitive Proce~-,  
Addison-Wesley Publishing Co.,Inc,\[983, 349-351. 
13. Woods, W., Transition Network Grammars ~ 
Natural Language Analysis, CACM 13:10, 1970. 
14. Woods, W. A., R. M. Kaplan and B. L. Webbe 
"The Lunar 3ciences Natural Language Informatio: 
System: F~nal Report", BBN report 2378, \[972. 
68 
