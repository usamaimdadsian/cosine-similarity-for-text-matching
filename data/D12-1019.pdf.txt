Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural
Language Learning, pages 205–213, Jeju Island, Korea, 12–14 July 2012. c©2012 Association for Computational Linguistics
Spectral Dependency Parsing with Latent Variables
Paramveer S. Dhillon1, Jordan Rodu2, Michael Collins3, Dean P. Foster2
and Lyle H. Ungar1
1Computer & Information Science/ 2Statistics, University of Pennsylvania, Philadelphia, PA, U.S.A
3 Computer Science, Columbia University, New York, NY, U.S.A
{dhillon|ungar@cis.upenn.edu}, {jrodu|foster@wharton.upenn.edu}
mcollins@cs.columbia.edu
Abstract
Recently there has been substantial interest in
using spectral methods to learn generative se-
quence models like HMMs. Spectral meth-
ods are attractive as they provide globally con-
sistent estimates of the model parameters and
are very fast and scalable, unlike EM meth-
ods, which can get stuck in local minima. In
this paper, we present a novel extension of
this class of spectral methods to learn depen-
dency tree structures. We propose a simple
yet powerful latent variable generative model
for dependency parsing, and a spectral learn-
ing method to efficiently estimate it. As a pi-
lot experimental evaluation, we use the spec-
tral tree probabilities estimated by our model
to re-rank the outputs of a near state-of-the-
art parser. Our approach gives us a moderate
reduction in error of up to 4.6% over the base-
line re-ranker.
1 Introduction
Markov models have been for two decades a
workhorse of statistical pattern recognition with ap-
plications ranging from speech to vision to lan-
guage. Adding latent variables to these models gives
us additional modeling power and have shown suc-
cess in applications like POS tagging (Merialdo,
1994), speech recognition (Rabiner, 1989) and ob-
ject recognition (Quattoni et al., 2004). However,
this comes at the cost that the resulting parameter
estimation problem becomes non-convex and tech-
niques like EM (Dempster et al., 1977) which are
used to estimate the parameters can only lead to lo-
cally optimal solutions.
Recent work by Hsu et al. (2008) has shown that
globally consistent estimates of the parameters of
HMMs can be found by using spectral methods, par-
ticularly by singular value decomposition (SVD) of
appropriately defined linear systems. They avoid the
NP Hard problem of the global optimization prob-
lem of the HMM parameters (Terwijn, 2002), by
putting restrictions on the smallest singular value
of the HMM parameters. The main intuition be-
hind the model is that, although the observed data
(i.e. words) seem to live in a very high dimensional
space, but in reality they live in a very low dimen-
sional space (size k ? 30 ? 50) and an appropriate
eigen decomposition of the observed data will re-
veal the underlying low dimensional dynamics and
thereby revealing the parameters of the model. Be-
sides ducking the NP hard problem, the spectral
methods are very fast and scalable to train compared
to EM methods.
In this paper we generalize the approach of Hsu
et al. (2008) to learn dependency tree structures with
latent variables.1 Petrov et al. (2006) and Musillo
and Merlo (2008) have shown that learning PCFGs
and dependency grammars respectively with latent
variables can produce parsers with very good gen-
eralization performance. However, both these ap-
proaches rely on EM for parameter estimation and
can benefit from using spectral methods.
We propose a simple yet powerful latent vari-
able generative model for use with dependency pars-
1Actually, instead of using the model by Hsu et al. (2008)
we work with a related model proposed by Foster et al. (2012)
which addresses some of the shortcomings of the earlier model
which we detail below.
205
ing which has one hidden node for each word in
the sentence, like the one shown in Figure 1 and
work out the details for the parameter estimation
of the corresponding spectral learning model. At
a very high level, the parameter estimation of our
model involves collecting unigram, bigram and tri-
gram counts sensitive to the underlying dependency
structure of the given sentence.
Recently, Luque et al. (2012) have also proposed
a spectral method for dependency parsing, however
they deal with horizontal markovization and use hid-
den states to model sequential dependencies within a
word’s sequence of children. In contrast with that, in
this paper, we propose a spectral learning algorithm
where latent states are not restricted to HMM-like
distributions of modifier sequences for a particular
head, but instead allow information to be propagated
through the entire tree.
More recently, Cohen et al. (2012) have proposed
a spectral method for learning PCFGs.
Its worth noting that recent work by Parikh et al.
(2011) also extends Hsu et al. (2008) to latent vari-
able dependency trees like us but under the restric-
tive conditions that model parameters are trained for
a specified, albeit arbitrary, tree topology.2 In other
words, all training sentences and test sentences must
have identical tree topologies. By doing this they al-
low for node-specific model parameters, but must re-
train the model entirely when a different tree topol-
ogy is encountered. Our model on the other hand al-
lows the flexibility and efficiency of processing sen-
tences with a variety of tree topologies from a single
training run.
Most of the current state-of-the-art dependency
parsers are discriminative parsers (Koo et al., 2008;
McDonald, 2006) due to the flexibility of represen-
tations which can be used as features leading to bet-
ter accuracies and the ease of reproducibility of re-
sults. However, unlike discriminative models, gen-
erative models can exploit unlabeled data. Also, as
is common in statistical parsing, re-ranking the out-
puts of a parser leads to significant reductions in er-
ror (Collins and Koo, 2005).
Since our spectral learning algorithm uses a gen-
2This can be useful in modeling phylogeny trees for in-
stance, but precludes most NLP applications, since there is a
need to model the full set of different tree topologies possible
in parsing.
h0
h1 h2
was
Kilroy here
Figure 1: Sample dependency parsing tree for “Kilroy
was here”
erative model of words given a tree structure, it can
score a tree structure i.e. its probability of genera-
tion. Thus, it can be used to re-rank the n-best out-
puts of a given parser.
The remainder of the paper is organized as fol-
lows. In the next section we introduce the notation
and give a brief overview of the spectral algorithm
for learning HMMs (Hsu et al., 2008; Foster et al.,
2012). In Section 3 we describe our proposed model
for dependency parsing in detail and work out the
theory behind it. Section 4 provides experimental
evaluation of our model on Penn Treebank data. We
conclude with a brief summary and future avenues
for research.
2 Spectral Algorithm For Learning HMMs
In this section we describe the spectral algorithm for
learning HMMs.3
2.1 Notation
The HMM that we consider in this section is a se-
quence of hidden states h ? {1, . . . , k} that follow
the Markov property:
p(ht|h1, . . . , ht?1) = p(ht|ht?1)
and a sequence of observations x ? {1, . . . , n} such
that
p(xt|x1, . . . , xt?1, h1, . . . , ht) = p(xt|ht)
3As mentioned earlier, we use the model by Foster et al.
(2012) which is conceptually similar to the one by Hsu et al.
(2008), but does further dimensionality reduction and thus has
lower sample complexity. Also, critically, the fully reduced di-
mension model that we use generalizes much more cleanly to
trees.
206
The parameters of this HMM are:
• A vector pi of length k where pii = p(h1 = i):
The probability of the start state in the sequence
being i.
• A matrix T of size k × k where
Ti,j = p(ht+1 = i|ht = j): The probability of
transitioning to state i, given that the previous
state was j.
• A matrix O of size n× k where
Oi,j = p(x = i|h = j): The probability of
state h emitting observation x.
Define ?j to be the vector of length n with a 1 in
the jth entry and 0 everywhere else, and diag(v) to
be the matrix with the entries of v on the diagonal
and 0 everywhere else.
The joint distribution of a sequence of observa-
tions x1, . . . , xm and a sequence of hidden states
h1, . . . , hm is:
p(x1, . . . ,xm, h1, . . . , hm)
= pih1
m?1?
j=2
Thj ,hj?1
m?
j=1
Oxj ,hj
Now, we can write the marginal probability of a
sequence of observations as
p(x1, . . . xm)
=
?
h1,...,hm
p(x1, . . . , xm, h1, . . . , hm)
which can be expressed in matrix form4 as:
p(x1, . . . , xm) = 1>AxmAxm?1 · · ·Am1pi
where Axm ? Tdiag(O
>?xm), and 1 is a k-
dimensional vector with every entry equal to 1.
A is called an “observation operator”, and is ef-
fectively a third order tensor, and Axm which is a
matrix, gives the distribution vector over states at
timem+1 as a function of the state distribution vec-
tor at the current time m and the current observation
?xm . SinceAxm depends on the hidden state, it is not
observable, and hence cannot be directly estimated.
4This is essentially the matrix form of the standard dynamic
program (forward algorithm) used to estimate HMMs.
However, Hsu et al. (2008) and Foster et al. (2012)
showed that under certain conditions there exists a
fully observable representation of the observable op-
erator model.
2.2 Fully observable representation
Before presenting the model, we need to address a
few more points. First, let U be a “representation
matrix” (eigenfeature dictionary) which maps each
observation to a reduced dimension space (n ? k)
that satisfies the conditions:
• U>O is invertible
• |Uij | < 1.
Hsu et al. (2008); Foster et al. (2012) discuss U
in more detail, but U can, for example, be obtained
by the SVD of the bigram probability matrix (where
Pij = p(xt+1 = i|xt = j)) or by doing CCA on
neighboring n-grams (Dhillon et al., 2011).
Letting yi = U>?xi , we have
p(x1, . . . , xm)
= c>?C(ym)C(ym?1) . . . C(y1)c1 (1)
where
c1 = µ
c? = µ
>??1
C(y) = K(y)??1
and µ, ? and K, described in more detail below, are
quantities estimated by frequencies of unigrams, bi-
grams, and trigrams in the observed (training) data.
Under the assumption that data is generated by
an HMM, the distribution pˆ obtained by substituting
the estimated values cˆ1, cˆ?, and C?(y) into equation
(1) converges to p sufficiently fast as the amount of
training data increases, giving us consistent param-
eter estimates. For details of the convergence proof,
please see Hsu et al. (2008) and Foster et al. (2012).
3 Spectral Algorithm For Learning
Dependency Trees
In this section, we first describe a simple latent vari-
able generative model for dependency parsing. We
then define some extra notation and finally present
207
the details of the corresponding spectral learning al-
gorithm for dependency parsing, and prove that our
learning algorithm provides a consistent estimation
of the marginal probabilities.
It is worth mentioning that an alternate way of ap-
proaching the spectral estimation of latent states for
dependency parsing is by converting the dependency
trees into linear sequences from root-to-leaf and do-
ing a spectral estimation of latent states using Hsu
et al. (2008). However, this approach would not
give us the correct probability distribution over trees
as the probability calculations for different paths
through the trees are not independent. Thus, al-
though one could calculate the probability of a path
from the root to a leaf, one cannot generalize from
this probability to say anything about the neighbor-
ing nodes or words. Put another way, when a par-
ent has more than the one descendant, one has to be
careful to take into account that the hidden variables
at each child node are all conditioned on the hidden
variable of the parent.
3.1 A latent variable generative model for
dependency parsing
In the standard setting, we are given training exam-
ples where each training example consists of a se-
quence of words x1, . . . , xm together with a depen-
dency structure over those words, and we want to
estimate the probability of the observed structure.
This marginal probability estimates can then be used
to build an actual generative dependency parser or,
since the marginal probability is conditioned on the
tree structure, it can be used re-rank the outputs of a
parser.
As in the conventional HMM described in the pre-
vious section, we can define a simple latent variable
first order dependency parsing model by introduc-
ing a hidden variable hi for each word xi. The
joint probability of a sequence of observed nodes
x1, . . . , xm together with hidden nodes h1, . . . , hm
can be written as
p(x1, . . . ,xm, h1, . . . , hm)
= pih1
m?
j=2
td(j)(hj |hpa(j))
m?
j=1
o(xj |hj)
(2)
h1
h2 h3
y1
y2 y3
Figure 2: Dependency parsing tree with observed vari-
ables y1, y2, and y3.
where pa(j) is the parent of node j and d(j) ?
{L,R} indicates whether hj is a left or a right node
of hpa(j). For simplicity, the number of hidden and
observed nodes in our tree are the same, however
they are not required to be so.
As is the case with the conventional HMM, the
parameters used to calculate this joint probability
are unobservable, but it turns out that under suitable
conditions a fully observable model is also possible
for the dependency tree case with the parameteriza-
tion as described below.
3.2 Model parameters
We will define both the theoretical representations
of our observable parameters, and the sampling ver-
sions of these parameters. Note that in all the cases,
the estimated versions are unbiased estimates of the
theoretical quantities.
Define Td and T ud where d ? {L,R} to be the
hidden state transition matrices from parent to left
or right child, and from left or right child to parent
(hence the u for ‘up’), respectively. In other words
(referring to Figure 2)
TR = t(h3|h1)
TL = t(h2|h1)
T uR = t(h1|h3)
T uL = t(h1|h2)
Let Ux(i) be the i
th entry of vector U>?x andG =
U>O. Further, recall the notation diag(v), which is
a matrix with elements of v on its diagonal, then:
• Define the k-dimensional vector µ (unigram
208
counts):
µ = Gpi
[µˆ]i =
n?
u=1
c¯(u)Uu(i)
where c¯(u) = c(u)N1 , c(u) is the count of ob-
servation u in the training sample, and N1 =?
u?n c(u).
• Define the k×k matrices ?L and ?R (left child-
parent and right child-parent bigram counts):
[?ˆL]i,j =
n?
u=1
n?
v=1
c¯L(u, v)Uu(j)Uv(i)
?L = GT
u
Ldiag(pi)G
>
[?ˆR]i,j =
n?
u=1
n?
v=1
c¯R(u, v)Uu(j)Uv(i)
?R = GT
u
Rdiag(pi)G
>
where c¯L(u, v) =
cL(u,v)
N2L
, cL(u, v) is the count
of bigram (u, v) where u is the left child and
v is the parent in the training sample, and
N2L =
?
(u,v)?n×n cL(u, v). Define c¯R(u, v)
similarly.
• Define k × k × k tensor K (left child-parent-
right child trigram counts):
Kˆi,j,l =
n?
u=1
n?
v=1
n?
w=1
c¯(u, v, w)Uw(i)Uu(j)Uv(l)
K(y) = GTLdiag(G
>y)T uRdiag(pi)G
>
where c¯(w, u, v) = c(w,u,v)N3 , c(w, u, v) is
the count of bigram (w, u, v) where w is
the left child, u is the parent and v is the
right child in the training sample, and N3 =?
(w,u,v)?n×n×n c(w, u, v).
• Define k×k matrices ?L and ?R (skip-bigram
counts (left child-right child) and (right child-
left child)) 5:
[?ˆL]i,j =
n?
u=1
n?
v=1
n?
w=1
c¯(u, v, w)Uw(i)Uu(j)
?L = GTLT
u
Rdiag(pi)G
>
[?ˆR]i,j =
n?
u=1
n?
v=1
n?
w=1
c¯(u, v, w)Uw(j)Uu(i)
?R = GTRT
u
Ldiag(pi)G
>
3.3 Parameter estimation
Using the above definitions, we can estimate the pa-
rameters of the model, namely µ,?L,?R,?L,?R
andK, from the training data and define observables
useful for the dependency model as6
c1 = µ
cT? = µ
T??1R
EL = ?L?
?1
R
ER = ?R?
?1
L
D(y) = E?1L K(y)?
?1
R
As we will see, these quantities allow us to recur-
sively compute the marginal probability of the de-
pendency tree, pˆ(x1, . . . , xm), in a bottom up man-
ner by using belief propagation.
To see this, let hch(i) be the set of hidden chil-
dren of hidden node i (in Figure 2 for instance,
hch(1) = {2, 3}) and let och(i) be the set of ob-
served children of hidden node i (in the same figure
och(i) = {1}). Then compute the marginal proba-
bility p(x1, . . . , xm) from Equation 2 as
ri(h) =
?
j?hch(i)
?j(h)
?
j?och(i)
o(xj |h) (3)
where ?i(h) is defined by summing over all
the hidden random variables i.e., ?i(h) =?
h? p(h
?|h)ri(h?).
This can be written in a compact matrix form as
??ri
> = 1>
?
j?hch(i)
diag(T>dj
??rj )
·
?
j?och(i)
diag(O>?xj ) (4)
5Note than ?R = ?TL , which is not immediately obvious
from the matrix representations.
6The details of the derivation follow directly from the matrix
versions of the variables.
209
where ??ri is a vector of size k (the dimensionality of
the hidden space) of values ri(h). Note that since in
Equation 2 we condition on whether xj is the left or
right child of its parent, we have separate transition
matrices for left and right transitions from a given
hidden node dj ? {L,R}.
The recursive computation can be written in terms
of observables as:
??ri
> = c>?
?
j?hch(i)
D(E>dj
??rj )
·
?
j?och(i)
D((U>U)?1U>?xj )
The final calculation for the marginal probability
of a given sequence is
pˆ(x1, . . . , xm) =
??r1
>c1 (5)
The spectral estimation procedure is described be-
low in Algorithm 1.
Algorithm 1 Spectral dependency parsing (Comput-
ing marginal probability of a tree.)
1: Input: Training examples- x(i) for i ? {1, . . . ,M}
along with dependency structures where each se-
quence x(i) = x(i)1 , . . . , x
(i)
mi .
2: Compute the spectral parameters µˆ, ?ˆR, ?ˆL, ?ˆR,
?ˆL, and Kˆ
#Now, for a given sentence, we can recursively com-
pute the following:
3: for x(i)j for j ? {mi, . . . , 1} do
4: Compute:
??ri
> = c>?
?
j?hch(i)
D(E>dj
??rj )
·
?
j?och(i)
D((U>U)?1U>?xj )
5: end for
6: Finally compute
pˆ(x1, . . . , xmi) =
??r1
>c1
#The marginal probability of an entire tree.
3.4 Sample complexity
Our main theoretical result states that the above
scheme for spectral estimation of marginal proba-
bilities provides a guaranteed consistent estimation
scheme for the marginal probabilities:
Theorem 3.1. Let the sequence {x1, . . . , xm} be
generated by an k ? 2 state HMM. Suppose we are
given a U which has the property that U>O is in-
vertible, and |Uij | ? 1. Suppose we use equation
(5) to estimate the probability based on N indepen-
dent triples. Then
N ? Cm
k2
2
log
(
k
?
)
(6)
where Cm is specified in the appendix, implies that
1?  ?
?
?
?
?
p?(x1, . . . , xm)
p(x1, . . . , xm)
?
?
?
? ? 1 + 
holds with probability at least 1? ?.
Proof. A sketch of the proof, in the case without di-
rectional transition parameters, can be found in the
appendix. The proof with directional transition pa-
rameters is almost identical.
4 Experimental Evaluation
Since our algorithm can score any given tree struc-
ture by computing its marginal probability, a natu-
ral way to benchmark our parser is to generate n-
best dependency trees using some standard parser
and then use our algorithm to re-rank the candidate
dependency trees, e.g. using the log spectral prob-
ability as described in Algorithm 1 as a feature in a
discriminative re-ranker.
4.1 Experimental Setup
Our base parser was the discriminatively trained
MSTParser (McDonald, 2006), which implements
both first and second order parsers and is trained
using MIRA (Crammer et al., 2006) and used the
standard baseline features as described in McDon-
ald (2006).
We tested our methods on the English Penn Tree-
bank (Marcus et al., 1993). We use the standard
splits of Penn Treebank; i.e., we used sections 2-21
for training, section 22 for development and section
23 for testing. We used the PennConverter7 tool to
convert Penn Treebank from constituent to depen-
dency format. Following (McDonald, 2006; Koo
7http://nlp.cs.lth.se/software/treebank_
converter/
210
et al., 2008), we used the POS tagger by Ratnaparkhi
(1996) trained on the full training data to provide
POS tags for development and test sets and used 10-
way jackknifing to generate tags for the training set.
As is common practice we stripped our sentences of
all the punctuation. We evaluated our approach on
sentences of all lengths.
4.2 Details of spectral learning
For the spectral learning phase, we need to just col-
lect word counts from the training data as described
above, so there are no tunable parameters as such.
However, we need to have access to an attribute dic-
tionary U which contains a k dimensional represen-
tation for each word in the corpus. A possible way
of generating U as suggested by Hsu et al. (2008) is
by performing SVD on bigrams P21 and using the
left eigenvectors as U . We instead used the eigen-
feature dictionary proposed by Dhillon et al. (2011)
(LR-MVL) which is obtained by performing CCA
on neighboring words and has provably better sam-
ple complexity for rare words compared to the SVD
alternative.
We induced the LR-MVL embeddings for words
using the Reuters RCV1 corpus which contains
about 63 million tokens in 3.3 million sentences and
used their context oblivious embeddings as our esti-
mate of U . We experimented with different choices
of k (the size of the low dimensional projection)
on the development set and found k = 10 to work
reasonably well and fast. Using k = 10 we were
able to estimate our spectral learning parameters
µ,?L,R,?L,R,K from the entire training data in un-
der 2 minutes on a 64 bit Intel 2.4 Ghz processor.
4.3 Re-ranking the outputs of MST parser
We could not find any previous work which de-
scribes features for discriminative re-ranking for de-
pendency parsing, which is due to the fact that un-
like constituency parsing, the base parsers for depen-
dency parsing are discriminative (e.g. MST parser)
which obviates the need for re-ranking as one could
add a variety of features to the baseline parser itself.
However, parse re-ranking is a good testbed for our
spectral dependency parser which can score a given
tree. So, we came up with a baseline set of features
to use in an averaged perceptron re-ranker (Collins,
2002). Our baseline features comprised of two main
Method Accuracy Complete
I Order
MST Parser (No RR) 90.8 37.2
RR w. Base. Features 91.3 37.5
RR w. Base. Features +log pˆ 91.7 37.8
II Order
MST Parser (No RR) 91.8 40.6
RR w. Base. Features 92.4 41.0
RR w. Base. Features +log pˆ 92.7 41.3
Table 1: (Unlabeled) Dependency Parse re-ranking re-
sults for English test set (Section 23). Note: 1). RR =
Re-ranking 2). Accuracy is the number of words which
correctly identified their parent and Complete is the num-
ber of sentences for which the entire dependency tree was
correct. 3). Base. Features are the two re-ranking fea-
tures described in Section 4.3. 4). log pˆ is the spectral log
probability feature.
features which capture information that varies across
the different n-best parses and moreover were not
used as features by the baseline MST parser, ?POS-
left-modifier ? POS-head ? POS-right-modifier?
and ?POS-left/right-modifier ? POS-head ? POS-
grandparent?8. In addition to that we used the log of
spectral probability (pˆ(x1, . . . , xm) - as calculated
using Algorithm 1) as a feature.
We used the MST parser trained on entire training
data to generate a list of n-best parses for the devel-
opment and test sets. The n-best parses for the train-
ing set were generated by 3-fold cross validation,
where we train on 2 folds to get the parses for the
third fold. In all our experiments we used n = 50.
The results are shown in Table 1. As can be seen,
the best results give up to 4.6% reduction in error
over the re-ranker which uses just the baseline set of
features.
5 Discussion and Future Work
Spectral learning of structured latent variable mod-
els in general is a promising direction as has been
shown by the recent interest in this area. It al-
lows us to circumvent the ubiquitous problem of get-
ting stuck in local minima when estimating the la-
tent variable models via EM. In this paper we ex-
8One might be able to come up with better features for de-
pendency parse re-ranking. Our goal in this paper was just to
get a reasonable baseline.
211
tended the spectral learning ideas to learn a simple
yet powerful dependency parser. As future work, we
are working on building an end-to-end parser which
would involve coming up with a spectral version of
the inside-outside algorithm for our setting. We are
also working on extending it to learn more power-
ful grammars e.g. split head-automata grammars
(SHAG) (Eisner and Satta, 1999).
6 Conclusion
In this paper we proposed a novel spectral method
for dependency parsing. Unlike EM trained gen-
erative latent variable models, our method does not
get stuck in local optima, it gives consistent param-
eter estimates, and it is extremely fast to train. We
worked out the theory of a simple yet powerful gen-
erative model and showed how it can be learned us-
ing a spectral method. As a pilot experimental evalu-
ation we showed the efficacy of our approach by us-
ing the spectral probabilities output by our model for
re-ranking the outputs of MST parser. Our method
reduced the error of the baseline re-ranker by up to
a moderate 4.6%.
7 Appendix
This appendix offers a sketch of the proof of The-
orem 1. The proof uses the following definitions,
which are slightly modified from those of Foster
et al. (2012).
Definition 1. Define ? as the smallest element of µ,
??1, ??1, and K(). In other words,
? ?min{min
i
|µi|,min
i,j
|??1ij |,mini,j
|??1ij |,
min
i,j,k
|Kijk|,min
i,j
|?ij |,min
i,j
|?ij |, }
where Kijk = K(?j)ik are the elements of the ten-
sor K().
Definition 2. Define ?k as the smallest singular
value of ? and ?.
The proof relies on the fact that a row vector mul-
tiplied by a series of matrices, and finally multiplied
by a column vector amounts to a sum over all possi-
ble products of individual entries in the vectors and
matrices. With this in mind, if we bound the largest
relative error of any particular entry in the matrix by,
say, ?, and there are, say, s parameters (vectors and
matrices) being multiplied together, then by simple
algebra the total relative error of the sum over the
products is bounded by ?s.
The proof then follows from two basic steps.
First, one must bound the maximal relative error, ?
for any particular entry in the parameters, which can
be done using central limit-type theorems and the
quantity ? described above. Then, to calculate the
exponent s one simply counts the number of param-
eters multiplied together when calculating the prob-
ability of a particular sequence of observations.
Since each hidden node is associated with exactly
one observed node, it follows that s = 12m + 2L,
where L is the number of levels (for instance in our
example “Kilroy was here” there are two levels). s
can be easily computed for arbitrary tree topologies.
It follows from Foster et al. (2012) that we achieve
a sample complexity
N ?
128k2s2
2 ?2?4k
log
(
2k
?
)
·
?1
? ?? ?
2/s2
( s
?
1 + ? 1)2
(7)
leading to the theorem stated above.
Lastly, note that in reality one does not see ? and
?k but instead estimates of these quantities; Foster
et al. (2012) shows how to incorporate the accuracy
of the estimates into the sample complexity.
Acknowledgement: We would like to thank
Emily Pitler for valuable feedback on the paper.
References
Shay Cohen, Karl Stratos, Michael Collins, Dean
Foster, and Lyle Ungar. Spectral learning of
latent-variable pcfgs. In Association of Compu-
tational Linguistics (ACL), volume 50, 2012.
Michael Collins. Ranking algorithms for named-
entity extraction: boosting and the voted percep-
tron. In Proceedings of the 40th Annual Meet-
ing on Association for Computational Linguis-
tics, ACL ’02, pages 489–496, Stroudsburg, PA,
USA, 2002. Association for Computational Lin-
guistics. URL http://dx.doi.org/10.
3115/1073083.1073165.
Michael Collins and Terry Koo. Discriminative
reranking for natural language parsing. Comput.
212
Linguist., 31(1):25–70, March 2005. ISSN 0891-
2017.
Koby Crammer, Ofer Dekel, Joseph Keshet, Shai
Shalev-Shwartz, and Yoram Singer. Online
passive-aggressive algorithms. Journal of Ma-
chine Learning Research, 7:551–585, 2006.
A. P. Dempster, N. M. Laird, and D. B. Rubin. Max-
imum likelihood from incomplete data via the em
algorithm. JRSS, SERIES B, 39(1):1–38, 1977.
Paramveer S. Dhillon, Dean Foster, and Lyle Un-
gar. Multi-view learning of word embeddings via
cca. In Advances in Neural Information Process-
ing Systems (NIPS), volume 24, 2011.
Jason Eisner and Giorgio Satta. Efficient pars-
ing for bilexical context-free grammars and head-
automaton grammars. In Proceedings of the 37th
Annual Meeting of the Association for Computa-
tional Linguistics (ACL), pages 457–464, Univer-
sity of Maryland, June 1999. URL http://cs.
jhu.edu/˜jason/papers/#acl99.
Dean Foster, Jordan Rodu, and Lyle Ungar. Spec-
tral dimensionality reduction for HMMs. ArXiV
http://arxiv.org/abs/1203.6130, 2012.
D Hsu, S M. Kakade, and Tong Zhang. A spec-
tral algorithm for learning hidden markov models.
arXiv:0811.4413v2, 2008.
Terry Koo, Xavier Carreras, and Michael Collins.
Simple semi-supervised dependency parsing. In
In Proc. ACL/HLT, 2008.
F. Luque, A. Quattoni, B. Balle, and X. Carreras.
Spectral learning for non-deterministic depen-
dency parsing. In EACL, 2012.
Mitchell P. Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. Building a large annotated
corpus of english: the penn treebank. Comput.
Linguist., 19:313–330, June 1993. ISSN 0891-
2017.
Ryan McDonald. Discriminative learning and span-
ning tree algorithms for dependency parsing. PhD
thesis, University of Pennsylvania, Philadelphia,
PA, USA, 2006. AAI3225503.
Bernard Merialdo. Tagging english text with a prob-
abilistic model. Comput. Linguist., 20:155–171,
June 1994. ISSN 0891-2017.
Gabriele Antonio Musillo and Paola Merlo. Un-
lexicalised hidden variable models of split de-
pendency grammars. In Proceedings of the 46th
Annual Meeting of the Association for Computa-
tional Linguistics on Human Language Technolo-
gies: Short Papers, HLT-Short ’08, pages 213–
216, Stroudsburg, PA, USA, 2008. Association
for Computational Linguistics.
Ankur P. Parikh, Le Song, and Eric P. Xing. A spec-
tral algorithm for latent tree graphical models. In
ICML, pages 1065–1072, 2011.
Slav Petrov, Leon Barrett, Romain Thibaux, and
Dan Klein. Learning accurate, compact, and in-
terpretable tree annotation. In Proceedings of the
21st International Conference on Computational
Linguistics and the 44th annual meeting of the As-
sociation for Computational Linguistics, ACL-44,
pages 433–440, Stroudsburg, PA, USA, 2006. As-
sociation for Computational Linguistics.
Ariadna Quattoni, Michael Collins, and Trevor Dar-
rell. Conditional random fields for object recog-
nition. In In NIPS, pages 1097–1104. MIT Press,
2004.
Lawrence R. Rabiner. A tutorial on hidden markov
models and selected applications in speech recog-
nition. In Proceedings of the IEEE, pages 257–
286, 1989.
Adwait Ratnaparkhi. A Maximum Entropy Model
for Part-Of-Speech Tagging. In Eric Brill and
Kenneth Church, editors, Proceedings of the Em-
pirical Methods in Natural Language Processing,
pages 133–142, 1996.
Sebastiaan Terwijn. On the learnability of hidden
markov models. In Proceedings of the 6th Inter-
national Colloquium on Grammatical Inference:
Algorithms and Applications, ICGI ’02, pages
261–268, London, UK, UK, 2002. Springer-
Verlag. ISBN 3-540-44239-1.
213
