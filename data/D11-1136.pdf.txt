Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing, pages 1467–1478,
Edinburgh, Scotland, UK, July 27–31, 2011. c©2011 Association for Computational Linguistics
Closing the Loop: Fast, Interactive Semi-Supervised Annotation
With Queries on Features and Instances
Burr Settles
Machine Learning Department
Carnegie Mellon University
Pittsburgh, PA 15213 USA
bsettles@cs.cmu.edu
Abstract
This paper describes DUALIST, an active
learning annotation paradigm which solicits
and learns from labels on both features (e.g.,
words) and instances (e.g., documents). We
present a novel semi-supervised training al-
gorithm developed for this setting, which is
(1) fast enough to support real-time interac-
tive speeds, and (2) at least as accurate as pre-
existing methods for learning with mixed fea-
ture and instance labels. Human annotators in
user studies were able to produce near-state-
of-the-art classifiers—on several corpora in a
variety of application domains—with only a
few minutes of effort.
1 Introduction
In active learning, a classifier participates in its own
training process by posing queries, such as request-
ing labels for documents in a text classification task.
The goal is to maximize the accuracy of the trained
system in the most economically efficient way. This
paradigm is well-motivated for natural language ap-
plications, where unlabeled data may be readily
available (e.g., text on the Internet), but the anno-
tation process can be slow and expensive.
Nearly all previous work in active learning, how-
ever, has focused on selecting queries from the
learner’s perspective. For example, experiments are
often run in simulation rather than with user stud-
ies, and results are routinely evaluated in terms of
training set size rather than human annotation time
or labor costs (which are more reasonable measures
of labeling effort). Many state-of-the-art algorithms
are also too slow to run or too tedious to implement
to be useful for real-time interaction with human an-
notators, and few analyses have taken these factors
into account. Furthermore, there is very little work
on actively soliciting domain knowledge from hu-
mans (e.g., information about features) and incorpo-
rating this into the learning process.
While selecting good queries is clearly important,
if our goal is to reduce actual annotation effort these
human factors must be taken into account. In this
work, we propose a new interactive annotation inter-
face which addresses some of these issues; in partic-
ular it has the ability to pose queries on both features
(e.g., words) and instances (e.g., documents). We
present a novel semi-supervised learning algorithm
that is fast, flexible, and accurate enough to support
these interface design constraints interactively.
2 DUALIST: Utility for Active Learning
with Instances and Semantic Terms
Figure 1 shows a screenshot of the DUALIST an-
notation tool, which is freely available as an open-
source software project1. On the left panel, users
are presented with unlabeled documents: in this case
Usenet messages that belong to one of two sports-
related topics: baseball and hockey. Users may label
documents by clicking on the class buttons listed be-
low each text. In cases of extreme ambiguity, users
may ignore a document by clicking the “X” to re-
move it from the pool of possible queries.
On the right panel, users are given a list of fea-
ture queries organized into columns by class label.
1http://code.google.com/p/dualist/
1467
Figure 1: A screenshot of DUALIST.
The rationale for these columns is that they should
reduce cognitive load (i.e., once a user is in the base-
ball mindset, s/he can simply go down the list, label-
ing features in context: “plate,” “pitcher,” “bases,”
etc.). Within each column, words are sorted by how
informative they are the to classifier, and users may
click on words to label them. Each column also con-
tains a text box, where users may “inject” domain
knowledge by typing in arbitrary words (whether
they appear in any of the columns or not). The list
of previously labeled words appears at the bottom of
each list (highlighted), and can be unlabeled at any
time, if users later feel they made any errors.
Finally, a large submit button is located at the top
of the screen, which users must click to re-train the
classifier and receive a new set of queries. The learn-
ing algorithm is actually fast enough to do this au-
tomatically after each labeling action. However, we
found such a dynamically changing interface to be
frustrating for users (e.g., words they wanted to la-
bel would move or disappear).
2.1 A Generative Model for Learning from
Feature and Instance Labels
For the underlying model in this system, we use
multinomial na?¨ve Bayes (MNB) since it is sim-
ple, fast, and known to work well for several nat-
ural language applications—text classification in
particular—despite its simplistic and often violated
independence assumptions (McCallum and Nigam,
1998; Rennie et al., 2003).
MNB models the distribution of features as a
multinomial: documents are sequences of words,
with the “na?¨ve” assumption that words in each
position are generated independently. Each docu-
ment is treated as a mixture of classes, which have
their own multinomial distributions over words. Let
the model be parameterized by the vector ?, with
?j = P (yj) denoting the probability of class yj , and
?jk = P (fk|yj) denoting the probability of generat-
ing word fk given class yj . Note that for class pri-
ors?j ?j = 1, and for per-class word multinomials?
k ?jk = 1. The likelihood of document x being
generated by class yj is given by:
P?(x|yj) = P (|x|)
?
k
(?jk)fk(x),
where fk(x) is the frequency count of word fk in
document x. If we assume P (|x|) is distributed in-
dependently of class, and since document length |x|
is fixed, we can drop the first term for classification
purposes. Then, we can use Bayes’ rule to calculate
the posterior probability under the model of a label,
given the input document for classification:
P?(yj |x) =
P?(yj)P?(x|yj)
P?(x)
= ?j
?
k(?jk)fk(x)
Z(x) ,
(1)
where Z(x) is shorthand for a normalization con-
stant, summing over all possible class labels.
The task of training such a classifier involves es-
timating the parameters in ?, given a set of labeled
instances L = {?x(l), y(l)?}Ll=1. To do this, we use
a Dirichlet prior and take the expectation of each
parameter with respect to the posterior, which is a
simple way to estimate a multinomial (Heckerman,
1995). In other words, we count the fraction of times
the word fk occurs in the labeled set among doc-
uments of class yj , and the prior adds mjk “hallu-
cinated” occurrences for a smoothed version of the
maximum likelihood estimate:
?jk =
mjk +
?
i P (yj |x(i))fk(x(i))
Z(fk)
. (2)
Here, mjk is the prior for word fk under class yj ,
P (yj |x(i)) ? {0, 1} indicates the true labeling of the
ith document in the training set, and Z(fk) is a nor-
malization constant summing over all words in the
vocabulary. Typically, a uniform prior is used, such
as the Laplacian (a value of 1 for all mjk). Class pa-
rameters ?j are estimated a similar way, by counting
1468
the fraction of documents that are labeled with that
class, subject to a prior mj . This prior is important
in the event that no documents are yet labeled with
yj , which can be quite common early on in the active
learning process.
Recall that our scenario lets human annotators
provide not only document labels, but feature labels
as well. To make use of this additional information,
we assume that labeling the word fk with a class yj
increases the probability P (fk|yj) of the word ap-
pearing in documents of that class. The natural in-
terpretation of this under our model is to increase the
prior mjk for the corresponding multinomial. To do
this we introduce a new parameter ?, and define the
elements of the Dirichlet prior as follows:
mjk =
{
1 + ? if fk is labeled with yj ,
1 otherwise.
This approach is extremely flexible, and offers three
particular advantages over the previous “pooling
multinomials” approach for incorporating feature la-
bels into MNB (Melville et al., 2009). The pooling
multinomials algorithm averages together two sets
of ?jk parameters: one that is estimated from labeled
data, and another derived from feature labels under
the assumption of a boolean output variable (treating
labeled features are “polarizing” factors). Therefore,
pooling multinomials can only be applied to binary
classification tasks, while our method works equally
well for problems with multiple classes. The second
advantage is that feature labels need not be mutu-
ally exclusive, so the word “score” could be labeled
with both baseball and hockey, if necessary (e.g.,
if the task also includes several non-sports labels).
Finally, our framework allows users to conceivably
provide feature-specific priors ?jk to, for example,
imply that the word “inning” is a stronger indicator
for baseball than the word “score” (which is a more
general sports term). However, we leave this aspect
for future work and employ the fixed-? approach as
described above in this study.
2.2 Exploiting Unlabeled Data
In addition to document and feature labels, we usu-
ally have access to a large unlabeled corpus. In fact,
these texts form the pool of possible instance queries
in active learning. We can take advantage of this ad-
ditional data in generative models like MNB by em-
ploying the Expectation-Maximization (EM) algo-
rithm. Combining EM with pool-based active learn-
ing was previously studied in the context of instance
labeling (McCallum and Nigam, 1998), and we ex-
tend the method to our interactive scenario, which
supports feature labeling as well.
First, we estimate initial parameters ?? as in Sec-
tion 2.1, but using only the priors (and no instances).
Then, we apply the induced classifier on the unla-
beled pool U = {x(u)}Uu=1 (Eq. 1). This is the “E”
step of EM. Next we re-estimate feature multino-
mials ?jk, using both labeled instances from L and
probabilistically-labeled instances from U (Eq. 2).
In other words, P (yj |x) ? {0, 1} for x ? L, and
P (yj |x) = P??(yj |x) for x ? U . We also weight
the data in U by a factor of 0.1, so as not to over-
whelm the training signal coming from true instance
labels in L. Class parameters ?j are re-estimated in
the analogous fashion. This is the “M” step.
For speed and interactivity, we actually stop train-
ing after this first iteration. When feature labels are
available, we found that EM generally converges in
four to 10 iterations, requiring more training time
but rarely improving accuracy (the largest gains con-
sistently come in the first iteration). Also, we ignore
labeled data in the initial estimation of ?? because L
is too small early in active learning to yield good re-
sults with EM. Perhaps this can be improved by us-
ing an ensemble (McCallum and Nigam, 1998), but
that comes at further computational expense. Fea-
ture labels, on the other hand, seem generally more
reliable for probabilistically labeling U .
2.3 Selecting Instance and Feature Queries
The final algorithmic component to our system is
the selection of informative queries (i.e., unlabeled
words and documents) to present to the annotator.
Querying instances is the traditional mode of ac-
tive learning, and is well-studied in the literature;
see Settles (2009) for a review. In this work we use
entropy-based uncertainty sampling, which ranks all
instances in U by the posterior class entropy under
the modelH?(Y |x) = ??j P?(yj |x) logP?(yj |x),
and asks the user to label the top D unlabeled doc-
uments. This simple heuristic is an approximation
to querying the instance with the maximum infor-
mation gain (since the class entropy, once labeled,
is zero), under the assumption that each x is repre-
1469
sentative of the underlying natural data distribution.
Moreover, it is extremely fast to compute, which is
important for our interactive environment.
Querying features, though, is a newer idea with
significantly less research behind it. Previous work
has either assumed that (1) features are not assigned
to classes, but instead flagged for “relevance” to the
task (Godbole et al., 2004; Raghavan et al., 2006),
or (2) feature queries are posed just like instance
queries: a word is presented to the annotator, who
must choose among the labels (Druck et al., 2009;
Attenberg et al., 2010). Recall from Figure 1 that
we want to organize feature queries into columns by
class label. This means our active learner must pro-
duce queries that are class-specific.
To select these feature queries, we first rank ele-
ments in the vocabulary by information gain (IG):
IG(fk) =
?
Ik
?
j
P (Ik, yj) log
P (Ik, yj)
P (Ik)P (yj)
,
where Ik ? {0, 1} is a variable indicating the pres-
ence or absence of a feature. This is essentially
the common feature-selection method for identify-
ing the most salient features in text classification
(Sebastiani, 2002). However, we use both L and
probabilistically-labeled instances from U to com-
pute IG(fk), to better reflect what the model be-
lieves it has learned. To organize queries into
classes, we take the top V unlabeled features and
pose fk for the class yj with which it occurs most
frequently, as well as any other class with which it
occurs at least 75% as often. Intuitively, this ap-
proach (1) queries features that the model believes
are most informative, and (2) automatically identi-
fies classes that seem most correlated. To our knowl-
edge, DUALIST is the first active learning environ-
ment with both of these properties.
3 Experiments
We conduct four sets of experiments to evaluate our
approach. The first two are “offline” experiments,
designed to better understand (1) how our training
algorithm compares to existing methods for feature-
label learning, and (2) the effects of tuning the ?
parameter. The other experiments are user studies
designed to empirically gauge how well human an-
notators make use of DUALIST in practice.
We use a variety of benchmark corpora in the fol-
lowing evaluations. Reuters (Rose et al., 2002) is
a collection of news articles organized into topics,
such as acquisitions, corn, earnings, etc. As in pre-
vious work (Raghavan et al., 2006) we use the 10
most frequent topics, but further process the cor-
pus by removing ambiguous documents (i.e., that
belong to multiple topics) so that all articles have
a unique label, resulting in a corpus of 9,002 arti-
cles. WebKB (Craven et al., 1998) consists of 4,199
university web pages of four types: course, faculty,
project, and student. 20 Newsgroups (Lang, 1995)
is a set of 18,828 Usenet messages from 20 different
online discussion groups. For certain experiments
(such as the one shown in Figure 1), we also use
topical subsets. Movie Reviews (Pang et al., 2002)
is a set of 2,000 online movie reviews categorized as
positive or negative in sentiment. All data sets were
processed using lowercased unigram features, with
punctuation and common stop-words removed.
3.1 Comparison of Learning Algorithms
An important question is how well our learning al-
gorithm, “MNB/Priors,” performs relative to exist-
ing baseline methods for learning with labeled fea-
tures. We compare against two such approaches
from the literature. “MaxEnt/GE” is a maximum en-
tropy classifier trained using generalized expectation
(GE) criteria (Druck et al., 2008), which are con-
straints used in training discriminative linear mod-
els. For labeled features, these take the form of ex-
pected “reference distributions” conditioned on the
presence of the feature (e.g., 95% of documents con-
taining the word “inning” should be labeled base-
ball). For each constraint, a term is added to the
objective function to encourage parameter settings
that yield predictions conforming to the reference
distribution on unlabeled instances. “MNB/Pool” is
na?¨ve Bayes trained using the pooling multinomials
approach (Melville et al., 2009) mentioned in Sec-
tion 2.1. We also expand upon MNB/Pool using an
EM variant to make it semi-supervised.
We use the implementation of GE training from
the open-source MALLET toolkit2, and implement
both MNB variants in the same data-processing
pipeline. Because the GE implementation available
2http://mallet.cs.umass.edu
1470
Corpus MaxEnt/GE MNB/Pool Pool+EM1 MNB/Priors Priors+EM1
Reuters 82.8 (22.9) – – – – 83.7 (?0.1) 86.6 (0.3)
WebKB 22.2 (4.9) – – – – 67.5 (?0.1) 67.8 (0.1)
20 Newsgroups 49.7 (326.6) – – – – 50.1 (0.2) 70.7 (6.9)
Science 86.9 (5.7) – – – – 71.4 (?0.1) 92.8 (0.1)
Autos/Motorcycles 90.8 (0.8) 90.1 (?0.1) 97.5 (?0.1) 89.9 (?0.1) 97.6 (?0.1)
Baseball/Hockey 49.9 (0.8) 90.7 (?0.1) 96.7 (?0.1) 90.5 (?0.1) 96.9 (?0.1)
Mac/PC 50.5 (0.6) 86.7 (?0.1) 91.2 (?0.1) 86.6 (?0.1) 90.2 (?0.1)
Movie Reviews 68.8 (1.8) 68.0 (?0.1) 73.4 (0.1) 67.7 (?0.1) 72.0 (0.1)
Table 1: Accuracies and training times for different feature-label learning algorithms on benchmark corpora. Classi-
fication accuracy is reported for each model, using only the top 10 oracle-ranked features per label (and no labeled
instances) for training. The best model for each corpus is highlighted in bold. Training time (in seconds) is shown in
parentheses on the right side of each column. All results are averaged across 10 folds using cross-validation.
to us only supports labeled features (and not labeled
instances as well), we limit the MNB methods to
features for a fair comparison. To obtain feature la-
bels in this experiment, we simulate a “feature or-
acle” as in previous work (Druck et al., 2008; At-
tenberg et al., 2010), which is essentially the query
selection algorithm from Section 2.3, but using com-
plete labeled data to compute IG(fk). We con-
servatively use only the top 10 features per class,
which is meant to resemble a handful of very salient
features that a human might brainstorm to jump-
start the learning process. We experiment with
EM1 (one-step EM) variants of both MNB/Pool
and MNB/Priors, and set ? = 50 for the latter
(see Section 3.2 for details on tuning this parame-
ter). Results are averaged over 10 folds using cross-
validation, and all experiments are conducted on a
single 2.53GHz processor machine.
Results are shown in Table 1. As expected, adding
one iteration of EM for semi-supervised training im-
proves the accuracy of both MNB methods across all
data sets. These improvements come without signif-
icant overhead in terms of time: training still rou-
tinely finishes in a fraction of a second per fold.
MNB/Pool and MNB/Priors, where they can be
compared, perform virtually the same as each other
with or without EM, in terms of accuracy and speed
alike. However, MNB/Pool is only applicable to bi-
nary classification problems. As explained in Sec-
tion 2.1, MNB/Priors is more flexible, and prefer-
able for a more general-use interactive annotation
tool like DUALIST.
The semi-supervised MNB methods are also con-
sistently more accurate than GE training—and are
about 40 times faster as well. The gains of
Priors+EM1 over MaxEnt/GE are statistically sig-
nificant in all cases but two: Autos/Motorcycles and
Movie Reviews3. MNB is superior when using any-
where from five to 20 oracle-ranked features per
class, but as the number of feature labels increases
beyond 30, GE is often more accurate (results not
shown). If we think of MaxEnt/GE as a discrim-
inative analog of MNB/Priors+EM, this is consis-
tent with what is known about labeled set size in su-
pervised learning for generative/discriminative pairs
(Ng and Jordan, 2002). However, the time complex-
ity of GE training increases sharply with each new
labeled feature, since it adds a new constraint to the
objective function whose gradient must be computed
using all the unlabeled data. In short, GE train-
ing is too slow and too inaccurate early in the ac-
tive learning process (where labels are more scarce)
to be appropriate for our scenario. Thus, we select
MNB/Priors to power the DUALIST interface.
3.2 Tuning the Parameter ?
A second question is how sensitive the accuracy of
MNB/Priors is to the parameter ?. To study this,
we ran experiments varying ? from from one to 212,
using different combinations of labeled instances
and/or features (again using the simulated oracle and
10-fold cross-validation).
3Paired 2-tailed t-test, p < 0.05, correcting for multiple tests
using the Bonferroni method.
1471
 0.72
 0.74
 0.76
 0.78
 0.8
 0.82
 0.84
 0.86
 0.88
 0.9
 1  10  100  1000
10 feat10 feat, 100 inst100 feat100 feat, 100 inst
 0.62
 0.64
 0.66
 0.68
 0.7
 0.72
 0.74
 1  10  100  1000
10 feat10 feat, 100 inst100 feat100 feat, 100 inst
 0.9
 0.91
 0.92
 0.93
 0.94
 0.95
 0.96
 1  10  100  1000
10 feat10 feat, 100 inst100 feat100 feat, 100 inst
 0.62
 0.64
 0.66
 0.68
 0.7
 0.72
 0.74
 0.76
 0.78
 0.8
 1  10  100  1000
10 feat10 feat, 100 inst100 feat100 feat, 100 inst
alpha alpha
Reuters WebKB
Science Movie Reviews
Figure 2: The effects of varying ? on accuracy for four
corpora, using differing amounts of training data (labeled
features and/or instances). For clarity, vertical axes are
scaled differently for each data set, and horizontal axes
are plotted on a logarithmic scale. Classifier performance
remains generally stable across data sets for ? < 100.
Figure 2 plots these results for four of the corpora.
The first thing to note is that in all cases, accuracy is
relatively stable for ? < 100, so tuning this value
seems not to be a significant concern; we chose 50
for all other experiments in this paper. A second ob-
servation is that, for all but the Reuters corpus, label-
ing 90 additional features improves accuracy much
more than labeling 100 documents. This is encour-
aging, since labeling features (e.g., words) is known
to be generally faster and easier for humans than la-
beling entire instances (e.g., documents).
For Reuters, however, the additional feature la-
bels appear harmful. The anomaly can be explained
in part by previous work with this corpus, which
found that a few expertly-chosen keywords can
outperform machine learning methods (Cohen and
Singer, 1996), or that aggressive feature selection—
i.e., using only three or four features per class—
helps tremendously (Moulinier, 1996). Corpora like
Reuters may naturally lend themselves to feature se-
lection, which is (in some sense) what happens when
labeling features. The simulated oracle here was
forced to label 100 features, some with very low
information gain (e.g., “south” for acquisitions, or
“proven” for gold); we would not expect humans an-
notators to provide such misleading information. In-
stead, we hypothesize that in practice there may be a
limited set of features with high enough information
content for humans to feel confident labeling, after
which they switch their attention to labeling instance
queries instead. This further indicates that the user-
guided flexibility of annotation in DUALIST is an
appropriate design choice.
3.3 User Experiments
To evaluate our system in practice, we conducted
a series of user experiments. This is in contrast to
most previous work, which simulates active learning
by using known document labels and feature labels
from a simulated oracle (which can be flawed, as we
saw in the previous section). We argue that this is an
important contribution, as it gives us a better sense
of how well the approach actually works in practice.
It also allows us to analyze behavioral results, which
in turn may help inform future protocols for human
interaction in active learning.
DUALIST is implemented as a web-based appli-
cation in Java and was deployed online. We used
three different configurations: active dual (as in Fig-
ure 1, implementing everything from Section 2), ac-
tive instance (instance queries only, no features), and
a passive instance baseline (instances only, but se-
lected at random). We also began by randomly se-
lecting instances in the active configurations, until
every class has at least one labeled instance or one
labeled feature. D = 2 documents and V = 100 fea-
tures were selected for each round of active learning.
We recruited five members of our research group
to label three data sets using each configuration, in
an order of their choosing. Users were first allowed
to spend a minute or two familiarizing themselves
with DUALIST, but received no training regarding
the interface or data sets. All experiments used a
fixed 90% train, 10% test split which was consistent
across all users, and annotators were not allowed to
see the accuracy of the classifier they were train-
ing at any time. Each annotation action was times-
tamped and logged for analysis, and each experi-
ment automatically terminated after six minutes.
Figure 3 shows learning curves, in terms of accu-
racy vs. annotation time, for each trial in the user
study. The first thing to note is that the active
1472
WebKB Science Movie Reviews
annotation time (sec) annotation time (sec) annotation time (sec)
us
er
 
1
us
er
 
2
us
er
 
3
us
er
 
4
us
er
 
5
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0
 0.1
 0.2
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0
 0.2
 0.4
 0.6
 0.8
 1
 0  60  120  180  240  300  360
active dual
active inst
passive inst
 0.3
 0.4
 0.5
 0.6
 0.7
 0.8
 0.9
 0  60  120  180  240  300  360
active dual
active inst
passive inst
Figure 3: User experiments involving human annotators for text classification. Each row plots accuracy vs. time
learning curves for a particular user (under all three experimental conditions) for each of the three corpora (one
column per data set). For clarity, vertical axes are scaled differently for each corpus, but held constant across all users.
The thin dashed lines at the top of each plot represents the idealized fully-supervised accuracy. Horizontal axes show
labeling cost in terms of actual elapsed annotation time (in seconds).
1473
dual configuration yields consistently better learn-
ing curves than either active or passive learning with
instances alone, often getting within 90% of fully-
supervised accuracy (in under six minutes). The
only two exceptions make interesting (and differ-
ent) case studies. User 4 only provided four la-
beled features in the Movie Review corpus, which
partially explains the similarity in performance to
the instance-only cases. Moreover, these were
manually-added features, i.e., he never answered
any of the classifier’s feature queries, thus depriving
the learner of the information it requested. User 5,
on the other hand, never manually added features
and only answered queries. With the WebKB cor-
pus, however, he apparently found feature queries
for the course label to be easier than the other
classes, and 71% of all his feature labels came
from that class (sometimes noisily, e.g., “instructor”
might also indicate faculty pages). This imbalance
ultimately biased the learner toward the course la-
bel, which led to classification errors. These patho-
logical cases represent potential pitfalls that could
be alleviated with additional user studies and train-
ing. However, we note that the active dual interface
is not particularly worse in these cases, it is simply
not significantly better, as in the other 13 trials.
Feature queries were less costly than instances,
which is consistent with findings in previous work
(Raghavan et al., 2006; Druck et al., 2009). The
least expensive actions in these experiments were
labeling (mean 3.2 seconds) and unlabeling (1.8s)
features, while manually adding new features took
only slightly longer (5.9s). The most expensive ac-
tions were labeling (10.8s) and ignoring (9.9s) in-
stance queries. Interestingly, we observed that the
human annotators spent most of the first three min-
utes performing feature-labeling actions ( ), and
switched to more instance-labeling activity for the
final three minutes ( ). As hypothesized in Sec-
tion 3.2, it seems that the active learner is exhausting
the most salient feature queries early on, and users
begin to focus on more interpretable instance queries
over time. However, more study (and longer annota-
tion periods) are warranted to better understand this
phenomenon, which may suggest additional user in-
terface design improvements.
We also saw surprising trends in annotation qual-
ity. In active settings, users made an average of one
instance-labeling error per trial (relative to the gold-
standard labels), but in the passive case this rose to
1.6, suggesting they are more accurate on the active
queries. However, they also explicitly ignored more
instances in the active dual condition (7.7) than ei-
ther active instance (5.9) or passive (2.5), indicating
that they find these queries more ambiguous. This
seems reasonable, since these are the instances the
classifier is least certain about. But if we look at
the time users spent on these actions, they are much
faster to label/ignore (9.7s/7.5s) in the active dual
scenario than in the active instance (10.0s/10.7s) or
passive (12.3s/15.4s) cases, which means they are
being more efficient. The differences in time be-
tween dual and passive are statistically significant4.
3.4 Additional Use Cases
Here we discuss the application of DUALIST to a
few other natural language processing tasks. This
section is not meant to show its superiority relative
to other methods, but rather to demonstrate the flex-
ibility and potential of our approach in a variety of
problems in human language technology.
3.4.1 Word Sense Disambiguation
Word Sense Disambiguation (WSD) is the prob-
lem of determining which meaning of a word is be-
ing used in a particular context (e.g., “hard” in the
sense of a challenging task vs. a marble floor). We
asked a user to employ DUALIST for 10 minutes
for each of three benchmark WSD corpora (Moham-
mad and Pedersen, 2004): Hard (3 senses), Line
(6 senses), and Serve (4 senses). Each instance rep-
resents a sentence using the ambiguous word, and
features are lowercased unigram and bigram terms
from the surrounding context in the sentence. The
learned models’ prediction accuracies (on the sen-
tences not labeled by the user) were: 83.0%, 78.4%,
and 78.7% for Hard, Line, and Serve (respectively),
which appears to be comparable to recent supervised
learning results in the WSD literature on these data
sets. However, our results were achieved in less than
10 minutes of effort each, by labeling an average of
76 sentences and 32 words or phrases per task (com-
pared to the thousands of labeled training sentences
used in previous work).
4Kolmogorov-Smirnov test, p < 0.01.
1474
3.4.2 Information Extraction
DUALIST is also well-suited to a kind of large-
scale information extraction known as semantic
class learning: given a set of semantic categories
and a very large unlabeled text corpus, learn to pop-
ulate a knowledge base with words or phrases that
belong to each class (Riloff and Jones, 1999; Carl-
son et al., 2010). For this task, we first processed
500 million English Web pages from the ClueWeb09
corpus (Callan and Hoy, 2009) by using a shallow
parser. Then we represented noun phrases (e.g., “Al
Gore,” “World Trade Organization,” “upholstery”)
as instances, using a vector of their co-occurrences
with heuristic contextual patterns (e.g., “visit to X”
or “X’s mission”) as well as a few orthographic pat-
terns (e.g., capitalization, head nouns, affixes) as
features. We filtered out instances or contexts that
occurred fewer than 200 times in the corpus, result-
ing in 49,923 noun phrases and 87,760 features.
We then had a user annotate phrases and patterns
into five semantic classes using DUALIST: person,
location, organization, date/time, and other (the
background or null class). The user began by insert-
ing simple hyponym patterns (Hearst, 1992) for their
corresponding classes (e.g., “people such as X” for
person, or “organizations like X” for organization)
and proceeded from there for 20 minutes. Since
there was no gold-standard for evaluation, we ran-
domly sampled 300 predicted extractions for each
of the four non-null classes, and hired human eval-
uators using the Amazon Mechanical Turk service5
to estimate precision. Each instance was assigned
to three evaluators, using majority vote to score for
correctness.
Table 2 shows the estimated precision, total ex-
tracted instances, and the number of user-labeled
features and instances for each class. While there
is room for improvement (published results for this
kind of task are often above 80% precision), it is
worth noting that in this experiment the user did not
provide any initial “seed examples” for each class,
which is fairly common in semantic class learning.
In practice, such additional seeding should help, as
the active learner acquired 115 labeled instances for
the null class, but fewer than a dozen for each non-
null class (in the first 20 minutes).
5http://www.mturk.com
Class Prec. # Ext. # Feat. # Inst.
person 74.7 6,478 37 6
location 76.3 5,307 47 5
organization 59.7 4,613 51 7
date/time 85.7 494 51 12
other – 32,882 13 115
Table 2: Summary of results using DUALIST for web-
scale information extraction.
3.4.3 Twitter Filtering and Sentiment Analysis
There is growing interest in language analysis
for online social media services such as Twitter6
(Petrovic´ et al., 2010; Ritter et al., 2010), which al-
lows users to broadcast short messages limited to
140 characters. Two basic but interesting tasks in
this domain are (1) language filtering and (2) sen-
timent classification, both of which are difficult be-
cause of the extreme brevity and informal use of lan-
guage in the messages.
Even though Twitter attempts to provide language
metadata for its “tweets,” English is the default set-
ting for most users, so about 35% of English-tagged
tweets are actually in a different language. Further-
more, the length constraints encourage acronyms,
emphatic misspellings, and orthographic shortcuts
even among English-speaking users, so many tweets
in English actually contain no proper English words
(e.g., “OMG ur sooo gr8!! #luvya”). This may
render existing lexicon-based language filters—and
possibly character n-gram filters—ineffective.
To quickly build an English-language filter for
Twitter, we sampled 150,000 tweets from the Twit-
ter Streaming API and asked an annotator spend 10
minutes with DUALIST labeling English and non-
English messages and features. Features were rep-
resented as unigrams and bigrams without any stop-
word filtering, plus a few Twitter-specific features
such as emoticons (text-based representations of fa-
cial expressions such as :) or :( used to convey feel-
ing or tone), the presence of anonymized usernames
(preceded by ‘@’) or URL links, and hashtags (com-
pound words preceded by ‘#’ and used to label mes-
sages, e.g., “#loveit”). Following the same method-
ology as Section 3.4.2, we evaluated 300 random
predictions using the Mechanical Turk service. The
6http://twitter.com
1475
estimated accuracy of the trained language filter was
85.2% (inter-annotator agreement among the evalu-
ators was 94.3%).
We then took the 97,813 tweets predicted to be in
English and used them as the corpus for a sentiment
classifier, which attempts to predict the mood con-
veyed by the author of a piece of text (Liu, 2010).
Using the same feature representation as the lan-
guage filter, the annotator spent 20 minutes with
DUALIST, labeling tweets and features into three
mood classes: positive, negative, and neutral. The
annotator began by labeling emoticons, by which
the active learner was able to uncover some interest-
ing domain-specific salient terms, e.g., “cant wait”
and “#win” for positive tweets or “#tiredofthat” for
negative tweets. Using a 300-instance Mechanical
Turk evaluation, the estimated accuracy of the sen-
timent classifier was 65.9% (inter-annotator agree-
ment among the evaluators was 77.4%).
4 Discussion and Future Work
We have presented DUALIST, a new type of dual-
strategy annotation interface for semi-supervised ac-
tive learning. To support this dual-query interface,
we developed a novel, fast, and practical semi-
supervised learning algorithm, and demonstrated
how users can employ it to rapidly develop use-
ful natural language systems for a variety of tasks.
For several of these applications, the interactively-
trained systems are able to achieve 90% of state-
of-the-art performance after only a few minutes of
labeling effort on the part of a human annotator.
By releasing DUALIST as an open-source tool, we
hope to facilitate language annotation projects and
encourage more user experiments in active learning.
This represents one of the first studies of an ac-
tive learning system designed to compliment the
strengths of both learner and annotator. Future di-
rections along these lines include user studies of effi-
cient annotation behaviors, which in turn might lead
to new types of queries or improvements to the user
interface design. An obvious extension in the natural
language domain is to go beyond classification tasks
and query domain knowledge for structured predic-
tion in this way. Another interesting potential appli-
cation is human-driven active feature induction and
engineering, after Della Pietra et al. (1997).
From a machine learning perspective, there is an
open empirical question of how useful the labels
gathered by DUALIST’s internal na?¨ve Bayes model
might be in later training machine learning systems
with different inductive biases (e.g., MaxEnt models
or decision trees), since the data are not IID. So far,
attempts to “reuse” active learning data have yielded
mixed results (Lewis and Catlett, 1994; Baldridge
and Osborne, 2004). Practically speaking, DUAL-
IST is designed to run on a single machine, and
supports a few hundred thousand instances and fea-
tures at interactive speeds on modern hardware. Dis-
tributed data storage (Chang et al., 2008) and paral-
lelized learning algorithms (Chu et al., 2007) may
help scale this approach into the millions.
Finally, modifying the learning algorithm to better
cope with violated independence assumptions may
be necessary for interesting language applications
beyond those presented here. TAN-Trees (Fried-
man et al., 1997), for example, might be able to ac-
complish this while retaining speed and interactiv-
ity. Alternatively, one could imagine online stochas-
tic learning algorithms for discriminatively-trained
classifiers, which are semi-supervised and can ex-
ploit feature labels. To our knowledge, such flexi-
ble and efficient learning algorithms do not currently
exist, but they could be easily incorporated into the
DUALIST framework in the future.
Acknowledgments
Thanks to members of Carnegie Mellon’s “Read the
Web” research project for helpful discussions and
participation in the user studies. This work is sup-
ported in part by DARPA (under contracts FA8750-
08-1-0009 and AF8750-09-C-0179), the National
Science Foundation (IIS-0968487), and Google.
References
J. Attenberg, P. Melville, and F. Provost. 2010. A uni-
fied approach to active dual supervision for labeling
features and examples. In Proceedings of the Euro-
pean Conference on Machine Learning and Principles
and Practice of Knowledge Discovery in Databases
(ECML PKDD). Springer.
J. Baldridge and M. Osborne. 2004. Active learning and
the total cost of annotation. In Proceedings of the Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP), pages 9–16. ACL Press.
1476
J. Callan and M. Hoy. 2009. The clueweb09 dataset.
http://lemurproject.org/clueweb09/.
A. Carlson, J. Betteridge, B. Kisiel, B. Settles, E.R. Hr-
uschka Jr., and T.M. Mitchell. 2010. Toward an ar-
chitecture for never-ending language learning. In Pro-
ceedings of the Conference on Artificial Intelligence
(AAAI), pages 1306–1313. AAAI Press.
F. Chang, J. Dean, S. Ghemawat, W.C. Hsieh, D.A. Wal-
lach, M. Burrows, T. Chandra, A. Fikes, and R.E. Gru-
ber. 2008. Bigtable: A distributed storage system for
structured data. ACM Transactions on Computer Sys-
tems, 26(2):1–26.
C.T. Chu, S.K. Kim, Y.A. Lin, Y. Yu, G. Bradski, A.Y.
Ng, and K. Olukotun. 2007. Map-reduce for machine
learning on multicore. In B. Scho¨lkopf, J. Platt, and
T. Hoffman, editors, Advances in Neural Information
Processing Systems, volume 19, pages 281–288. MIT
Press.
W. Cohen and Y. Singer. 1996. Context-sensitive learn-
ing methods for text categorization. In Proceedings of
the ACM SIGIR Conference on Research and Develop-
ment in Information Retrieval, pages 307–315. ACM
Press.
M. Craven, D. DiPasquo, D. Freitag, A. McCallum,
T. Mitchell, K. Nigam, and S. Slattery. 1998. Learn-
ing to extract symbolic knowledge from the world
wide web. In Proceedings of the National Confer-
ence on Artificial Intelligence (AAAI), pages 509–516.
AAAI Press.
S. Della Pietra, V. Della Pietra, and J. Lafferty. 1997.
Inducing features of random fields. IEEE Transac-
tions on Pattern Analysis and Machine Intelligence,
19(4):380–393.
G. Druck, G. Mann, and A. McCallum. 2008. Learn-
ing from labeled features using generalized expecta-
tion criteria. In Proceedings of the ACM SIGIR Con-
ference on Research and Development in Information
Retrieval, pages 595–602. ACM Press.
G. Druck, B. Settles, and A. McCallum. 2009. Ac-
tive learning by labeling features. In Proceedings of
the Conference on Empirical Methods in Natural Lan-
guage Processing (EMNLP), pages 81–90. ACL Press.
N. Friedman, D. Geiger, and M. Goldszmidt. 1997.
Bayesian network classifiers. Machine learning,
29(2):131–163.
S. Godbole, A. Harpale, S. Sarawagi, and S. Chakrabarti.
2004. Document classification through interactive su-
pervision of document and term labels. In Proceed-
ings of the Conference on Principles and Practice of
Knowledge Discovery in Databases (PKDD), pages
185–196. Springer.
M.A. Hearst. 1992. Automatic acquisition of hyponyms
from large text corpora. In Proceedings of the Confer-
ence on Computational Linguistics (COLING), pages
539–545. ACL.
D. Heckerman. 1995. A tutorial on learning with
bayesian networks. Technical Report MSR-TR-95-06,
Microsoft Research.
K. Lang. 1995. Newsweeder: Learning to filter net-
news. In Proceedings of the International Conference
on Machine Learning (ICML), pages 331–339. Mor-
gan Kaufmann.
D. Lewis and J. Catlett. 1994. Heterogeneous un-
certainty sampling for supervised learning. In Pro-
ceedings of the International Conference on Machine
Learning (ICML), pages 148–156. Morgan Kaufmann.
B. Liu. 2010. Sentiment analysis and subjectivity. In
N. Indurkhya and F.J. Damerau, editors, Handbook of
Natural Language Processing,. CRC Press.
A. McCallum and K. Nigam. 1998. Employing EM
in pool-based active learning for text classification.
In Proceedings of the International Conference on
Machine Learning (ICML), pages 359–367. Morgan
Kaufmann.
P. Melville, W. Gryc, and R.D. Lawrence. 2009. Sen-
timent analysis of blogs by combining lexical knowl-
edge with text classification. In Proceedings of the In-
ternational Conference on Knowledge Discovery and
Data Mining (KDD), pages 1275–1284. ACM Press.
S. Mohammad and T. Pedersen. 2004. Combining lex-
ical and syntactic features for supervised word sense
disambiguation. In Hwee Tou Ng and Ellen Riloff,
editors, Proceedings of the Conference on Compu-
tational Natural Language Learning (CoNLL), pages
25–32. ACL Press.
I. Moulinier. 1996. A framework for comparing text cat-
egorization approaches. In Proceedings of the AAAI
Symposium on Machine Learning in Information Ac-
cess. AAAI Press.
A.Y. Ng and M. Jordan. 2002. On discriminative vs.
generative classifiers: A comparison of logistic regres-
sion and naive bayes. In Advances in Neural Infor-
mation Processing Systems (NIPS), volume 14, pages
841–848. MIT Press.
B. Pang, L. Lee, and S. Vaithyanathan. 2002. Thumbs
up: Sentiment classification using machine learning
techniques. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing
(EMNLP), pages 79–86. ACL Press.
S. Petrovic´, M. Osborne, and V. Lavrenko. 2010.
Streaming first story detection with application to
Twitter. In Proceedings of the North American Asso-
ciation for Computational Linguistics (NAACL), pages
181–189. ACL Press.
H. Raghavan, O. Madani, and R. Jones. 2006. Active
learning with feedback on both features and instances.
Journal of Machine Learning Research, 7:1655–1686.
1477
J.D. Rennie, L. Shih, J. Teevan, and D. Karger. 2003.
Tackling the poor assumptions of naive bayes text clas-
sifiers. In Proceedings of the International Conference
on Machine Learning (ICML), pages 285–295. Mor-
gan Kaufmann.
E. Riloff and R. Jones. 1999. Learning dictionaries for
information extraction by multi-level bootstrapping.
In Proceedings of the Conference on Artificial Intel-
ligence (AAAI), pages 474–479. AAAI Press.
A. Ritter, C. Cherry, and B. Dolan. 2010. Unsupervised
modeling of Twitter conversations. In Proceedings
of the North American Association for Computational
Linguistics (NAACL), pages 172–180. ACL Press.
T. Rose, M. Stevenson, and M. Whitehead. 2002. The
Reuters corpus vol. 1 - from yesterday’s news to to-
morrow’s language resources. In Proceedings of the
Conference on Language Resources and Evaluation
(LREC), pages 29–31.
F. Sebastiani. 2002. Machine learning in automated text
categorization. ACM Computing Surveys, 34(1):1–47.
B. Settles. 2009. Active learning literature survey. Com-
puter Sciences Technical Report 1648, University of
Wisconsin–Madison.
1478
