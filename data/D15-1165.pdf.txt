Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 1401–1411,
Lisbon, Portugal, 17-21 September 2015.
c©2015 Association for Computational Linguistics.
A Comparison between Count and Neural Network Models Based on
Joint Translation and Reordering Sequences
Andreas Guta, Tamer Alkhouli, Jan-Thorsten Peter, Joern Wuebker, Hermann Ney
Human Language Technology and Pattern Recognition Group
RWTH Aachen University
Aachen, Germany
{surname}@cs.rwth-aachen.de
Abstract
We propose a conversion of bilingual
sentence pairs and the corresponding
word alignments into novel linear se-
quences. These are joint translation
and reordering (JTR) uniquely defined
sequences, combining interdepending
lexical and alignment dependencies on
the word level into a single framework.
They are constructed in a simple manner
while capturing multiple alignments
and empty words. JTR sequences can
be used to train a variety of models.
We investigate the performances of n-
gram models with modified Kneser-Ney
smoothing, feed-forward and recur-
rent neural network architectures when
estimated on JTR sequences, and com-
pare them to the operation sequence
model (Durrani et al., 2013b). Evalua-
tions on the IWSLT German?English,
WMT German?English and BOLT
Chinese?English tasks show that JTR
models improve state-of-the-art phrase-
based systems by up to 2.2 BLEU.
1 Introduction
Standard phrase-based machine translation (Och
et al., 1999; Zens et al., 2002; Koehn et al., 2003)
uses relative frequencies of phrase pairs to esti-
mate a translation model. The phrase table is ex-
tracted from a bilingual text aligned on the word
level, using e.g. GIZA
++
(Och and Ney, 2003). Al-
though the phrase pairs capture internal dependen-
cies between the source and target phrases aligned
to each other, they fail to model dependencies that
extend beyond phrase boundaries. Phrase-based
decoding involves concatenating target phrases.
The burden of ensuring that the result is linguisti-
cally consistent falls on the language model (LM).
This work proposes word-based translation
models that are potentially capable of capturing
long-range dependencies. We do this in two steps:
First, given bilingual sentence pairs and the asso-
ciated word alignments, we convert the informa-
tion into uniquely defined linear sequences. These
sequenecs encode both word reordering and trans-
lation information. Thus, they are referred to as
joint translation and reordering (JTR) sequences.
Second, we train an n-gram model with modi-
fied Kneser-Ney smoothing (Chen and Goodman,
1998) on the resulting JTR sequences. This yields
a model that fuses interdepending reordering and
translation dependencies into a single framework.
Although JTR n-gram models are closely re-
lated to the operation sequence model (OSM)
(Durrani et al., 2013b), there are three main dif-
ferences. To begin with, the OSM employs min-
imal translation units (MTUs), which are essen-
tially atomic phrases. As the MTUs are extracted
sentence-wise, a word can potentially appear in
multiple MTUs. In order to avoid overlapping
translation units, we define the JTR sequences
on the level of words. Consequently, JTR se-
quences have smaller vocabulary sizes than OSM
sequences and lead to models with less sparsity.
Moreover, we argue that JTR sequences offer a
simpler reordering approach than operation se-
quences, as they handle reorderings without the
need to predict gaps. Finally, when used as an
additional model in the log-linear framework of
phrase-based decoding, an n-gram model trained
on JTR sequences introduces only one single fea-
ture to be tuned, whereas the OSM additionally
uses 4 supportive features (Durrani et al., 2013b).
Experimental results confirm that this simplifica-
tion does not make JTR models less expressive, as
their performance is on par with the OSM.
Due to data sparsity, increasing the n-gram or-
der of count-based models beyond a certain point
becomes useless. To address this, we resort to neu-
1401
ral networks (NNs), as they have been successfully
applied to machine translation recently (Sunder-
meyer et al., 2014; Devlin et al., 2014). They are
able to score any word combination without re-
quiring additional smoothing techniques. We ex-
periment with feed-forward and recurrent trans-
lation networks, benefiting from their smoothing
capabilities. To this end, we split the linear se-
quence into two sequences for the neural transla-
tion models to operate on. This is possible due to
the simplicity of the JTR sequence. We show that
the count and NN models perform well on their
own, and that combining them yields even better
results.
In this work, we apply n-gram models with
modified Kneser-Ney smoothing during phrase-
based decoding and neural JTR models in rescor-
ing. However, using a phrase-based system is not
required by the model, but only the initial step to
demonstrate the strength of JTR models, which
can be applied independently of the underlying de-
coding framework. While the focus of this work is
on the development and comparison of the models,
the long-term goal is to decode using JTR mod-
els without the limitations introduced by phrases,
in order to exploit the full potential of JTR mod-
els. The JTR models are estimated on word align-
ments, which we obtain using GIZA
++
in this pa-
per. The future aim is to also generate improved
word alignments by a joint optimization of both
the alignments and the models, similar to the train-
ing of IBM models (Brown et al., 1990; Brown et
al., 1993). In the long run, we intend to achieve a
consistency between decoding and training using
the introduced JTR models.
2 Previous Work
In order to address the downsides of the phrase
translation model, various approaches have been
taken. Mari˜no et al. (2006) proposed a bilingual
language model (BILM) that operates on bilin-
gual n-grams, with an own n-gram decoder re-
quiring monotone alignments. The lexical re-
ordering model introduced in (Tillmann, 2004)
was integrated into phrase-based decoding. Crego
and Yvon (2010) adapted the approach to BILMs.
The bilingual n-grams are further advanced in
(Niehues et al., 2011), where they operate on non-
monotone alignments within a phrase-based trans-
lation framework. Compared to our JTR models,
their BILMs treat jointly aligned source words as
minimal translation units, ignore unaligned source
words and do not include reordering information.
Durrani et al. (2011) developed the OSM which
combined dependencies on bilingual word pairs
and reordering information into a single frame-
work. It used an own decoder that was based on n-
grams of MTUs and predicted single translation or
reordering operations. This was further advanced
in (Durrani et al., 2013a) by a decoder that was
capable of predicting whole sequences of MTUs,
similar to a phrase-based decoder. In (Durrani et
al., 2013b), a slightly enhanced version of OSM
was integrated into the log-linear framework of
the Moses system (Koehn et al., 2007). Both the
BILM (Stewart et al., 2014) and the OSM (Durrani
et al., 2014) can be smoothed using word classes.
Guta et al. (2015) introduced the extended trans-
lation model (ETM), which operates on the word
level and augments the IBM models by an addi-
tional bilingual word pair and a reordering opera-
tion. It is implemented into the log-linear frame-
work of a phrase-based decoder and shown to be
competitive with a 7-gram OSM.
The JTR n-gram models proposed within this
work can be seen as an extension of the ETM.
Nevertheless, JTR models utilize linear sequences
of dependencies and combine the translation of
bilingual word pairs and reoderings into a sin-
gle model. The ETM, however, features separate
models for the translation of individual words and
reorderings and provides an explicit treatment of
multiple alignments. As they operate on linear se-
quences, JTR count models can be implemented
using existing toolkits for n-gram language mod-
els, e.g. the KenLM toolkit (Heafield et al., 2013).
An HMM approach for word-to-phrase align-
ments was presented in (Deng and Byrne, 2005),
showing performance similar to IBM Model 4 on
the task of bitext alignment. Feng et al. (2013)
propose several models which rely only on the in-
formation provided by the source side and pre-
dict reorderings. Contrastingly, JTR models in-
corporate target information as well and predict
both translations and reorderings jointly in a sin-
gle framework.
Zhang et al. (2013) explore different Markov
chain orderings for an n-gram model on MTUs
in rescoring. Feng and Cohn (2013) present an-
other generative word-based Markov chain trans-
lation model which exploits a hierarchical Pitman-
Yor process for smoothing, but it is only applied
to induce word alignments. Their follow-up work
(Feng et al., 2014) introduces a Markov-model on
1402
MTUs, similar to the OSM described above.
Recently, neural machine translation has
emerged as an alternative to phrase-based decod-
ing, where NNs are used as standalone models to
decode source input. In (Sutskever et al., 2014),
a recurrent NN was used to encode a source
sequence, and output a target sentence once the
source sentence was fully encoded in the network.
The network did not have any explicit treatment
of alignments. Bahdanau et al. (2015) introduced
soft alignments as part of the network architecture.
In this work, we make use of hard alignments
instead, where we encode the alignments in the
source and target sequences, requiring no mod-
ifications of existing feed-forward and recurrent
NN architectures. Our feed-forward models are
based on the architectures proposed in (Devlin et
al., 2014), while the recurrent models are based
on (Sundermeyer et al., 2014). Further recent
research on applying NN models for extended
context was carried out in (Le et al., 2012; Auli
et al., 2013; Hu et al., 2014). All of these works
focus on lexical context and ignore the reordering
aspect covered in our work.
3 JTR Sequences
The core idea of this work is the interpretation of
a bilingual sentence pair and its word alignment
as a linear sequence of K joint translation and re-
ordering (JTR) tokens g
K
1
. Formally, the sequence
g
K
1
( f
J
1
,e
I
1
,b
I
1
) is a uniquely defined interpretation
of a given source sentence f
J
1
, its translation e
I
1
and
the inverted alignment b
I
1
, where b
i
denotes the
ordered sequence of source positions j aligned to
target position i. We drop the explicit mention of
( f
J
1
,e
I
1
,b
I
1
) to allow for a better readability. Each
JTR token is either an aligned bilingual word pair
? f ,e? or a reordering class ?
j
?
j
.
Unaligned words on the source and target side
are processed as if they were aligned to the empty
word ? . Hence, an unaligned source word f gener-
ates the token ? f ,??, and an unaligned target word
e the token ??,e?.
Each word of the source and target sentences is
to appear in the corresponding JTR sequence ex-
actly once. For multiply-aligned target words e,
the first source word f that is aligned to e gener-
ates the token ? f ,e?. All other source words f
?
,
that are also aligned to e, are processed as if they
were aligned to the artificial word ? . Thus, each
of these f
?
generates a token ? f
?
,??. The same
approach is applied to multiply-aligned source
Algorithm 1 JTR Conversion Algorithm
1: procedure JTRCONVERSION( f
J
1
, e
I
1
, b
I
1
)
2: g
K
1
? /0
3: // last translated source position j
?
4: j
?
? 0
5: for i? 1 to I do
6: if e
i
is unaligned then
7: // align e
i
to the empty word ?
8: APPEND(g
K
1
, ??,e
i
?)
9: continue
10: // e
i
is aligned to at least one source word
11: j? first source position in b
i
12: if j = j
?
then
13: // e
i
is aligned to the same f
j
as e
i?1
14: APPEND(g
K
1
, ?? ,e
i
?)
15: continue
16: if j 6= j
?
+1 then
17: // alignment step is non-monotone
18: REORDERINGS( f
J
1
, b
I
1
, g
K
1
, j
?
, j)
19: // 1-to-1 translation: f
j
is aligned to e
i
20: APPEND(g
K
1
, ? f
j
,e
i
?)
21: j
?
? j
22: // generate all other f
j
that are also
23: // aligned to the current target word e
i
24: for all remaining j in b
i
do
25: APPEND(g
K
1
, ? f
j
,??)
26: j
?
? j
27: // check last alignment step at sentence end
28: if j
?
6= J then
29: // last alignment step is non-monotone
30: REORDERINGS( f
J
1
, b
I
1
, g
K
1
, j
?
, J +1)
31: return g
K
1
32:
33: // called when a reordering class is appended
34: procedure REORDERINGS( f
J
1
, b
I
1
, g
K
1
, j
?
, j)
35: // check if the predecessor is unaligned
36: if f
j?1
is unaligned then
37: // get unaligned predecessors
38: f
j?1
j
0
? unaligned predecessors of f
j
39: // check if the alignment step to the first
40: // unaligned predecessor is monotone
41: if j
0
6= j
?
+1 then
42: // non-monotone: add reordering class
43: APPEND(g
K
1
, ?
j
?
, j
0
)
44: // translate unaligned predecessors by ?
45: for f ? f
j
0
to f
j?1
do
46: APPEND(g
K
1
, ? f ,??)
47: else
48: // non-monotone: add reordering class
49: APPEND(g
K
1
, ?
j
?
, j
)
words. Similar to Feng and Cohn (2013), we clas-
sify the reordered source positions j
?
and j by ?
j
?
j
:
?
j
?
j
=
?
?
?
?
?
step backward (?), j = j
?
?1
jump forward (y), j > j
?
+1
jump backward (x), j < j
?
?1.
The reordering classes are illustrated in Figure 1.
1403
ji?1
i
j
?
(a) step backward (?)
j
i?1
i
j
?
(b) jump forward (y)
j
?
i?1
i
j
(c) jump backward (x)
Figure 1: Overview of the different reordering classes in JTR sequences.
3.1 Sequence Conversion
Algorithm 1 presents the formal conversion of a
bilingual sentence pair and its alignment into the
corresponding JTR sequence g
K
1
. At first, g
K
1
is
initialized by an empty sequence (line 2). For each
target position i = 1, . . . , I it is extended by at least
one token. During the generation process, we store
the last visited source position j
?
(line 4). If a tar-
get word e
i
is
• unaligned, we align it to the empty word ?
and append ??,e
i
? to the current g
K
1
(line 8),
• if it is aligned to the same f
j
as e
i?1
, we only
add ?? ,e
i
? (line 14),
• otherwise we append ? f
j
,e
i
? (line 20) and
• in case there are more source words aligned
to e
i
, we additionally append ? f
j
,?? for each
of these (line 24).
Before a token ? f
j
,e
i
? is generated, we have to
check whether the alignment step from j
?
to j is
monotone (line 16). In case it is not, we have to
deal with reorderings (line 34). We define that
a token ? f
j?1
,?? is to be generated right before
the generation of the token containing f
j
. Thus,
if f
j?1
is not aligned, we first determine the con-
tiguous sequence of unaligned predecessors f
j?1
j
0
(line 38). Next, if the step from j
?
to j
0
is not
monotone, we add the corresponding reordering
class (line 43). Afterwards we append all ? f
j
0
,??
to ? f
j?1
,??. If f
j?1
is aligned, we do not have to
process unaligned source words and only append
the corresponding reordering class (line 49).
Figure 2 illustrates the generation steps of a
JTR sequence, whose result is presented in Ta-
ble 1. The alignment steps are denoted by the ar-
rows connecting the alignment points. The first
dashed alignment point indicates the ??, ,? token
that is generated right after the ?Feld,field? to-
ken. The second dashed alignment point indicates
the ?ein,?? token, which corresponds to the un-
aligned source word ein. Note, that the ?ein,??
inthe
Commandfield
,enter
yourcode
.
geb
en Sie im Fel
d
Bef
ehl Ihr
en Cod
e ein .
Figure 2: This example illustrates the JTR se-
quence g
K
1
for a German?English sentence pair
including the word-to-word alignment.
token has to be generated right before ?., .? is
generated. Therefore, there is no forward jump
from ?Code,code? to ?., .?, but a monotone step
to ?ein,?? followed by ?., .?.
3.2 Training of Count Models
As the JTR sequence g
K
1
is a unique interpretation
of a bilingual sentence pair and its alignment, the
probability p( f
J
1
,e
I
1
,b
I
1
) can be computed as:
p( f
J
1
,e
I
1
,b
I
1
) = p(g
K
1
). (1)
The probability of g
K
1
can be factorized and ap-
proximated by an n-gram model.
p(g
K
1
) =
K
?
k=1
p(g
k
|g
k?1
k?n+1
) (2)
Within this work, we first estimate the Viterbi
alignment for the bilingual training data using
GIZA
++
(Och and Ney, 2003). Secondly, the con-
version presented in Algorithm 1 is applied to ob-
tain the JTR sequences, on which we estimate an
n-gram model with modified Kneser-Ney smooth-
ing as described in (Chen and Goodman, 1998) us-
ing the KenLM toolkit
1
(Heafield et al., 2013).
1
https://kheafield.com/code/kenlm/
1404
k g
k
s
k
t
k
1 y ? y
2 ?im,in? im in
3 ?? ,the? ? the
4 y ? y
5 ?Befehl,Command? Befehl Command
6 ? ? ?
7 ?Feld,field? Feld field
8 ??, ,? ? ,
9 x ? x
10 ?geben,enter? geben enter
11 ?Sie,?? Sie ?
12 y ? y
13 ?Ihren,your? Ihren your
14 ?Code,code? Code code
15 ?ein,?? ein ?
16 ?., .? . .
Table 1: The left side of this table presents the JTR
tokens g
k
corresponding to Figure 2. The right
side shows the source and target tokens s
k
and t
k
obtained from the JTR tokens g
k
. They are used
for the training of NNs (cf. Section 4).
3.3 Integration into Phrase-based Decoding
Basically, each phrase table entry is annotated
with both the word alignment information, which
also allows to identify unaligned source words,
and the corresponding JTR sequence. The JTR
model is added to the log-linear framework as an
additional n-gram model. Within the phrase-based
decoder, we extend each search state such that it
additionally stores the JTR model history.
In comparison to the OSM, the JTR model does
not predict gaps. Local reorderings within phrases
are handled implicitly. On the other hand, we rep-
resent long-range reorderings between phrases by
the coverage vector and limit them by reordering
constraints.
Phrase-pairs ending with unaligned source
words at their right boundary prove to be a prob-
lem during decoding. As shown in Subsection 3.1,
the conversion from word alignments to JTR se-
quences assumes that each token corresponding to
an unaligned source word is generated immedi-
ately before the token corresponding to the closest
aligned source position to its right. However, if a
phrase ends with an unaligned f
j
as its rightmost
source word, the generation of the ? f
j
,?? token has
to be postponed until the next word f
j+1
is to be
translated or, even worse, f
j+1
has already been
translated before.
To address this issue, we constrained the phrase
table extraction to discard entries with unaligned
source tokens at the right boundary. For IWSLT
De?En, this led to a baseline weaker by 0.2 BLEU
than the one described in Section 5. In order to
have an unconstrained and fair baseline, we there-
after removed this constraint and forced such dele-
tion tokens to be generated at the end of the se-
quence. Hence, we accept that the JTR model
might compute the wrong score in these special
cases.
4 Neural Networks
Usually, smoothing techniques are applied to
count-based models to handle unseen events. A
neural network does not suffer from this, as it
is able to score unseen events without additional
smoothing techniques. In the following, we will
describe how to adapt JTR sequences to be used
with feed-forward and recurrent NNs.
The first thing to notice is the vocabulary size,
mainly determined by the number of bilingual
word pairs, which constituted atomic units in the
count-based models. NNs that compute probabil-
ity values at the output layer evaluate a softmax
function that produces normalized scores that sum
up to unity. The softmax function is given by:
p(e
i
|e
i?1
1
) =
e
o
e
i
(e
i?1
1
)
?
|V |
w=1
e
o
w
(e
i?1
1
)
(3)
where o
e
i
and o
w
are the raw unnormalized output
layer values for the words e
i
and w, respectively,
and |V | is the vocabulary size. The output layer
is a function of the context e
i?1
1
. Computing the
denominator is expensive for large vocabularies,
as it requires computing the output for all words.
Therefore, we split JTR tokens g
k
and use indi-
vidual words as input and output units, such that
the NN receives jumps, source and target words as
input and outputs target words and jumps. Hence,
the resulting neural model is not a LM, but a trans-
lation model with different input and output vo-
cabularies. A JTR sequence g
K
1
is split into its
source and target parts s
K
1
and t
K
1
. The construc-
tion of the JTR source sequence s
K
1
proceeds as
follows: Whenever a bilingual pair is encountered,
the source word is kept and the target word is dis-
carded. In addition, all jump classes are replaced
by a special token ? . The JTR target sequence t
K
1
is
constructed similarly by keeping the target words
and dropping source words, and the jump classes
are also kept. Table 1 shows the JTR source and
target sequences corresponding to JTR sequence
of Figure 2.
1405
Due to the design of the JTR sequence, pro-
ducing the source and target JTR sequences is
straightforward. The resulting sequences can then
be used with existing NN architectures, without
further modifications to the design of the net-
works. This results in powerful models that re-
quire little effort to implement.
4.1 Feed-forward Neural JTR
First, we will apply a feed-forward NN (FFNN) to
the JTR sequence. FFNN models resemble count-
based models in using a predefined limited context
size, but they do not encounter the same smooth-
ing problems. In this work, we use a FFNN similar
to that proposed in (Devlin et al., 2014), defined
as:
p(t
K
1
|s
K
1
)?
K
?
k=1
p(t
k
|t
k?1
k?n
,s
k
k?n
). (4)
It scores the JTR target word t
k
at position k us-
ing the current source word s
k
, and the history of
n JTR source words. In addition, the n JTR target
words preceding t
k
are used as context. The FFNN
computes the score by looking up the vector em-
beddings of the source and target context words,
concatenating them, then evaluating the rest of the
network. We reduce the output layer to a short-
list of the most frequent words, and compute word
class probabilities for the remaining words.
4.2 Recurrent Neural JTR
Unlike feed-forward NNs, recurrent NNs (RNNs)
enable the use of unbounded context. Following
(Sundermeyer et al., 2014), we use bidirectional
recurrent NNs (BRNNs) to capture the full JTR
source side. The BRNN uses the JTR target side
as well as the full JTR source side as context, and
it is given by:
p(t
K
1
|s
K
1
) =
K
?
k=1
p(t
k
|t
k?1
1
,s
K
1
) (5)
This equation is realized by a network that uses
forward and backward recurrent layers to capture
the complete source sentence. By a forward layer
we imply a recurrent hidden layer that processes
a given sequence from left to right, while a back-
ward layer does the processing backwards, from
right to left. The source sentence is basically split
at a given position k, then past and future represen-
tations of the sentence are recursively computed
by the forward and backward layers, respectively.
To include the target side, we provide the forward
layer with the target input t
k?1
as well, that is,
we aggregate the embeddings of the input source
word s
k
and the input target word t
k?1
before they
are fed into the forward layer. Due to recurrency,
the forward layer encodes the parts (t
k?1
1
,s
k
1
), and
the backward layer encodes s
K
k
, and together they
encode (t
k?1
1
,s
K
1
), which is used to score the out-
put target word t
k
. For the sake of comparison
to FFNN and count models, we also experiment
with a recurrent model that does not include future
source information, this is obtained by replacing
the term s
K
1
with s
k
1
in Eq. 5. It will be referred
to as the unidirectional recurrent neural network
(URNN) model in the experiments.
Note that the JTR source and target sides
include jump information, therefore, the RNN
model described above explicitly models reorder-
ing. In contrast, the models proposed in (Sunder-
meyer et al., 2014) do not include any jumps, and
hence do not provide an explicit way of includ-
ing word reordering. In addition, the JTR RNN
models do not require the use of IBM-1 lexica to
resolve multiply-aligned words. As discussed in
Section 3, these cases are resolved by aligning the
multiply-aligned word to the first word on the op-
posite side.
The integration of the NNs into the decoder is
not trivial, due to the dependence on the target
context. In the case of RNNs, the context is un-
bounded, which would affect state recombination,
and lead to less variety in the beam used to prune
the search space. Therefore, the RNN scores are
computed using approximations instead (Auli et
al., 2013; Alkhouli et al., 2015). In (Alkhouli et
al., 2015), it is shown that approximate RNN inte-
gration into the phrase-based decoder has a slight
advantage over n-best rescoring. Therefore, we
apply RNNs in rescoring in this work, and to al-
low for a direct comparison between FFNNs and
RNNs, we apply FFNNs in rescoring as well.
5 Evaluation
We perform experiments on the large-
scale IWSLT 2013
2
(Cettolo et al.,
2014) German?English, WMT 2015
3
German?English and the DARPA BOLT
Chinese?English tasks. The statistics for the
bilingual corpora are shown in Table 2. Word
alignments are generated with the GIZA
++
toolkit
2
http://www.iwslt2013.org
3
http://www.statmt.org/wmt15/
1406
IWSLT WMT BOLT
German English German English Chinese English
Sentences 4.32M 4.22M 4.08M
Run. Words 108M 109M 106M 108M 78M 86M
Vocabulary 836K 792K 814K 773K 384K 817K
Table 2: Statistics for the bilingual training data of the IWSLT 2013 German?English, WMT 2015
German?English, and the DARPA BOLT Chinese?English translation tasks.
(Och and Ney, 2003). We use a standard phrase-
based translation system (Koehn et al., 2003).
The decoding process is implemented as a beam
search. All baselines contain phrasal and lexical
smoothing models for both directions, word and
phrase penalties, a distance-based reordering
model, enhanced low frequency features (Chen
et al., 2011), a hierarchical reordering model
(HRM) (Galley and Manning, 2008), a word
class LM (Wuebker et al., 2013) and an n-gram
LM. The lexical and phrase translation models of
all baseline systems are trained on all provided
bilingual data. The log-linear feature weights are
tuned with minimum error rate training (MERT)
(Och, 2003) on BLEU (Papineni et al., 2001). All
systems are evaluated with MultEval (Clark et al.,
2011). The reported BLEU scores are averaged
over three MERT optimization runs.
All LMs, OSMs and count-based JTR models
are estimated with the KenLM toolkit (Heafield et
al., 2013). The OSM and the count-based JTR
model are implemented in the phrasal decoder.
NNs are used only in rescoring. The 9-gram
FFNNs are trained with two hidden layers. The
short lists contain the 10k most frequent words,
and all remaining words are clusterd into 1000
word classes. The projecton layer has 17× 100
nodes, the first hidden layer 1000 and the sec-
ond 500. The RNNs have LSTM architectures.
The URNN has 2 hidden layers while the BRNN
has one forward, one backward and one addi-
tional hidden layer. All layers have 200 nodes,
while the output layer is class-factored using 2000
classes. For the count-based JTR model and OSM
we tuned the n-gram size on the tuning set of each
task. For the full data, 7-grams were used for the
IWSLT and WMT tasks, and 8-grams for BOLT.
When using in-domain data, smaller n-gram sizes
were used. All rescoring experiments used 1000-
best lists without duplicates.
5.1 Tasks description
The domain of IWSLT consists of lecture-type
talks presented at TED conferences which are also
available online
4
. All systems are optimized on
the dev2010 corpus, named dev here. Some
of the OSM and JTR systems are trained on the
TED portions of the data containing 138K sen-
tences. To estimate the 4-gram LM, we addi-
tionally make use of parts of the Shuffled News,
LDC English Gigaword and 10
9
-French-English
corpora, selected by a cross-entropy difference cri-
terion (Moore and Lewis, 2010). In total, 1.7 bil-
lion running words are taken for LM training. The
BOLT Chinese?English task is evaluated on the
“discussion forum” domain. The 5-gram LM is
trained on 2.9 billion running words in total. The
in-domain data consists of a subset of 67.8K sen-
tences and we used a set of 1845 sentences for tun-
ing. The evaluation set test1 contains 1844 and
test2 1124 sentences. For the WMT task, we
used the target side of the bilingual data and all
monolingual data to train a pruned 5-gram LM on
a total of 4.4 billion running words. We concate-
nated the newstest2011 and newstest2012
corpora for tuning the systems.
5.2 Results
We start with the IWSLT 2013 German? English
task, where we compare between the different JTR
and OSM models. The results are shown in Ta-
ble 3. When comparing the in-domain n-gram
JTR model trained using Kneser-Ney smoothing
(KN) to OSM, we observe that the n-gram KN
JTR model improves the baseline by 1.4 BLEU
on both test and eval11. The OSM model
performs similarly, with a slight disadvantage on
eval11. In comparison, the FFNN of Eq. (4) im-
proves the baseline by 0.7–0.9 BLEU, compared to
the slightly better 0.8–1.1 BLEU achieved by the
URNN. The difference between the FFNN and the
4
http://www.ted.com/
1407
data dev test eval11
baseline full 33.3 30.8 35.7
+OSM TED 34.5 32.2 36.8
+FFNN TED 34.0 31.7 36.4
+URNN TED 34.2 31.9 36.5
+BRNN TED 34.4 32.1 36.8
+KN TED 34.6 32.2 37.1
+BRNN TED 35.0 32.8 37.7
+OSM full 34.1 31.6 36.5
+FFNN full 33.9 31.5 36.0
+KN full 34.2 31.6 36.6
+KN TED 34.9 32.4 37.1
+FFNN TED 35.2 32.7 37.2
+FFNN full 35.1 32.7 37.2
+BRNN TED 35.5 33.0 37.4
+BRNN TED 35.4 33.0 37.3
Table 3: Results measured in BLEU for the IWSLT
German?English task.
train data test1 test2
baseline 18.1 17.0
+OSM indomain 18.8 17.2
+FFNN indomain 18.6 17.6
+BRNN indomain 18.6 17.6
+KN indomain 18.8 17.5
+OSM full 18.5 17.2
+FFNN full 18.4 17.4
+KN full 18.8 17.3
+KN indomain 19.0 17.7
+FFNN full 19.2 18.3
+RNN indomain 19.3 18.4
Table 4: Results measured in BLEU for the BOLT
Chinese?English task.
URNN is that the latter captures the unbounded
source and target history that extends until the be-
ginning of the sentences, giving it an advantage
over the FFNN. The performance of the URNN
can be improved by including the future part of the
source sentence, as described in Eq. (5), resulting
in the BRNN model. Next, we explore whether the
models are additive. When rescoring the n-gram
KN JTR output with the BRNN, an additional im-
provement of 0.6 BLEU is obtained. There are two
reasons for this: The BRNN includes the future
part of the source input when scoring target words.
This information is not used by the KN model.
Moreover, the BRNN is able to score word com-
binations unseen in training, while the KN model
uses backing off to score unseen events.
When training the KN, FFNN, and OSM mod-
els on the full data, we observe less gains in com-
parison to in-domain data training. However, com-
bining the KN models trained on in-domain and
full data gives additional gains, which suggests
that although the in-domain model is more adapted
to the task, it still can gain from out-of-domain
data. Adding the FFNN on top improves the com-
bination. Note here that the FFNN sees the same
information as the KN model, but the difference is
that the NN operates on the word level rather than
the word-pair level. Second, the FFNN is able to
handle unseen sequences by design, without the
need for the backing off workaround. The BRNN
improves the combination more than the FFNN,
as the model captures an unbounded source and
target history in addition to an unbounded future
source context. Combining the KN, FFNN and
BRNN JTR models leads to an overall gain of 2.2
BLEU on both dev and test.
Next, we present the BOLT Chinese?English
results, shown in Table 4. Comparing n-gram
KN JTR and OSM trained on the in-domain data
shows they perform equally well on test1, im-
proving the baseline by 0.7 BLEU, with a slight ad-
vantage for the JTR model on test2. The feed-
forward and the recurrent in-domain networks
yield the same results in comparison to each other.
Training the OSM and JTR models on the full data
yields slightly worse results than in-domain train-
ing. However, combining the two types of training
improves the results. This is shown when adding
the in-domain KN JTR model on top of the model
trained on full data, improving it by up to 0.4
BLEU. Rescoring with the feed-forward and the
recurrent network improves this even further, sup-
porting the previous observation that the n-gram
KN JTR and NNs complement each other. The
combination of the 4 models yields an overall im-
provement of 1.2–1.4 BLEU.
Finally, we compare KN JTR and OSM models
on the WMT German?English task in Table 5.
The two models perform almost similar to each
other. The JTR model improves the baseline by
up to 0.7 BLEU. Rescoring the KN JTR with the
FFNN improves it by up to 0.3 BLEU leading to an
overall improvement between 0.5 and 1.0 BLEU.
1408
newstest
2013 2014 2015
baseline 28.1 28.6 29.4
+OSM 28.6 28.9 30.0
+FFNN 28.7 28.9 29.7
+KN 28.8 28.9 29.9
+FFNN 29.1 29.1 30.0
Table 5: Results measured in BLEU for the WMT
German?English task.
5.3 Analysis
To investigate the effect of including jump infor-
mation in the JTR sequence, we trained a BRNN
using jump classes and another excluding them.
The BRNNs were used in rescoring. Below, we
demonstrate the difference between the systems:
source: wir kommen sp¨ater noch auf diese Leute zur¨uck .
reference: We’ll come back to these people later .
Hypothesis 1:
JTR source: wir kommen ? zur¨uck ? sp¨ater noch auf
diese Leute ? .
JTR target: we come y back x later ? to these people
y .
Hypothesis 2:
JTR source: wir kommen sp¨ater noch auf diese Leute
zur¨uck .
JTR target: we come later ? on these guys back .
Note the German verb “zur¨uckkommen”, which
is split into “kommen” and “zur¨uck”. German
places “kommen” at the second position and
“zur¨uck” towards the end of the sentence. Unlike
German, the corresponding English phrase “come
back” has the words adjacent to each other. We
found that the system including jumps prefers the
correct translation of the verb, as shown in Hy-
pothesis 1 above. The system translates “kom-
men” to “come”, jumps forward to “zur¨uck”,
translates it to “back”, then jumps back to continue
translating the word “sp¨ater”. In contrast, the sys-
tem that excludes jump classes is blind to this sep-
aration of words. It favors Hypothesis 2 which is
a strictly monotone translation of the German sen-
tence. This is also reflected by the BLEU scores,
where we found the system including jump classes
outperforming the one without by up to 0.8 BLEU.
6 Conclusion
We introduced a method that converts bilingual
sentence pairs and their word alignments into joint
translation and reordering (JTR) sequences. They
combine interdepending lexical and alignment de-
pendencies into a single framework. A main ad-
vantage of JTR sequences is that a variety of mod-
els can be trained on them. Here, we have esti-
mated n-gram models with modified Kneser-Ney
smoothing, FFNN and RNN architectures on JTR
sequences.
We compared our count-based JTR model to the
OSM, both used in phrase-based decoding, and
showed that the JTR model performed at least as
good as OSM, with a slight advantage for JTR. In
comparison to the OSM, the JTR model operates
on words, leading to a smaller vocabulary size.
Moreover, it utilizes simpler reordering structures
without gaps and only requires one log-linear fea-
ture to be tuned, whereas the OSM needs 5. Due
to the flexibility of JTR sequences, we can ap-
ply them also to FFNNs and RNNs. Utilizing
two count models and applying both networks in
rescoring gains the overall highest improvement
over the phrase-based system by up to 2.2 BLEU,
on the German?English IWSLT task. The com-
bination outperforms OSM by up to 1.2 BLEU on
the BOLT Chinese?English tasks.
The JTR models are not dependent on the
phrase-based framework, and one of the long-
term goals is to perform standalone decoding with
the JTR models independently of phrase-based
systems. Without the limitations introduced by
phrases, we believe that JTR models could per-
form even better. In addition, we aim to use JTR
models to obtain the alignment, which would then
be used to train the JTR models in an iterative
manner, achieving consistency and hoping for im-
proved models.
Acknowledgements
This work has received funding from the Euro-
pean Union’s Horizon 2020 research and innova-
tion programme under grant agreement n
o
645452
(QT21). This material is partially based upon
work supported by the DARPA BOLT project un-
der Contract No. HR0011- 12-C-0015. Any opin-
ions, findings and conclusions or recommenda-
tions expressed in this material are those of the
authors and do not necessarily reflect the views of
DARPA.
1409
References
Tamer Alkhouli, Felix Rietig, and Hermann Ney. 2015.
Investigations on phrase-based decoding with recur-
rent neural network language and translation mod-
els. In Proceedings of the EMNLP 2015 Tenth
Workshop on Statistical Machine Translation, Lis-
bon, Portugal, September. to appear.
Michael Auli, Michel Galley, Chris Quirk, and Geof-
frey Zweig. 2013. Joint Language and Translation
Modeling with Recurrent Neural Networks. In Con-
ference on Empirical Methods in Natural Language
Processing, pages 1044–1054, Seattle, USA, Octo-
ber.
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In International Con-
ference on Learning Representations, San Diego,
Calefornia, USA, May.
Peter F. Brown, John Cocke, Stephan A. Della Pietra,
Vincent J. Della Pietra, Fredrick Jelinek, John D.
Lafferty, Robert L. Mercer, and Paul S. Rossin.
1990. A Statistical Approach to Machine Transla-
tion. Computational Linguistics, 16(2):79–85, June.
Peter F. Brown, Stephan A. Della Pietra, Vincent J.
Della Pietra, and Robert L. Mercer. 1993. The
Mathematics of Statistical Machine Translation: Pa-
rameter Estimation. Computational Linguistics,
19(2):263–311, June.
Mauro Cettolo, Jan Niehues, Sebastian St¨uker, Luisa
Bentivogli, and Marcello Federico. 2014. Report on
the 11th iwslt evaluation campaign, iwslt 2014. In
International Workshop on Spoken Language Trans-
lation, pages 2–11, Lake Tahoe, CA, USA, Decem-
ber.
Stanley F. Chen and Joshuo Goodman. 1998. An
Empirical Study of Smoothing Techniques for Lan-
guage Modeling. Technical Report TR-10-98, Com-
puter Science Group, Harvard University, Cam-
bridge, MA, August.
Boxing Chen, Roland Kuhn, George Foster, and
Howard Johnson. 2011. Unpacking and transform-
ing feature functions: New ways to smooth phrase
tables. In MT Summit XIII, pages 269–275, Xiamen,
China, September.
Jonathan H. Clark, Chris Dyer, Alon Lavie, and
Noah A. Smith. 2011. Better hypothesis test-
ing for statistical machine translation: Controlling
for optimizer instability. In 49th Annual Meet-
ing of the Association for Computational Linguis-
tics:shortpapers, pages 176–181, Portland, Oregon,
June.
Josep Maria Crego and Franc¸ois Yvon. 2010. Improv-
ing reordering with linguistically informed bilingual
n-grams. In Proceedings of the 23rd International
Conference on Computational Linguistics (Coling
2010: Posters), pages 197–205, Beijing, China.
Yonggang Deng and William Byrne. 2005. Hmm word
and phrase alignment for statistical machine transla-
tion. In Proceedings of Human Language Technol-
ogy Conference and Conference on Empirical Meth-
ods in Natural Language Processing, pages 169–
176, Vancouver, British Columbia, Canada, October.
Jacob Devlin, Rabih Zbib, Zhongqiang Huang, Thomas
Lamar, Richard Schwartz, and John Makhoul. 2014.
Fast and Robust Neural Network Joint Models for
Statistical Machine Translation. In 52nd Annual
Meeting of the Association for Computational Lin-
guistics, pages 1370–1380, Baltimore, MD, USA,
June.
Nadir Durrani, Helmut Schmid, and Alexander Fraser.
2011. A joint sequence translation model with in-
tegrated reordering. In Proceedings of the 49th An-
nual Meeting of the Association for Computational
Linguistics: Human Language Technologies, pages
1045–1054, Portland, Oregon, USA, June.
Nadir Durrani, Alexander Fraser, and Helmut Schmid.
2013a. Model with minimal translation units, but
decode with phrases. In Proceedings of the 2013
Conference of the North American Chapter of the
Association for Computational Linguistics: Human
Language Technologies, pages 1–11, Atlanta, Geor-
gia, June.
Nadir Durrani, Alexander Fraser, Helmut Schmid,
Hieu Hoang, and Philipp Koehn. 2013b. Can
markov models over minimal translation units help
phrase-based smt? In Proceedings of the 51st An-
nual Meeting of the Association for Computational
Linguistics (Volume 2: Short Papers), pages 399–
405, Sofia, Bulgaria, August.
Nadir Durrani, Philipp Koehn, Helmut Schmid, and
Alexander Fraser. 2014. Investigating the useful-
ness of generalized word representations in smt. In
COLING, Dublin, Ireland, August.
Yang Feng and Trevor Cohn. 2013. A markov
model of machine translation using non-parametric
bayesian inference. In 51st Annual Meeting of the
Association for Computational Linguistics, pages
333–342, Sofia, Bulgaria, August.
Minwei Feng, Jan-Thorsten Peter, and Hermann Ney.
2013. Advancements in reordering models for sta-
tistical machine translation. In Annual Meeting
of the Assoc. for Computational Linguistics, pages
322–332, Sofia, Bulgaria, August.
Yang Feng, Trevor Cohn, and Xinkai Du. 2014. Fac-
tored markov translation with robust modeling. In
Proceedings of the Eighteenth Conference on Com-
putational Natural Language Learning, pages 151–
159, Ann Arbor, Michigan, June.
Michel Galley and Christopher D. Manning. 2008.
A simple and effective hierarchical phrase reorder-
ing model. In Proceedings of the Conference on
1410
Empirical Methods in Natural Language Process-
ing, EMNLP ’08, pages 848–856, Stroudsburg, PA,
USA. Association for Computational Linguistics.
Andreas Guta, Joern Wuebker, Miguel Grac¸a, Yunsu
Kim, and Hermann Ney. 2015. Extended translation
models in phrase-based decoding. In Proceedings
of the EMNLP 2015 Tenth Workshop on Statistical
Machine Translation, Lisbon, Portugal, September.
to appear.
Kenneth Heafield, Ivan Pouzyrevsky, Jonathan H.
Clark, and Philipp Koehn. 2013. Scalable modi-
fied Kneser-Ney language model estimation. In Pro-
ceedings of the 51st Annual Meeting of the Associa-
tion for Computational Linguistics, pages 690–696,
Sofia, Bulgaria, August.
Yuening Hu, Michael Auli, Qin Gao, and Jianfeng Gao.
2014. Minimum translation modeling with recur-
rent neural networks. In Proceedings of the 14th
Conference of the European Chapter of the Associ-
ation for Computational Linguistics, pages 20–29,
Gothenburg, Sweden, April.
P. Koehn, F. J. Och, and D. Marcu. 2003. Statisti-
cal Phrase-Based Translation. In Proceedings of the
2003 Meeting of the North American chapter of the
Association for Computational Linguistics (NAACL-
03), pages 127–133, Edmonton, Alberta.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ond?rej Bojar, Alexandra
Constantine, and Evan Herbst. 2007. Moses: Open
Source Toolkit for Statistical Machine Translation.
pages 177–180, Prague, Czech Republic, June.
Hai Son Le, Alexandre Allauzen, and Franc¸ois Yvon.
2012. Continuous Space Translation Models with
Neural Networks. In Conference of the North Amer-
ican Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
39–48, Montreal, Canada, June.
Jos´e B Mari˜no, Rafael E Banchs, Josep M Crego, Adri`a
de Gispert, Patrik Lambert, Jos´e A R Fonollosa, and
Marta R Costa-juss`a. 2006. N-gram-based Machine
Translation. Comput. Linguist., 32(4):527–549, De-
cember.
R.C. Moore and W. Lewis. 2010. Intelligent Selection
of Language Model Training Data. In ACL (Short
Papers), pages 220–224, Uppsala, Sweden, July.
Jan Niehues, Teresa Herrmann, Stephan Vogel, and
Alex Waibel, 2011. Proceedings of the Sixth Work-
shop on Statistical Machine Translation, chapter
Wider Context by Using Bilingual Language Mod-
els in Machine Translation, pages 198–206.
Franz J. Och and Hermann Ney. 2003. A System-
atic Comparison of Various Statistical Alignment
Models. Computational Linguistics, 29(1):19–51,
March.
Franz J. Och, Christoph Tillmann, and Hermann Ney.
1999. Improved Alignment Models for Statistical
Machine Translation. In Proc. Joint SIGDAT Conf.
on Empirical Methods in Natural Language Pro-
cessing and Very Large Corpora, pages 20–28, Uni-
versity of Maryland, College Park, MD, June.
Franz Josef Och. 2003. Minimum Error Rate Training
in Statistical Machine Translation. In Proc. of the
41th Annual Meeting of the Association for Compu-
tational Linguistics (ACL), pages 160–167, Sapporo,
Japan, July.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2001. Bleu: a Method for Automatic
Evaluation of Machine Translation. IBM Research
Report RC22176 (W0109-022), IBM Research Di-
vision, Thomas J. Watson Research Center, P.O. Box
218, Yorktown Heights, NY 10598, September.
Darelene Stewart, Roland Kuhn, Eric Joanis, and
George Foster. 2014. Coarse split and lump bilin-
gual languagemodels for richer source information
in smt. In AMTA, Vancouver, BC, Canada, October.
Martin Sundermeyer, Tamer Alkhouli, Wuebker Wue-
bker, and Hermann Ney. 2014. Translation Model-
ing with Bidirectional Recurrent Neural Networks.
In Conference on Empirical Methods on Natural
Language Processing, pages 14–25, Doha, Qatar,
October.
Ilya Sutskever, Oriol Vinyals, and Quoc V. V Le.
2014. Sequence to sequence learning with neural
networks. In Advances in Neural Information Pro-
cessing Systems 27, pages 3104–3112.
Christoph Tillmann. 2004. A unigram orientation
model for statistical machine translation. In Pro-
ceedings of HLT-NAACL 2004: Short Papers, HLT-
NAACL-Short ’04, pages 101–104, Stroudsburg,
PA, USA.
Joern Wuebker, Stephan Peitz, Felix Rietig, and Her-
mann Ney. 2013. Improving statistical machine
translation with word class models. In Conference
on Empirical Methods in Natural Language Pro-
cessing, pages 1377–1381, Seattle, USA, October.
Richard Zens, Franz Josef Och, and Hermann Ney.
2002. Phrase-Based Statistical Machine Transla-
tion. In 25th German Conf. on Artificial Intelligence
(KI2002), pages 18–32, Aachen, Germany, Septem-
ber.
Hui Zhang, Kristina Toutanova, Chris Quirk, and Jian-
feng Gao. 2013. Beyond left-to-right: Multiple de-
composition structures for smt. In Proceedings of
the 2013 Conference of the North American Chap-
ter of the Association for Computational Linguis-
tics: Human Language Technologies, pages 12–21,
Atlanta, Georgia, June.
1411
