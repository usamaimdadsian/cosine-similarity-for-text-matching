Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 573–578,
Lisbon, Portugal, 17-21 September 2015.
c©2015 Association for Computational Linguistics.
Global Thread-Level Inference for Comment Classification
in Community Question Answering
Shafiq Joty, Alberto Barr
´
on-Cede
˜
no, Giovanni Da San Martino, Simone Filice,
Llu´?s M
`
arquez, Alessandro Moschitti, and Preslav Nakov,
Qatar Computing Research Institute, HBKU
{sjoty,albarron,gmartino,sfilice,
lmarquez,amoschitti,pnakov}@qf.org.qa
Abstract
Community question answering, a recent
evolution of question answering in the
Web context, allows a user to quickly con-
sult the opinion of a number of people on
a particular topic, thus taking advantage
of the wisdom of the crowd. Here we
try to help the user by deciding automat-
ically which answers are good and which
are bad for a given question. In particular,
we focus on exploiting the output struc-
ture at the thread level in order to make
more consistent global decisions. More
specifically, we exploit the relations be-
tween pairs of comments at any distance
in the thread, which we incorporate in a
graph-cut and in an ILP frameworks. We
evaluated our approach on the benchmark
dataset of SemEval-2015 Task 3. Results
improved over the state of the art, confirm-
ing the importance of using thread level in-
formation.
1 Introduction
Community question answering (CQA) is a recent
evolution of question answering, in the Web con-
text, where users pose questions and then receive
answers from other users. This setup is very at-
tractive, as the anonymity on the Web allows users
to ask just about anything and then hope to get
some honest answers from a number of people. On
the negative side, there is no guarantee about the
quality of the answers as people of very different
background, knowledge, and with different moti-
vation contribute answers to a given question.
Unlike traditional question answering (QA), in
CQA answering takes the form of commenting in
a forum. Thus, many comments are only loosely
connected to the original question, and some are
not answers at all, but are rather interactions be-
tween users.
As question-comment threads can get quite
long, finding good answers in a thread can be time-
consuming. This has triggered research in trying
to automatically determine which answers might
be good and which ones are likely to be bad or ir-
relevant. One early work going in this direction is
that of Qu and Liu (2011), who tried to determine
whether a question is “solved” or not, given its as-
sociated thread of comments. As a first step in the
process, they performed a comment-level classi-
fication, considering four classes: problem, solu-
tion, good feedback, and bad feedback.
More recently, the shared task at SemEval 2015
on Answer Selection in CQA (Nakov et al., 2015),
whose benchmark datasets we will use below,
tackled the task of identifying good, potentially
useful, and bad comments within a thread. In that
task, the top participating systems used thread-
level features, in addition to the usual local fea-
tures that only look at the question–answer pair.
For example, the second-best team, HITSZ-ICRC,
used as a feature the position of the comment in
the thread (Hou et al., 2015). Similarly, our par-
ticipation, which achieved the third-best postition,
used features that try to describe a comment in the
context of the entire comment thread, focusing on
user interaction (Nicosia et al., 2015). Finally, the
fifth-best team, ICRC-HIT, treated the answer se-
lection task as a sequence labeling problem and
proposed recurrent convolution neural networks to
recognize good comments (Zhou et al., 2015b).
In a follow-up work, Zhou et al. (2015a) in-
cluded a long-short term memory in their convo-
lution neural network to learn the classification se-
quence for the thread. In parallel, in our recent
work (Barr´on-Cede˜no et al., 2015), we tried to ex-
ploit the dependencies between the thread com-
ments to tackle the same task. We did it by design-
ing features that look globally at the thread and
by applying structured prediction models, such as
Conditional Random Fields (Lafferty et al., 2001).
573
Our goal in this paper goes in the same direction:
we are interested in exploiting the output structure
at the thread level to make more consistent global
assignments.
To the best of our knowledge, there is no work
in QA that identifies good answers based on the
selection of the other answers retrieved for a ques-
tion. This is mainly due to the loose dependencies
between the different answer passages in standard
QA. In contrast, we postulate that in a CQA set-
ting, the answers from different users in a com-
mon thread are strongly interconnected and, thus,
a joint answer selection model should be adopted
to achieve higher accuracy. In particular, we focus
on the relations between two comments at any dis-
tance in the thread. This is more general than pre-
vious approaches, which were either limited to se-
quential interactions or considered conversational
interactions only at the level of features.
We propose a model based on the idea that sim-
ilar comments should have similar labels. Below,
we apply graph-cut and we compare it to an inte-
ger linear programming (ILP) formulation for de-
coding under global constraints; we also provide
results with a linear-chain CRF. We show that the
CRF is ineffective due to long-distance relations,
e.g., a conversation in a thread can branch and then
come back later. On the contrary, the global infer-
ence models (either graph-cut or ILP) using the
similarity between pairs of comments manage to
significantly improve a strong baseline performing
local comment-based classifications.
2 The Task
We use the CQA-QL corpus from Subtask A of
SemEval-2015 Task 3 on Answer Selection in
CQA. The corpus contains data from the Qatar
Living forum,
1
and is publicly available on the
task’s website.
2
The dataset consists of ques-
tions and a list of answers for each question, i.e.,
question-answer threads. Each question, and each
answer, consist of a short title and a more de-
tailed description. There is also meta informa-
tion associated with both, e.g., ID of the user ask-
ing/answering the question, timestamp, category.
The task asks participants to determine for each
answer in the thread whether it is Good, Bad, or
Potentially useful for the given question.
1
http://www.qatarliving.com/forum
2
http://alt.qcri.org/semeval2015/task3/
Q: Can I obtain Driving License my QID is written Em-
ployee
A
1
the word employee is a general term that refers to all the
staff in your company either the manager, secretary up
to the lowest position or whatever positions they have.
you are all considered employees of your company.
A
2
your qid should specify what is the actual profession you
have. i think for me, your chances to have a drivers
license is low.
A
3
dear richard, his asking if he can obtain. means he have
the driver license
A
4
Slim chance . . .
Figure 1: Example from SemEval-2015 Task 3.
A simplified example is shown in Figure 1,
3
where answers 2 and 4 are good, answer 1 is po-
tentially useful, and answer 3 is bad. In this paper,
we focus on a 2-class variant of the above Sub-
task A, which is closer to a real CQA application.
We merge Potential and Bad labels into Bad and
we focus on the 2-class problem: Good-vs-Bad.
Table 1 shows some statistics about the resulting
dataset used for development, training and testing.
Category Train Dev Test
Questions 2,600 300 329
Comments 16,541 1,645 1,976
Good 8,069 875 997
Bad 8,472 770 979
Table 1: Statistics about the CQA-QL dataset:
after merging Bad and Potential into Bad.
3 Our Proposed Solution
We model the pairwise relations between the com-
ments in the answer thread ({c
i
}
n
i=1
) to produce a
better global assignment: we combine the predic-
tions of a Good-vs-Bad classifier at the comment
level with the output of a pairwise classifier, Same-
vs-Different, which takes two comments and pre-
dicts whether they should have the same label.
Each comment c
i
has an individual score s
iK
,
provided by the Good-vs-Bad classifier, for being
in class K ? {G,B} (i.e., G for Good and B
for Bad). Moreover, for each pair of comments
(c
i
, c
j
), we have an association score s
ij
, an esti-
mate by the pairwise classifier about how likely it
is that the comments c
i
and c
j
will have the same
label. Next, we define two ways of doing global
inference using these two sources of information.
3
http://www.qatarliving.com/moving-qatar/posts/can-i-
obtain-driving-license-my-qid-written-employee
574
3.1 Graph Partition Approach
Here our goal is to find a partition P = (G,B)
that minimizes the following cost:
C(P ) = ?
[
?
c
i
?G
s
iB
+
?
c
i
?B
s
iG
]
+(1??)
?
c
i
?G,c
j
?B
s
ij
The first part of the cost function discourages mis-
classification of individual comments, while the
second part encourages similar comments to be in
the same class. The mixing parameter ? ? [0, 1]
determines the relative strength of the two compo-
nents. Our approach is inspired by Pang and Lee
(2004), where they model the proximity relation
between sentences for finding subjective sentences
in product reviews, whereas we are interested in
global inference based on local classifiers.
The optimization problem can be efficiently
solved by finding a minimum cut of a weighted
undirected graph G = (V,E). The set of nodes
V = {v
1
, v
2
, · · · , v
n
, s, t} represent the n com-
ments in a thread, the source and the sink. We
connect each comment node v
i
to the source node
s by adding an edge w(v
i
, s) with capacity s
iG
,
and to the sink node t by adding an edge w(v
i
, t)
with capacity s
iB
. Finally, we add edges w(v
i
, v
j
)
with capacity s
ij
to connect all pairs of comments.
Minimizing C(P ) amounts to finding a parti-
tion (S, T ), where S = {s}?S
?
and T = {t}?T
?
for s /? S
?
, t /? T
?
, that minimizes the cut capac-
ity, i.e., the net flow crossing from S to T . One
crucial advantage of this approach is that we can
use max-flow algorithms to find the exact solution
in polynomial time — near-linear in practice (Cor-
men et al., 2001; Boykov and Kolmogorov, 2004).
3.2 Integer Linear Programming Approach
Here we follow the inference with classifiers ap-
proach by Roth and Yih (2004), solved with Inte-
ger Linear Programming (ILP). We have one ILP
problem per question–answer thread. We define a
set of binary variables, whose assignment will uni-
vocally define the classification of all comments in
the thread. In particular, we define a pair of vari-
ables for each answer: x
iG
and x
iB
, 1 ? i ? n.
Assigning 1 to x
iG
means that comment c
i
in the
thread is classified as Good; assigning it 0 means
that c
i
is not classified as Good. The same applies
to the other classes (here, only Bad). Also, we
have a pair of variables for each pair of comments
(to capture the pairwise relations): x
ijS
and x
ijD
,
1 ? i < j ? n. Assigning 1 to x
ijS
means that
c
i
and c
j
have the same label; assigning 0 to x
ijS
means that c
i
and c
j
do not have the same label.
The same interpretation holds for the other possi-
ble classes (in this case only Different).
4
Let c
iG
be the cost of classifying c
i
as Good,
c
ijS
be the cost of assigning the same labels to
c
i
and c
j
, etc. Following (Roth and Yih, 2004),
these costs are obtained from local classifiers by
taking log probabilities, i.e., c
iG
= ? log s
iG
,
c
ijS
= ? log s
ij
, etc. The goal of the ILP prob-
lem is to find an assignmentA to all variables x
iG
,
x
iB
, x
ijS
, x
ijD
that minimizes the cost function:
C(A) = ? ·
N
?
i=1
(c
iG
· x
iG
+ c
iB
· x
iB
) +
(1? ?) ·
N?1
?
i=1
N
?
j=i+1
(c
ijS
· x
ijS
+ c
ijD
· x
ijD
)
subject to the following constraints: (i) All vari-
ables are binary; (ii) One and only one label is
assigned to each comment or pair of comments;
(iii) The assignments to the comment variables
and to the comment-pair variables are consistent:
x
ijD
= x
iG
? x
jG
,?i, j 1 ? i < j ? n.
? ? [0, 1] is a parameter used to balance the con-
tribution of the two sources of information.
4 Local Classifiers
For classification, we use Maximum Entropy, or
MaxEnt, (Murphy, 2012), as it yields a probability
distribution over the class labels, which we then
use directly for the graph arcs and the ILP costs.
4.1 Good-vs-Bad Classifier
Our most important features measure the similar-
ity between the question (q) and the comment (c).
We compare lemmata and POS [1-4]-grams using
Jaccard (1901), containment (Lyon et al., 2001),
and cosine, as well as using some similarities from
DKPro (B¨ar et al., 2012) such as longest com-
mon substring (Allison and Dix, 1986) and greedy
string tiling (Wise, 1996). We also compute sim-
ilarity using partial tree kernels (Moschitti, 2006)
on shallow syntactic trees.
Forty-three Boolean features express whether
(i) c includes URLs or emails, the words “yes”,
“sure”, “no”, “neither”, “okay”, etc., as well as ‘?’
and ‘@’ or starts with “yes” (12 features); (ii) c
includes a word longer than fifteen characters (1);
4
Setting a binary variable for each class label is necessary
to have an objective function that is linear on the labels.
575
(iii) q belongs to each of the forum categories (26);
and (iv) c and q were posted by the same user (4).
An extra feature captures the length of c.
Four features explore whether c is close to a
comment by the user who asked the question, u
q
:
(i-ii) there is a comment by u
q
following c and
(not) containing an acknowledgment or (iii) con-
taining a question, or (iv) among the comments
preceding c there is one by u
q
asking a ques-
tion. We model dialogues by identifying conver-
sation chains between two users with three fea-
tures: whether c is at the beginning/middle/end
of a chain. There are copies of these features for
chains in which u
q
participates. Another feature
for c
u
i
checks whether the user u
i
wrote more than
one comment in the current thread. Three more
features fire for the first/middle/last comment by
u
i
. One extra feature counts the total number of
comments written by u
i
. Finally, there is a feature
modeling the position of c in the thread.
4.2 Same-vs-Different Classifier
We use the following types of features for a pair
of comments (c
i
, c
j
): (i) all the features from
the Good-vs-Bad classifier (i.e., we subtracted the
feature vectors representing the two comments,
|v
i
? v
j
|)
5
; (ii) the similarity features between the
two comments, sim(c
i
, c
j
); and (iii) the predic-
tion from the Good-vs-Bad classifiers on c
i
and c
j
(i.e., the scores for c
i
and c
j
, the product of the
two scores, and five boolean features specifying
whether any of c
i
and c
j
are predicted as Good,
Bad, and whether their predictions are identical).
5 Experiments and Evaluation
We performed standard pre-processing, and we
further filtered user’s signatures. All parameters
(e.g., Gaussian prior for MaxEnt and the mixing
? for the graph-cut and ILP) were tuned on the
development set. We also trained a second-order
linear-chain CRF to check the contribution of the
sequential relations between comments. We re-
port results on the official SemEval test set for all
methods. For the Same-vs-Different problem, we
explored a variant of training with three classes,
by splitting the Same class into Same-Good and
Same-Bad. At test time, the probabilities of these
two subclasses are added to get the probability of
Same and all the algorithms are run unchanged.
5
Subtracting vectors is standard in preference learn-
ing (Shen and Joshi, 2003). The absolute value is necessary
to emphasize comment differences instead of preferences.
Classifier P R F
1
Acc
baseline: Same 69.26
MaxEnt-2C 73.95 90.99 81.59 71.56
MaxEnt-3C 77.15 80.42 78.75 69.94
Table 2: Same-vs-Different classification. P, R,
and F
1
are calculated with respect to Same.
Table 2 shows the results for the Same-vs-
Different classification. We can see that the two-
class MaxEnt-2C classifier works better than the
three-class MaxEnt-3C. MaxEnt-3C has more bal-
anced P and R, but loses in both F
1
and accu-
racy. MaxEnt-2C is very skewed towards the ma-
jority class, but performs better due to the class
imbalance. Overall, it seems very difficult to learn
with the current features, and both methods only
outperform the majority-class baseline by a small
margin. Yet, while the overall accuracy is low,
note that the graph-cut/ILP inference allows us to
recover from some errors, because if nearby utter-
ances are clustered correctly, the wrong decisions
should be outvoted by correct ones.
The results for Good-vs-Bad are shown in Ta-
ble 3. On the top are the best systems at SemEval-
2015 Task 3. We can see that our MaxEnt classifier
is competitive: it shows higher accuracy than two
of them, and the highest F
1
overall.
6
System P R F
1
Acc
Top-3 at SemEval-2015 Task 3
JAIST 80.23 77.73 78.96 79.10
HITSZ-ICRC 75.91 77.13 76.52 76.11
QCRI 74.33 83.05 78.45 76.97
Instance Classifiers
MaxEnt 75.67 84.33 79.77 78.43
Linear Chain Classifiers
CRF 74.89 83.45 78.94 77.53
Global Inference Classifiers
ILP 77.04 83.53 80.15 79.14‡
Graph-cut 78.30 82.93 80.55 79.80‡
ILP-3C 78.07 80.42 79.23 78.73
Graph-cut-3C 78.26 81.32 79.76 79.19†
Table 3: Good-vs-Bad classification. ‡ and †
mark statistically significant differences in accu-
racy compared to the baseline MaxEnt classifier
with confidence levels of 99% and 95%, respec-
tively (randomized test).
6
This comparison is not strictly fair as the SemEval sys-
tems were trained to predict three classes, and here we
remapped them to two. We just want to show that our base-
line system is very strong.
576
The CRF model is worse than MaxEnt on all
measures, which suggests that the sequential infor-
mation does not help. This can be because many
interactions between comments are long-distance
and there are gaps in the threads due to the anno-
tation procedure at SemEval (Nakov et al., 2015).
However, global inference with graph-cut and
ILP improves both F
1
and accuracy, mostly due to
better recall. Graph-cut works better than ILP as it
has higher precision, which helps F
1
and accuracy.
Both yield statistically significant improve-
ments over the MaxEnt classifier; they also im-
prove over the state-of-the-art JAIST system. Note
that the devtest-tuned values of ? for graph-cut
and ILP put much lower weight to the Same-vs-
Different component (values are 0.95 and 0.91, re-
spectively). Finally, as expected, using the predic-
tions of MaxEnt-2C in the global classifiers is bet-
ter than using those from MaxEnt-3C.
Q: I have a female friend who is leaving for a teaching job
in Qatar in January. What would be a useful portable
gift to give her to take with her?
A
1
A couple of good best-selling novels. It’s hard to find
much here in Doha in the way of books.
Local: Good, Global: Good, Human: Good
A
2
ipod to entertain herself in case of boredom... a lot of
patience for her students...
Local: Good, Global: Good, Human: Good
A
3
Thanks, please keep suggestions coming, would like to
send her off with a useful gift.
Local: Bad, Global: Bad, Human: Bad
A
6
Bacon. Nice bread, bacon, bacon, errmmm bacon and a
pork joint..
Local: Bad, Global: Good, Human: Good
A
9
Couple of good novels, All time favorite movies, ..
Local: Bad, Global: Good, Human: Good
A
11
Ditto on the books and dvd’s. Excedrin.
Local: Bad, Global: Bad, Human: Good
A
12
Ditto on the bacon, pork sausage, pork chops, ham,..can
you tell we miss pork! I think getting a care package
together: her favorite perfume; shampoo; conditioner;
glycerin soaps; set of DVDs of her favorite TV series..
Oh, and did I mention she should pack PATIENCE?
Local: Bad, Global: Good, Human: Good
Figure 2: An excerpt of a thread with decisions
by local and global classifiers, and humans.
6 Discussion
We manually examined a number of examples
where our global classfier could successfully re-
cover from the errors made by the local classifier,
and where it failed to do so. In Figure 2, we show
the classification decisions of our local and global
(graph-cut) classifiers along with the human anno-
tations for an excerpt of a thread.
For example, consider answers A
6
, A
9
, and
A
12
, which were initially misclassified as Bad
by the local classifier, but later recovered by the
global classifier exploiting the pairwise informa-
tion. In this case, the votes received by these an-
swers from other Good answers in the thread for
being in the same class won against the votes re-
ceived from other Bad answers.
Now consider A
11
, which our method failed to
classify correctly as Good. Our investigation re-
vealed that in this case the votes from the Bad an-
swers won against the votes from the Good ones.
The accuracy of the pairwise classifier has proven
to be crucial for the performance of our over-
all framework. We probably need more informa-
tive features (e.g., textual entailment and semantic
similarity to capture the relation between books
and novels, movies and DVDs, etc.) in order to
improve the pairwise classification performance.
7 Conclusion and Future Work
We have investigated the use of thread-level in-
formation for answer selection in CQA. We have
shown that using a pairwise classifier that predicts
whether two comments should get the same label,
followed by a graph-cut (or ILP) global inference
improves significantly over a very strong baseline
as well as over the state of the art. We have fur-
ther shown that using a linear-chain CRF model
does not help, probably because many interactions
between comments are long distance.
In future work, we would like to improve the
pairwise classifiers with richer features, as this is
currently the bottleneck for improving the perfor-
mance in the global model. We further plan to test
our framework on other CQA datasets, including
on other languages.
7
Last but not least, we are in-
terested in extending this research with even more
global information, e.g., by modeling global deci-
sion consistency across multiple threads.
Acknowledgments
This research was performed by the Arabic Lan-
guage Technologies (ALT) group at the Qatar
Computing Research Institute (QCRI), HBKU,
part of Qatar Foundation. It is part of the Inter-
active sYstems for Answer Search (Iyas) project,
which is developed in collaboration with MIT-
CSAIL.
7
SemEval-2015 Task 3 had an Arabic subtask, but there
the answers were not coming from the same thread.
577
References
Lloyd Allison and Trevor Dix. 1986. A bit-string
longest-common-subsequence algorithm. Inf. Pro-
cess. Lett., 23(6):305–310, December.
Daniel B¨ar, Chris Biemann, Iryna Gurevych, and
Torsten Zesch. 2012. UKP: Computing seman-
tic textual similarity by combining multiple content
similarity measures. In Proceedings of the Sixth In-
ternational Workshop on Semantic Evaluation, Se-
mEval ’12, pages 435–440, Montr´eal, Canada.
Alberto Barr´on-Cede˜no, Simone Filice, Giovanni
Da San Martino, Shafiq Joty, Llu´?s M`arquez, Preslav
Nakov, and Alessandro Moschitti. 2015. Thread-
level information for comment classification in com-
munity question answering. In Proceedings of the
53rd Annual Meeting of the Association for Compu-
tational Linguistics and the 7th International Joint
Conference on Natural Language Processing, ACL-
IJCNLP ’15, pages 687–693, Beijing, China.
Yuri Boykov and Vladimir Kolmogorov. 2004. An
experimental comparison of min-cut/max-flow al-
gorithms for energy minimization in vision. IEEE
Trans. Pattern Anal. Mach. Intell., 26(9):1124–
1137, September.
Thomas H. Cormen, Clifford Stein, Ronald L. Rivest,
and Charles E. Leiserson. 2001. Introduction to Al-
gorithms. McGraw-Hill Higher Education.
Yongshuai Hou, Cong Tan, Xiaolong Wang, Yaoyun
Zhang, Jun Xu, and Qingcai Chen. 2015. HITSZ-
ICRC: Exploiting classification approach for answer
selection in community question answering. In Pro-
ceedings of the 9th International Workshop on Se-
mantic Evaluation, SemEval ’15, pages 196–202,
Denver, CO.
Paul Jaccard. 1901.
´
Etude comparative de la distribu-
tion florale dans une portion des Alpes et des Jura.
Bulletin del la Soci´et´e Vaudoise des Sciences Na-
turelles, 37:547–579.
John Lafferty, Andrew McCallum, and Fernando
Pereira. 2001. Conditional random fields: Prob-
abilistic models for segmenting and labeling se-
quence data. In Proceedings of the Eighteenth
International Conference on Machine Learning,
ICML ’01, pages 282–289, San Francisco, CA.
Caroline Lyon, James Malcolm, and Bob Dickerson.
2001. Detecting short passages of similar text in
large document collections. In Proceedings of the
Conference on Empirical Methods in Natural Lan-
guage Processing, EMNLP ’01, pages 118–125,
Pittsburgh, PA.
Alessandro Moschitti. 2006. Efficient convolution ker-
nels for dependency and constituent syntactic trees.
In Proceedings of the 17th European Conference
on Machine Learning, ECML ’06, pages 318–329,
Berlin, Germany.
Kevin Murphy. 2012. Machine Learning A Probabilis-
tic Perspective. The MIT Press.
Preslav Nakov, Llu´?s M`arquez, Walid Magdy, Alessan-
dro Moschitti, Jim Glass, and Bilal Randeree. 2015.
SemEval-2015 task 3: Answer selection in com-
munity question answering. In Proceedings of the
9th International Workshop on Semantic Evaluation,
SemEval ’15, pages 269–281, Denver, CO.
Massimo Nicosia, Simone Filice, Alberto Barr´on-
Cede˜no, Iman Saleh, Hamdy Mubarak, Wei Gao,
Preslav Nakov, Giovanni Da San Martino, Alessan-
dro Moschitti, Kareem Darwish, Llu´?s M`arquez,
Shafiq Joty, and Walid Magdy. 2015. QCRI: An-
swer selection for community question answering -
experiments for Arabic and English. In Proceedings
of the 9th International Workshop on Semantic Eval-
uation, SemEval ’15, pages 203–209, Denver, CO.
Bo Pang and Lillian Lee. 2004. A sentimental educa-
tion: Sentiment analysis using subjectivity summa-
rization based on minimum cuts. In Proceedings of
the 42nd Annual Meeting on Association for Com-
putational Linguistics, ACL ’04, pages 271–278,
Barcelona, Spain.
Zhonghua Qu and Yang Liu. 2011. Finding problem
solving threads in online forum. In Proceedings of
5th International Joint Conference on Natural Lan-
guage Processing, IJCNLP ’11, pages 1413–1417,
Chiang Mai, Thailand.
Dan Roth and Wen-tau Yih. 2004. A linear program-
ming formulation for global inference in natural lan-
guage tasks. In Proceedings of the Eighth Confer-
ence on Computational Natural Language Learning,
CoNLL ’04, pages 1–8, Boston, MA.
Libin Shen and Aravind K. Joshi. 2003. An SVM
based voting algorithm with application to parse
reranking. In Proceedings of the Seventh Confer-
ence on Natural Language Learning, CONLL ’03,
pages 9–16, Edmonton, Canada.
Michael Wise. 1996. Yap3: Improved detection of
similarities in computer program and other texts. In
Proceedings of the Twenty-seventh SIGCSE Tech-
nical Symposium on Computer Science Education,
SIGCSE ’96, pages 130–134, New York, NY.
Xiaoqiang Zhou, Baotian Hu, Qingcai Chen, Buzhou
Tang, and Xiaolong Wang. 2015a. Answer se-
quence learning with neural networks for answer se-
lection in community question answering. In Pro-
ceedings of the 53rd Annual Meeting of the Associa-
tion for Computational Linguistics, pages 713–718,
Beijing, China.
Xiaoqiang Zhou, Baotian Hu, Jiaxin Lin, Yang xiang,
and Xiaolong Wang. 2015b. ICRC-HIT: A deep
learning based comment sequence labeling system
for answer selection challenge. In Proceedings of
the 9th International Workshop on Semantic Evalu-
ation, SemEval ’15, pages 210–214, Denver, CO.
578
