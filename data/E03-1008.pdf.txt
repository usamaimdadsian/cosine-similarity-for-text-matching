Bootstrapping Statistical Parsers from Small Datasets
Mark Steedman*, Miles Osborne*, Anoop Sarkar% Stephen Clark*, Rebecca Hwa.
Julia Hockenmaier*, Paul Ruhlent, Steven BakerI and Jeremiah Crimt
*Division of Informatics, University of Edinburgh
fsteedman,stephenc,julia,osbornel@cogsci.ed.ac.uk
'F School of Computing Science, Simon Fraser University anoop@cs . sfu . ca
Institute for Advanced Computer Studies, University of Maryland hwa@umia c s . umd . edu
tCenter for Language and Speech Processing, Johns Hopkins University
jcrim@jhu.edu ,ruhlen@cs.jhu.edu
IDepartment of Computer Science, Cornell University sdb2 2 @cornell .edu
Abstract
We present a practical co-training
method for bootstrapping statistical
parsers using a small amount of manu-
ally parsed training material and a much
larger pool of raw sentences. Experi-
mental results show that unlabelled sen-
tences can be used to improve the per-
formance of statistical parsers. In addi-
tion, we consider the problem of boot-
strapping parsers when the manually
parsed training material is in a differ-
ent domain to either the raw sentences or
the testing material. We show that boot-
strapping continues to be useful, even
though no manually produced parses
from the target domain are used.
1 Introduction
In this paper we describe how co-training (Blum
and Mitchell, 1998) can be used to boot-
strap a pair of statistical parsers from a small
amount of annotated training data. Co-training
is a wealdy supervised learning algorithm in
which two (or more) learners are iteratively re-
trained on each other's output. It has been ap-
plied to problems such as word-sense disam-
biguation (Yarowsky, 1995), web-page classifica-
tion (Blum and Mitchell, 1998) and named-entity
recognition (Collins and Singer, 1999). However,
these tasks typically involved a small set of la-
bels (around 2-3) and a relatively small param-
eter space. It is therefore instructive to consider
co-training for more complex models. Compared
to these earlier models, a statistical parser has a
larger parameter space, and instead of class labels,
it produces recursively built parse trees as output.
Previous work in co-training statistical
parsers (Sarkar, 2001) used two components of
a single parsing framework (that is, a parser and
a supertagger for that parser). In contrast, this
paper considers co-training two diverse statistical
parsers: the Collins lexicalized PCFG parser and
a Lexicalized Tree Adjoining Grammar (LTAG)
parser.
Section 2 reviews co-training theory. Section 3
considers how co-training applied to training sta-
tistical parsers can be made computationally vi-
able. In Section 4 we show that co-training out-
performs self-training, and that co-training is most
beneficial when the seed set of manually created
parses is small. Section 4.4 shows that co-training
is possible even when the set of initially labelled
data is drawn from a different distribution to either
the unlabelled training material or the test set; that
is, we show that co-training can help in porting a
parser from one genre to another. Finally, section 5
reports summary results of our experiments.
2 Co-training: theory
Co-training can be informally described in the fol-
lowing manner (Blum and Mitchell, 1998):
331
• Pick two (or more) "views" of a classification
problem.
• Build separate models for each of these
"views" and train each model on a small set
of labelled data.
• Sample from an unlabelled data set to find
examples for each model to label indepen-
dently (Nigam and Ghani, 2000).
• Those examples labelled with high confi-
dence are selected to be new training exam-
ples (Collins and Singer, 1999; Goldman and
Zhou, 2000).
• The models are re-trained on the updated
training examples, and the procedure is iter-
ated until the unlabelled data is exhausted.
Effectively, by picking confidently labelled data
from each model to add to the training data, one
model is labelling data for the other. This is in
contrast to self-training, in which a model is re-
trained only on the labelled examples that it pro-
duces (Nigam and Ghani, 2000).
Blum and Mitchell prove that, when the
two views are conditionally independent given
the label, and each view is sufficient for
learning the task, co-training can improve
an initial weak learner using unlabelled data.
Dasgupta et al. (2002) extend the theory of co-
training by showing that, by maximising their
agreement over the unlabelled data, the two learn-
ers make few generalisation errors (under the same
independence assumption adopted by Blum and
Mitchell). Abney (2002) argues that this assump-
tion is extremely restrictive and typically violated
in the data, and he proposes a weaker indepen-
dence assumption. Abney also presents a greedy
algorithm that maximises agreement on unlabelled
data.
Goldman and Zhou (2000) show that, through
careful selection of newly labelled examples, co-
training can work even when the classifiers' views
do not fully satisfy the independence assumption.
3 Co -training: practice
To apply the theory of co-training to parsing, we
need to ensure that each parser is capable of learn-
ing the parsing task alone and that the two parsers
have different views. We could also attempt to
maximise the agreement of the two parsers over
unlabelled data, using a similar approach to that
given by Abney. This would be computation-
ally very expensive for parsers, however, and we
therefore propose some practical heuristics for de-
termining which labelled examples to add to the
training set for each parser.
Our approach is to decompose the problem into
two steps. First, each parser assigns a score for
every unlabelled sentence it parsed according to
some scoring function, f, estimating the reliabil-
ity of the label it assigned to the sentence (e.g.
the probability of the parse). Note that the scor-
ing functions used by the two parsers do not nec-
essarily have to be the same. Next, a selection
method decides which parser is retrained upon
which newly parsed sentences. Both scoring and
selection phases are controlled by a simple incre-
mental algorithm, which is detailed in section 3.2.
3.1 Scoring functions and selection methods
An ideal scoring function would tell us the true ac-
curacy rates (e.g., combined labelled precision and
recall scores) of the trees that the parser produced.
In practice, we rely on computable scoring func-
tions that approximate the true accuracy scores,
such as measures of uncertainty. In this paper we
use the probability of the most likely parse as the
scoring function:
fprob(w) = max Pr (v,w)
vcv
(1)
where w is the sentence and V is the set of parses
produced by the parser for the sentence. Scor-
ing parses using parse probability is motivated by
the idea that parse probability should increase with
parse correctness.
During the selection phase, we pick a subset of
the newly labelled sentences to add to the training
sets of both parsers. That is, a subset of those sen-
tences labelled by the LTAG parser is added to the
training set of the Collins PCFG parser, and vice
versa. It is important to find examples that are re-
liably labelled by the teacher as training data for
the student. The term teacher refers to the parser
providing data, and student to the parser receiving
332
A and B are two different parsers.
MA and ivriB are models of A and B at step i.
U is a large pool of unlabelled sentences.
U i is a small cache holding subset of U at step i.
L is the manually labelled seed data.
L'A and LiB are the labelled training examples
for A and B at step i.
Initialise:
L°A L°B L.
Mi°1
	Train(A, LcA'
4 Train(B , L °B )
Loop:
U 	 Add unlabeled sentences from U.
MiA and M parse the sentences in U i
and assign scores to them according to
their scoring functions JA and fB.
Select new parses {PA} and {PB}
according to some selection method S,
which uses the scores from fA and fB.
VA+ I- is LiA
 augmented with {PB}
L i„6h 1- is 4 augmented with {PA}
Mi+ 1-
	Train(A L i+ 1 )A	 A
Mi+1
	Train(B L i+ 1 )B
Figure 1: The pseudo-code for the co-training al-
gorithm
data. In the co-training process the two parsers
alternate between teacher and student. We use a
method which builds on this idea, Stop-n, which
chooses those sentences (using the teacher's la-
bels) that belong to the teacher's n-highest scored
sentences.
For this paper we have used a simple scoring
function and selection method, but there are alter-
natives. Other possible scoring functions include a
normalized version of fprob which does not penal-
ize longer sentences, and a scoring function based
on the entropy of the probability distribution over
all parses returned by the parser. Other possible
selection methods include selecting examples that
one parser scored highly and another parser scored
lowly, and methods based on disagreements on
the label between the two parsers. These meth-
ods build on the idea that the newly labelled data
should not only be reliably labelled by the teacher,
but also be as useful as possible for the student.
3.2 Co-training algorithm
The pseudo-code for the co-training process is
given in Figure 1, and consists of two different
parsers and a central control that interfaces be-
tween the two parsers and the data. At each
co-training iteration, a small set of sentences is
drawn from a large pool of unlabelled sentences
and stored in a cache. Both parsers then attempt
to parse every sentence in the cache. Next, a sub-
set of the sentences newly labelled by one parser is
added to the training data of the other parser, and
vice versa.
The general control flow of our system is similar
to the algorithm described by Blum and Mitchell;
however, there are some differences in our treat-
ment of the training data. First, the cache is
flushed at each iteration: instead of only replac-
ing just those sentences moved from the cache, the
entire cache is refilled with new sentences. This
aims to ensure that the distribution of sentences in
the cache is representative of the entire pool and
also reduces the possibility of forcing the central
control to select training examples from an entire
set of unreliably labelled sentences. Second, we
do not require the two parsers to have the same
training sets. This allows us to explore several se-
lection schemes in addition to the one proposed by
Blum and Mitchell.
4 Experiments
In order to conduct co-training experiments be-
tween statistical parsers, it was necessary to
choose two parsers that generate comparable out-
put but use different statistical models. We there-
fore chose the following parsers:
1. The Collins lexicalized PCFG
parser (Collins, 1999), model 2. Some
code for (re)training this parser was added to
make the co-training experiments possible.
We refer to this parser as Collins-CFG.
2. The Lexicalized Tree Adjoining Grammar
(LTAG) parser of Sarkar (2001), which we
refer to as the LTAG parser.
In order to perform the co-training experiments
reported in this paper, LTAG derivation events
333
Collins-CFG LTAG
Bi-lexical dependencies are between
lexicalized nonterminals
Bi-lexical dependencies are between
elementary trees
Can produce novel elementary
trees for the LTAG parser
Can produce novel bi-lexical
dependencies for Collins-CFG
When using small amounts of seed data,
abstains less often than LTAG
When using small amounts of seed data,
abstains more often than Collins-CFG
Figure 2 .
 Summary of the different views given by the Collins-CFG parser and the LTAG parser
were extracted from the head-lexicalized parse
tree output produced by the Collins-CFG parser.
These events were used to retrain the statistical
model used in the LTAG parser. The output of the
LTAG parser was also modified in order to provide
input for the re-training phase in the Collins-CFG
parser. These steps ensured that the output of the
Collins-CFG parser could be used as new labelled
data to re-train the LTAG parser and vice versa.
The domains over which the two models op-
erate are quite distinct. The LTAG model uses
tree fragments of the final parse tree and com-
bines them together, while the Collins-CFG model
operates on a much smaller domain of individual
lexicalized non-terminals. This provides a mech-
anism to bootstrap information between these two
models when they are applied to unlabelled data.
LTAG can provide a larger domain over which
bi-lexical information is defined due to the arbi-
trary depth of the elementary trees it uses, and
hence can provide novel lexical relationships for
the Collins-CFG model, while the Collins-CFG
model can paste together novel elementary trees
for the LTAG model.
A summary of the differences between the two
models is given in Figure 2, which provides an in-
formal argument for why the two parsers provide
contrastive views for the co-training experiments.
Of course there is still the question of whether the
two parsers really are independent enough for ef-
fective co-training to be possible; in the results
section we show that the Collins-CFG parser is
able to learn useful information from the output
of the LTAG parser.
Collins-CFG Learning Curve
90
88
86
84
82
80
78
76
100 	 5000 	 10000 	 15000 	 20000 	 25000 	 30000 	 35000 	 40000
Number of Sentences
Figure 3: The learning curve for the Collins-CFG
parser in terms of F-scores for increasing amounts
of manually annotated training data. Performance
for sentences < 40 words is plotted.
4.1 Experimental setup
Figure 3 shows how the performance of the
Collins-CFG parser varies as the amount of man-
ually annotated training data (from the Wall Street
Journal (WSJ) Penn Treebank (Marcus et al.,
1993)) is increased. The graph shows a rapid
growth in accuracy which tails off as increasing
amounts of training data are added. The learn-
ing curve shows that the maximum payoff from
co-training is likely to occur between 500 and
1,000 sentences. Therefore we used two sizes of
seed data: 500 and 1,000 sentences, to see if co-
training could improve parser performance using
these small amounts of labelled seed data. For
reference, Figure 4 shows a similar curve for the
LTAG parser.
Each parser was first initialized with some la-
belled seed data from the standard training split
(sections 2 to 21) of the WSJ Penn Treebank.
334
LTAG self —=
CFG self x
s`ocs,040,,,,, ,,,,ex4„,"cxXsx.9eNvx.8
[TAG Learning Curve Self-training results
d,92
76.5
76
75.5
75
74.5
74
73.5
73
72.5
72
71.5
5000 	 10000 	 15000 	 20000 	 25000 	 30000 	 35000 	 40000 	 10 	 20 	 30 	 40 	 50 	 60 	 70 	 80 	 90 	 100
Number of Sentences 	 Co-training rounds
Figure 4: The learning curve for the LTAG parser
in terms of F-scores for increasing amounts of
training data. Performance when evaluated on sen-
tences of length < 40 words is plotted.
Evaluation was in terms of Parseval (Black et al.,
1991), using a balanced F-score over labelled con-
stituents from section 0 of the Treebank. I The F-
score values are reported for each iteration of co-
training on the development set (section 0 of the
Treebank). Since we need to parse all sentences in
section 0 at each iteration, in the experiments re-
ported in this paper we only evaluated one of the
parsers, the Collins-CFG parser, at each iteration.
All results we mention (unless stated otherwise)
are F-scores for the Collins-CFG parser.
4.2 Self-training experiments
Self-training experiments were conducted in
which each parser was retrained on its own out-
put. Self-training provides a useful comparison
with co-training because any difference in the re-
sults indicates how much the parsers are benefit-
ing from being trained on the output of another
parser. This experiment also gives us some insight
into the differences between the two parsing mod-
els. Self-training was used by Charniak (1997),
where a modest gain was reported after re-training
his parser on 30 million words.
The results are shown in Figure 5. Here, both
parsers were initialised with the first 500 sentences
from the standard training split (sections 2 to 21)
of the WSJ Penn Treebank. Subsequent unlabelled
2xLRxLP 1 F-score =	 where LP is labelled precision andL,R+LP
LR is labelled recall.
Figure 5: Self-training results for LTAG and
Collins-CFG. The upper curve is for Collins-CFG;
the lower curve is for LTAG.
sentences were also drawn from this split. Dur-
ing each round of self-training, 30 sentences were
parsed by each parser, and each parser was re-
trained upon the 20 self-labelled sentences which
it scored most highly (each parser using its own
joint probability (equation 1) as the score).
The results vary significantly between the
Collins-CFG and the LTAG parser, which lends
weight to the argument that the two parsers are
largely independent of each other. It also shows
that, at least for the Collins-CFG model, a minor
improvement in performance can be had from self-
training. The LTAG parser, by contrast, is hurt by
self-training
4.3 Co-training experiments
The first co-training experiment used the first 500
sentences from sections 2-21 of the Treebank as
seed data, and subsequent unlabelled sentences
were drawn from the remainder of these sections.
During each co-training round, the LTAG parser
parsed 30 sentences, and the 20 labelled sentences
with the highest scores (according to the LTAG
joint probability) were added to the training data
of the Collins-CFG parser. The training data of
the LTAG parser was augmented in the same way,
using the 20 highest scoring parses from the set
of 30, but using the Collins-CFG parser to label
the sentences and provide the joint probability for
scoring.
Figure 6 gives the results for the Collins-CFG
parser, and also shows the self-training curve for
335
70 BO 90 10010 	 20 	 30 	 40 	 50 	 60
Co-training rounds
77.5
76.5
76
75.5
75
74.5
0
78
77
20 	 30 	 40 	 50 	 60
Co-training rounds
70 BO 90 100
20 	 30 	 40 	 50 	 60
	
70
	
80
	
90
	
100
Co-training rounds
80
79.5
79
78.5
78
77.5
77
76.5
76
75.5
75
74.5
0
Co-training versus self-training 	 Cross-genre co-training
Figure 6: Co-training compared with self-training.
The upper curve is for co-training between
Collins-CFG and LTAG; the lower curve is self-
training for Collins-CFG.
The effect of seed size
Figure 7: The effect of varying seed size on CO-
training. The upper curve is for 1,000 sentences
labelled seed data; the lower curve is for 500 sen-
tences.
comparison.2 The graph shows that co-training
results in higher performance than self-training.
The graph also shows that co-training perfor-
mance levels out after around 80 rounds, and
then starts to degrade. The likely reason for
this dip is noise in the parse trees added by co-
training. Pierce and Cardie (2001) noted a similar
behaviour when they co-trained shallow parsers.
2 Figures 6, 7 and 8 report the performance of the Collins-
CFG parser. We do not report the LTAG parser performance
in this paper as evaluating it at the end of each co-training
round was too time consuming. We did track LTAG perfor-
mance on a subset of the WSJ Section 0 and can confirm that
LTAG performance also improves as a result of co-training.
Figure 8: Cross-genre bootstrapping results. The
upper curve is for 1,000 sentences labelled data
from Brown plus 100 WSJ sentences; the lower
curve only uses 1,000 sentences from Brown.
The second co-training experiment was the
same as the first, except that more seed data was
used: the first 1,000 sentences from sections 2-21
of the Treebank. Figure 7 gives the results, and,
for comparison, also shows the previous perfor-
mance curve for the 500 seed set experiment. The
key observation is that the benefit of co-training is
greater when the amount of seed material is small.
Our hypothesis is that, when there is a paucity of
initial seed data, coverage is a major obstacle that
co-training can address. As the amount of seed
data increases, coverage becomes less of a prob-
lem, and the co-training advantage is diminished.
This means that, when most sentences in the test-
ing set can be parsed, subsequent changes in per-
formance come from better parameter estimates.
Although co-training boosts the performance of
the parser using the 500 seed sentences from 75%
to 77.8% (the performance level after 100 rounds
of co-training), it does not achieve the level of
performance of a parser trained on 1,000 seed
sentences. Some possible explanations are: that
the newly labelled sentences are not reliable (i.e.,
they contain too many errors); that the sentences
deemed reliable are not informative training exam-
ples; or a combination of both factors.
4.4 Cross genre experiments
This experiment examines whether co-training
can be used to boost performance when the un-
336
labelled data are taken from a different source
than the initial seed data. Previous experiments
in Gildea (2001) have shown that porting a statis-
tical parser from a source genre to a target genre is
a non-trivial task. Our two different sources were
the parsed section of the Brown corpus and the
Penn Treebank WSJ. Unlike the WSJ, the Brown
corpus does not contain newswire material, and so
the two sources differ from each other in terms of
vocabulary and syntactic constructs.
1,000 annotated sentences from the Brown sec-
tion of the Penn Treebank were used as the seed
data. Co-training then proceeds using the WSJ. 3
Note that no manually created parses in the WSJ
domain are used by the parser, even though it is
evaluated using WSJ material. In Figure 8, the
lower curve shows performance for the Collins-
CFG parser (again evaluated on section 0). The
difference in corpus domain does not hinder co-
training. The parser performance is boosted from
75% to 77.3%. Note that most of the improvement
is within the first 5 iterations. This suggests that
the parsing model may be adapting to the vocabu-
lary of the new domain.
We also conducted an experiment in which the
initial seed data was supplemented with a tiny
amount of annotated data (100 manually anno-
tated WSJ sentences) from the domain of the un-
labelled data. This experiment simulates the situ-
ation where there is only a very limited amount of
labelled material in the novel domain. The upper
curve in Figure 8 shows the outcome of this ex-
periment. Not surprisingly, the 100 additional la-
belled WSJ sentences improved the initial perfor-
mance of the parser (to 76.7%). While the amount
of improvement in performance is less than the
previous case, co-training provides an additional
boost to the parsing performance, to 78.7%.
5 Experimental summary
The various experiments are summarised in Ta-
ble 1. As is customary in the statistical parsing
literature, we view all our previous experiments
using section 0 of the Penn Treebank WSJ as con-
tributing towards development. Here we report on
system performance on unseen material (namely
3 The Brown corpus was chosen as the seed data and the
WSJ as the unlabelled data for convenience.
Experiment Before After
WSJ Self-training 74.4 74.3
WSJ (500) Co-training 74.4 76.9
WSJ (1k) Co-training 78.6 79.0
Brown co-training 73.6 76.8
Brown+ small WSJ co-training 75.4 78.2
Table 1: Results on section 23 for the Collins-CFG
parser after co-training with the LTAG parser
section 23 of the WSJ). We give F-score results
for the Collins-CFG parser before and after co-
training for section 23.
The results show a modest improvement un-
der each co-training scenario, indicating that, for
the Collins-CFG parser, there is useful informa-
tion to be had from the output of the LTAG
parser. However, the results are not as dramatic
as those reported in other co-training papers, such
as Blum and Mitchell (1998) for web-page classi-
fication and Collins and Singer (1999) for named-
entity recognition. A possible reason is that pars-
ing is a much harder task than these problems.
An open question is whether co-training can
produce results that improve upon the state-of-the-
art in statistical parsing. Investigation of the con-
vergence curves (Figures 3 and 4) as the parsers
are trained upon more and more manually-created
treebank material suggests that, with the Penn
Treebank, the Collins-CFG parser has nearly con-
verged already. Given 40,000 sentences of la-
belled data, we can obtain a projected value of how
much performance can be improved with addi-
tional reliably labelled data. This projected value
was obtained by fitting a curve to the observed
convergence results using a least-squares method
from MAT LAB.
When training data is projected to a size of
400K manually created Treebank sentences, the
performance of the Collins-CFG parser is pro-
jected to be 89.2% with an absolute upper bound
of 89.3%. This suggests that there is very lit-
tle room for performance improvement for the
Collins-CFG parser by simply adding more la-
belled data (using co-training or other bootstrap-
ping methods or even manually). However, mod-
els whose parameters have not already converged
337
might benefit from co-training For instance, when
training data is projected to a size of 400K manu-
ally created Treebank sentences, the performance
of the LTAG statistical parser would be 90.4%
with an absolute upper bound of 91.6%. Thus, a
bootstrapping method might improve performance
of the LTAG statistical parser beyond the current
state-of-the-art performance on the Treebank.
6 Conclusion
In this paper, we presented an experimental study
in which a pair of statistical parsers were trained
on labelled and unlabelled data using co-training
Our results showed that simple heuristic methods
for choosing which newly parsed sentences to add
to the training data can be beneficial. We saw that
co-training outperformed self-training, that it was
most beneficial when the seed set was small, and
that co-training was possible even when the seed
material was from another distribution to both the
unlabelled material or the testing set. This final
result is significant as it bears upon the general
problem of having to build models when little or
no labelled training material is available for some
new domain.
Co-training performance may improve if we
consider co-training using sub-parses. This is be-
cause a parse tree is really a large collection of
individual decisions, and retraining upon an entire
tree means committing to all such decisions. Our
ongoing work is addressing this point, largely in
terms of re-ranked parsers. Finally, future work
will also track comparative performance between
the LTAG and Collins-CFG models.
Acknowledgements
This work has been supported, in part, by the
NSF/DARPA funded 2002 Language Engineering
Workshop at Johns Hopkins University. We would
like to thank Michael Collins, Andrew McCallum,
and Fernando Pereira for helpful discussions, and
the reviewers for their comments on this paper.
References
Steven Abney. 2002. Bootstrapping. In Proceedings of the
40th Annual Meeting of the Association for Computational
Linguistics, pages 360-367, Philadelphia, PA.
E. Black, S. Abney, D. Flickinger, C. Gdaniec, R. Grishman,
P. Harrison, D. Hindle, R. Ingria, F. Jelinek, J. Klavans,
M. Liberman, M. Marcus, S. Roukos, B. Santorini, and
T. Strzalkowski. 1991. A procedure for quantitatively
comparing the syntactic coverage of English grammars.
In Proceedings of DARPA Speech and Natural Language
Workshop, pages 306-311.
Avrim Blum and Tom Mitchell. 1998. Combining labeled
and unlabeled data with co-training. In Proceedings of
the 11th Annual Conference on Computational Learning
Theory, pages 92-100, Madisson, WI.
Eugene Charniak. 1997. Statistical parsing with a context-
free grammar and word statistics. In Proceedings of the
AAAL pages 598-603, Menlo Park, CA. AAAI Press/MIT
Press.
Michael Collins and Yoram Singer. 1999. Unsupervised
models for named entity classification. In Proceedings of
the Empirical Methods in NLP Conference, pages 100—
110, University of Maryland, MD.
Michael Collins. 1999. Head-Driven Statistical Models for
Natural Language Parsing. Ph.D. thesis, University of
Pennsylvania.
Sanjoy Dasgupta, Michael Littman, and David McAllester.
2002. PAC generalization bounds for co-training. In
T. G. Dietterich, S. Becker, and Z. Ghahramani, editors,
Advances in Neural Information Processing Systems 14,
Cambridge, MA. MIT Press.
Daniel Gildea. 2001. Corpus variation and parser perfor-
mance. In Proceedings of the Empirical Methods in NLP
Conference, Pittsburgh, PA.
Sally Goldman and Yan Zhou. 2000. Enhancing supervised
learning with unlabeled data. In Proceedings of the 17th
International Conference on Machine Learning, Stanford,
CA.
Mitchell Marcus, Beatrice Santorini, and Mary Ann
Marcinkiewicz. 1993. Building a large annotated corpus
of English: the Penn Treebank. Computational Linguis-
tics, 19(2): 313-330.
Kamal Nigam and Rayid Ghani. 2000. Analyzing the effec-
tiveness and applicability of co-training. In Proceedings
of the 9th International Conference on Information and
Knowledge Management, pages 86-93.
David Pierce and Claire Cardie. 2001. Limitations of co-
training for natural language learning from large datasets.
In Proceedings of the Empirical Methods in NLP Confer-
ence, Pittsburgh, PA.
Anoop Sarluu-. 2001. Applying co-training methods to statis-
tical parsing. In Proceedings of the 2nd Annual Meeting
of the NAACL, pages 95-102, Pittsburgh, PA.
David Yarowsky. 1995. Unsupervised word sense disam-
biguation rivaling supervised methods. In Proceedings of
the 33rd Annual Meeting of the Association for Computa-
tional Linguistics, pages 189-196, Cambridge, MA.
338
