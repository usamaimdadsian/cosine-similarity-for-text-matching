Proceedings of the 2012 Joint Conference on Empirical Methods in Natural Language Processing and Computational Natural
Language Learning, pages 94–104, Jeju Island, Korea, 12–14 July 2012. c©2012 Association for Computational Linguistics
Mixed Membership Markov Models
for Unsupervised Conversation Modeling
Michael J. Paul
Center for Language and Speech Processing
Johns Hopkins University
Baltimore, MD 21218, USA
mpaul@cs.jhu.edu
Abstract
Recent work has explored the use of hidden
Markov models for unsupervised discourse
and conversation modeling, where each seg-
ment or block of text such as a message in a
conversation is associated with a hidden state
in a sequence. We extend this approach to al-
low each block of text to be a mixture of mul-
tiple classes. Under our model, the probability
of a class in a text block is a log-linear func-
tion of the classes in the previous block. We
show that this model performs well at predic-
tive tasks on two conversation data sets, im-
proving thread reconstruction accuracy by up
to 15 percentage points over a standard HMM.
Additionally, we show quantitatively that the
induced word clusters correspond to speech
acts more closely than baseline models.
1 Introduction
The proliferation of social media in recent years has
lead to an increased use of informal Web data in
the language processing community. With this ris-
ing interest in social domains, it is natural to con-
sider models which explicitly incorporate the con-
versational patterns of social text. Compared to the
naive approach of treating conversations as flat doc-
uments, models which include conversation struc-
ture have been shown to improve tasks such as fo-
rum search (Elsas and Carbonell, 2009; Seo et al.,
2009), question answering and expert finding (Xu et
al., 2008; Wang et al., 2011a), and interpersonal re-
lationship identification (Diehl et al., 2007).
While conversational features may be important,
Web-derived corpora are not always annotated with
this information, and the nature of conversations on
the Web can vary wildly across domains and venues.
Addressing these concerns, there has been recent
work with unsupervised models of Web conversa-
tions based on hidden Markov models (Ritter et al.,
2010), where each state corresponds to a conversa-
tional class or “act.” Unlike more traditional uses of
HMMs in which a single token is emitted per time
step, HMM emissions in conversations correspond
to entire blocks of text, such that an entire message
is generated at each step. Because each time step is
associated with a block of variables, we refer to this
type of HMM as a block HMM (Fig. 1a).
While block HMMs offer a concise model of
inter-message structure, they have the limitation that
each text block (message) belongs to exactly one
class. Many modern generative models of text, in
contrast, allow documents to contain many latent
classes. For example, topic models such as Latent
Dirichlet Allocation (LDA) (Blei et al., 2003) as-
sume each document has its own distribution over
multiple classes (often called “topics”). For many
predictive tasks, topic models outperform single-
class generative models such as Naive Bayes. These
properties could similarly be desirable in conversa-
tion modeling. An email might contain a request,
a question, and an answer to a previous question –
three distinct dialog acts within a single message.
This motivates the desire to allow a message to be a
mixture of classes.
In this paper, we introduce a new type of model
which combines the functionality of topic models,
which posit latent class assignments to each individ-
ual token, with Markovian sequence models, which
94
?pi
z1 z2 z3 . . .
w1 w2 w3 . . .
N N N
(a) Block HMM
?
?1 ?2 ?3 . . .
z1 z2 z3 . . .
w1 w2 w3 . . .
N N N
(b) LDA
?
pi1 pi2 pi3 . . .
z1 z2 z3 . . .
w1 w2 w3 . . .
N N N
(c) M4
Figure 1: The graphical models for the block HMM (left) where each block of tokens depends on exactly one latent
class, LDA (center) where each token individually depends on a latent class, and M4 (right) where the class distri-
butions are dependent across blocks. Some parameters are omitted for simplicity. This figure depicts the Bayesian
variant of the block HMM (Ritter et al., 2010) where the transition distributions pi depend on a Dirichlet(?) prior.
govern the transitions between text blocks in a se-
quence. We generalize the block HMM approach so
that there is no longer a one-to-one correspondence
between states in the Markov chain and latent dis-
course classes. Instead, we allow a state in the HMM
to correspond to a mixture of many classes: we re-
fer to this family of models as mixed membership
Markov models (M4). Instead of defining explicit
transition probabilities from one class to another as
in a traditional HMM, we define the distribution over
classes as a function of the entire histogram of class
assignments of the previous text segment. We define
our model using the same number of parameters as
a standard HMM (§2), and we present a straightfor-
ward approximate inference algorithm (§3).
While we introduce a general model, we will fo-
cus on the task of unsupervised conversation model-
ing. Specifically, we build off the Bayesian block
HMMs used by Ritter et al. (2010) for modeling
Twitter conversations, which will be our primary
baseline. After discussing related work (§4), we
present experimental results on a set of Twitter con-
versations as well as a set of threads from CNET
discussion forums (§5). We show that M4 increases
thread reconstruction accuracy by up to 15% com-
pared to the HMM of Ritter et al. (2010), and we
reduce variation of information against speech act
annotations by an average of 18% from HMM and
LDA baselines. To the best of our knowledge, this
work is the first attempt to quantitatively compare
unsupervised models against gold standard speech
act annotations.
2 M4: Mixed Membership Markov Models
In this section, we extend the block HMM by intro-
ducing mixed membership Markov models (M4).
Under the block HMM, as utilized by Ritter et al.
(2010), messages in a conversation flow according to
a Markov process, where the words of messages are
generated according to language models associated
with a state in a hidden Markov model. The intu-
ition is that HMM states should correspond to some
notion of a conversation “act” such as QUESTION or
ANSWER. The intuition is the same under M4, but
now each token in a message is given its own class
assignment, according to a class distribution for that
particular message. A message’s class distribution
depends on the class assignments of the previous
message, yielding a model that retains sequential de-
pendencies between messages, while allowing for
finer grained class allocation than the block HMM.
Modeling messages (or more generally, text blocks)
as a mixture of multiple classes rather than a single
class gives rise to the “mixed membership” property.
In the subsections below, we formalize and ana-
lyze this new model.
2.1 Structure Assumptions
We first define the discourse structure and termi-
nology we will be assuming. The discourse struc-
ture is a directed graph, where nodes correspond to
segments of a document (which we will refer to as
“blocks” of text), and the edges define the dependen-
cies between them.
95
Thus, a text block is a set of tokens, while a doc-
ument consists of the discourse graph and all blocks
associated with it. In the context of modeling con-
versation threads, which will be the focus of our ex-
periments later, we will assume a block corresponds
to a single message in a thread. The parent of a mes-
sage m is the message to which it is a response; if
a message is not in response to anything in particu-
lar, then it has no parent. Any replies to the message
m are the children of m. The thread as a whole is
called a document.
The discourse graph should be acyclic. A directed
acyclic graph (DAG) offers a flexible representation
of discourse (Rose´ et al., 1995), but for simplic-
ity, we will restrict this and assume that each sub-
graph is a tree; i.e. no message has multiple parents.
The graph as a whole may be a forest: for example,
someone could write a new message in a conversa-
tion that is not directly in reply to any previous mes-
sage, so this message would not have any parents,
and would form the root of a new tree in the forest.
2.2 Generative Story
Extending the block HMM, latent classes in M4 are
now associated with each individual token, rather
than one class for an entire block. The key differ-
ence between the generative process behind M4 and
the block HMM is that the transition distributions
are defined with a log-linear model, which uses class
assignments in a block as features to define the dis-
tribution over classes for the children of that block.
Put another way, a state in M4 corresponds to a class
histogram, and transitions between states are func-
tions of the log-linear parameters.
Given a block b, we will use the notation b to de-
note the block’s feature vector, which consists of the
histogram of latent class assignments for the tokens
of b.1 There are K classes. Additionally, we assume
each feature vector has an extra cell containing an
indicator denoting whether the block has no parent
– this allows us to learn transitions from a “start”
state. We also include a bias feature that is always
1, to learn a default weight for each class. There
1One could also use other functions of the class histograms
rather than the raw counts themselves. For example, we experi-
mented with binary indicator features (i.e. “does class k appear
anywhere in block b?”), but this performed consistently worse
in early experiments, and we do not consider this further.
are thus K + 2 features which are used to predict
the probability of each of the K classes. The fea-
tures are weighted by transition parameters, denoted
?. The random variable z denotes a latent class, and
?z is a discrete distribution over word types – that
is, each class is associated with a unigram language
model. The transition distribution over classes is de-
noted pi, which is given in terms of ? and the feature
vector of the parent block.
Under this model, a corpus D is generated by:
1. For each (j, k) in the transition matrix ?K×K+2:
(a) Draw transition weight ?jk ? N (0, ?2).
2. For each class j:
(a) Draw word distribution ?j ?Dirichlet(?).
3. For each block b of each document d in D:
(a) Set class probability pibj =
exp(?Tj a)?
j? exp(?
T
j?
a)
for all classes j, where a is the feature vec-
tor for block a, the parent of b.
(b) For each token n in block b:
i. Sample class z(b,n) ? pib.
ii. Sample word w(b,n) ? ?z .
For each block of text in a document (e.g. each
message in a conversation), the distribution over
classes pi is computed as a function of the feature
vector of the block’s parent and the transition pa-
rameters (feature weights) ?. Each ?jk has an intu-
itive interpretation: a positive value means that the
occurrence of class k in a parent block increases the
probability that j will appear in the next block, while
a negative value reduces this probability.
The observed words of each block are generated
by repeatedly sampling classes from the block’s dis-
tribution pi, and for each sampled class z, a single
word is sampled from the class-specific distribution
over words ?z . In contrast, under the block HMM, a
class z is sampled once from the transition distribu-
tion, and words are repeatedly sampled from ?z .
We place a symmetric Dirichlet prior on each ?
with concentration parameter ?, which smoothes the
word distributions, and we place a 0-mean Gaussian
prior on each ? parameter, which acts as a regular-
izer. The graphical diagram is shown in Figure 1
along with the block HMM and LDA. This figure
96
shows how M4 combines the sequential dependen-
cies of the block HMM with the token-specific class
assignments of LDA.
2.3 Discussion
Like the block HMM, M4 is a type of HMM. A latent
sequence under M4 forms a Markov chain in which
a state corresponds to a histogram of classes. (For
simplicity, we are ignoring the extra features of the
start state indicator and bias in this discussion.) If
we assume a priori that the length of a block is un-
bounded, then this state space is NK where 0 ? N.
The probability of transitioning from a state b to an-
other state b˜ ? NK is:
P (b? b˜) ? ?NMultinomial(b˜|pi(b), N) (1)
where N =
?
k b˜k, ?N is the probability that a
block has N tokens,2 and pi(b) is the transition dis-
tribution given a vector b. This follows from the
generative story defined above, with an additional
step of generating the number of tokens N from the
distribution ?.
We currently define a block b’s distribution pib in
terms of the discrete feature vector a given by its
parent a. We could have instead made pib a func-
tion of the parent’s distribution pia – this would lead
to a model that assumes a dynamical system over a
continuous space rather than a Markov chain. How-
ever, as a generative story we believe it makes more
sense for a block’s distribution to depend on the ac-
tual class values which are emitted by the parent.
Similar arguments are made by Blei and Mcauliffe
(2007) when designing supervised topic models.
Under a block HMM with one class per block,
there are K states corresponding to the K classes,
requiring K×K parameters to define the transition
matrix. Under M4, there is a countably infinite num-
ber of states, but the transitions are still defined by
K×K parameters (ignoring extra features). M4 thus
utilizes a larger state space without increasing the
number of free parameters.
3 Inference and Parameter Estimation
We must infer the values of the hidden variables z
as well as the parameters for the word distributions
2The distribution over the number of tokens can be arbitrary,
as this is observed and does not affect inference. In topic mod-
els, this is sometimes assumed to be Poisson (Blei et al., 2003).
? and transition weights ?. Standard HMM dy-
namic programming algorithms cannot straightfor-
wardly be used for M4 because of the unboundedly
large state space. We instead turn to Markov chain
Monte Carlo (MCMC) methods as a tool for approx-
imate inference. We derive a stochastic EM algo-
rithm in which we alternate between sampling class
assignments for the word tokens and optimizing the
transition parameters, outlined in the following two
subsections.
3.1 Latent Class Sampling
To explore the posterior distribution over latent
classes, we use a collapsed Gibbs sampler such that
we marginalize out each word multinomial ? and
only need to sample the token assignments z con-
ditioned on each other. Given the current state of the
sampler, we sample a token’s class according to:
P (z(b,n) = k|z?(b,n),w, ?, ?) ? (2)
exp(?Tk a)?
k? exp(?
T
k?a)
nwk + ?
nk +W?
?
c?C
?
j
(
exp(?Tj b)
?
j? exp(?
T
j?b)
)njc
The notation nwk indicates the number of tokens
with word type w that have been assigned to topic k.
W is the vocabulary size. a is the parent block of b,
and C is the set of b’s children. b is the feature vector
corresponding to block b (i.e. the class histogram
plus the bias feature), where the histogram includes
the incremented count of the candidate class k.
This sampling distribution is very similar to that
of LDA (Griffiths and Steyvers, 2004), but the distri-
bution over “topics” is now a function of the previ-
ous block, which gives the leftmost term. The right-
most term is a result of the dependency of the child
blocks (C) on the class assignments of b.
Due to the rightmost term, the complexity of com-
puting the sampling distribution is quadratic in the
number of classes, rather than the linear complexity
of a single-class HMM. Our assumption is that the
number of sequence-dependent classes (e.g. speech
acts or discourse states) will be reasonably small. If
it is desired to have a large number of latent topics as
is common in LDA, this model could be combined
with a standard topic model without sequential de-
pendencies, as explored by Ritter et al. (2010).
97
3.2 Transition Parameter Optimization
Differentiating the corpus likelihood with respect to
? yields the standard equation for log-linear models:
?`
??zk
=
?
b
ak
(
nzb ? nb
exp(?Tz a)?
z? exp(?
T
z?a)
)
?
?zk
?2
(3)
where a is the parent of block b, a is the feature vec-
tor associated with a, nzb is the number of times class
z occurs in block b and nb is the total number of to-
kens in block b.
Standard optimization methods can be used to
learn these parameters. In our experiments, we find
that we obtain good results by simply performing
a single iteration of gradient ascent after each sam-
pling iteration t,3 with the following update:
?(t+1)zk = ?
(t)
zk + ?(t)
?`
??zk
(4)
where ? is a step size function.
4 Related Work
Hidden Markov models have a recent history as sim-
ple models of document structure. Stolcke et al.
(2000) used HMMs as a general model of discourse
with an application to speech acts (or dialog acts)
in conversations. Barzilay and Lee (2004) applied
HMMs as an unsupervised model of discourse. This
work used HMMs to model the progression of sen-
tences in articles, and was shown to be useful for or-
dering sentences and generating summaries of news
articles. More recently, Wang et al. (2011b) exper-
imented with similar tasks using a related HMM-
based model called the Structural Topic Model.
Unsupervised HMMs were applied to conversa-
tional data by Ritter et al. (2010) who experimented
with Twitter conversations. The authors also experi-
mented with incorporating a topic model on top of
the HMM to distinguish speech acts from topical
clusters, with mixed results. Joty et al. (2011) ex-
tended this work by enriching the emission distribu-
tions and using additional features such as speaker
and position information. An approach to unsuper-
vised discourse modeling that does not use HMMs is
3Incremental updates are justified under the generalized EM
algorithm (Dempster et al., 1977). Each gradient step with re-
spect to ? corresponds to a generalized M-step, while each sam-
pling iteration corresponds to a stochastic E-step.
the latent permutation model of Chen et al. (2009).
This model assumes each segment (e.g. paragraph)
in a document is associated with a latent class or
topic, and the ordering of topics within a document
is modeled as a deviation from some canonical or-
dering.
Extensions to the block HMM have incorpo-
rated mixed membership properties within blocks,
notably the Markov Clustering Topic Model
(Hospedales et al., 2009), which allows each HMM
state to be associated with its own distribution over
topics in a topic model. Like the block HMM, this
still assumes a relatively small number of HMM
states, but with an extra layer of latent variables be-
fore the observations are emitted. This is more re-
strictive than the unbounded state space of M4.
Decoupling HMM states from latent classes was
considered by Beal et al. (1997) with the Factorial
HMM, which uses factorized state representations.
The Factorial HMM is most often used to model in-
dependent Markov chains, whereas M4 has a dense
graphical model topology: the probability of each
of the latent classes depends on the counts of all of
the classes in the previous block. The trick in M4
is to define the transition matrix via a function of
a limited number of parameters, allowing tractable
inference in a model with arbitrarily many states.
In topic models, log-linear formulations of la-
tent class distributions4 are utilized in correlated
topic models (Blei and Lafferty, 2007) as a means
of incorporating covariance structure among topic
probabilities. Applying log-linear regression to po-
tentially many features was combined with LDA
by Mimno and McCallum (2008), who model the
Dirichlet prior over topics as a function of document
features. In M4, such features would correspond to
the class histograms of previous blocks, introducing
additional dependencies between documents.
One topic model that imposes sequential depen-
dencies between documents is Sequential LDA (Du
et al., 2010), which models a document as a se-
quence of segments (such as paragraphs) governed
by a Pitman-Yor process, in which the latent topic
distribution of one segment serves as the base dis-
tribution for the next segment. This is in the spirit
4This formulation corresponds to the natural parameteriza-
tion of the multinomial distribution.
98
of our work, where the latent classes in a segment
depend on the class distribution of the previous seg-
ment. By using the Pitman-Yor process, however,
this work assumes topics are positively correlated,
i.e. the occurrence of a topic in one segment makes
it likely to appear in the next. In contrast, we wish
to learn arbitrary transitions, both positive and neg-
ative, between the latent classes.
5 Experiments with Conversation Data
We experiment with two corpora of text-based asyn-
chronous conversations on the Web. One of these is
annotated with speech act labels, against which we
compare our unsupervised clusters. We measure the
predictive capabilities of the model via perplexity
experiments and the task of thread reconstruction.
5.1 Data Sets
First, we use a corpus of discussion threads from
CNET forums (Kim et al., 2010), which are mostly
technical discussion and support. This corpus in-
cludes 321 threads and a total of 1309 messages,
with an average message length of 78 tokens after
preprocessing.5 Second, we use the Twitter data set
created by Ritter et al. (2010). We consider 36K con-
versation threads for a total of 100K messages with
average length 13.4 tokens.
Both data sets are already annotated with the re-
ply structure, so the discourse graph is given. We
preprocess the data by treating contiguous blocks
of punctuation as tokens, and we remove infrequent
words. The Twitter corpus has some additional pre-
processing, such as converting URLs to a single
word type.
5.2 Baseline Models
Our work is motivated by the Bayesian HMM ap-
proach of Ritter et al. (2010) – the model we re-
fer to as the block HMM (BHMM) – and we con-
sider this our primary baseline. (See also (Goldwa-
ter and Griffiths, 2007) for more details on Bayesian
HMMs with Dirichlet priors.) We also compare
against LDA, which makes latent assignments at the
token-level, but blocks of text are independent of
5Three messages in this corpus have multiple parents. For
the sake of conciseness, we simply remove these threads rather
than introducing a method to model multiple parents.
each other. In other words, BHMM models sequen-
tial dependencies but allows only single-class mem-
bership, whereas LDA uses no sequence information
but has a mixed membership property. M4 combines
these two properties.
We use standard Gibbs samplers for both baseline
models, and we optimize the Dirichlet hyperparam-
eters (for the transition and topic distributions) using
Minka’s fixed-point iterations (2003).
5.3 Incorporating Background Distributions
In our experiments, we find that the intrusion of
common stop words can make the results difficult
to interpret, but we do not want to perform simple
stop word removal because common function words
often play important roles in the latent classes (i.e.
speech acts) of the conversation data we consider
here. We instead handle this by extending our model
to include a “background” distribution over words
which is independent of the latent classes in a docu-
ment; this was also done by Wang et al. (2011b).
The idea is to introduce a binary switching vari-
able x into the model which determines whether a
word is generated from the general background dis-
tribution or from the distribution specific to a latent
class z. Loosely, if the marginal probability of a
word was given by p(w) =
?
z p(w|z)p(z), the
introduction of a background distribution gives the
marginal probability p(w) = p(x = 0)p(w|B) +
p(x = 1)
?
z p(w|z). This is common practice and
we will not go into detail; see (Chemudugunta et al.,
2006) for a general example on sampling switching
variables. We augment all three models with a back-
ground distribution in exactly the same way, so that
the comparison is fair. We use a Beta(10.0, 10.0)
prior over the switching distribution.
5.4 Experimental Setup
All of our results are averaged across four randomly
initialized chains which are run for 5000 iterations,
with five samples collected during the final 500 it-
erations. We take small gradient steps of decreasing
size with ?(t) = 0.1/(1000 + t).
We set ?2 = 10.0 as the variance of the ?
weights. We use optimized asymmetric priors as de-
scribed in §5.2, and we use a symmetric Dirichlet
for the word distributions, following Wallach et al.
(2009). We sample the scaling hyperparameter ? via
99
5 10 15 20 25
CNET
Unigram 63.07 63.07 63.07 63.07 63.07
LDA 57.16 54.35 52.88 51.63 50.50
BHMM 61.26 61.06 60.92 60.86 60.85
M4 60.38 59.58 59.26 59.21 59.25
Twitter
Unigram 93.00 93.00 93.00 93.00 93.00
LDA 83.70 78.40 74.01 70.91 70.16
BHMM 90.51 89.94 89.68 89.59 89.38
M4 88.44 86.17 85.50 85.55 86.31
Table 1: Average perplexity of held-out data for various
numbers of latent classes.
Metropolis-Hastings proposals: we add Gaussian-
distributed noise to the log of the current ?, then
exponentiate this to yield the proposed ?(new). This
log-space proposal ensures that ? is always positive.
When computing the transition distributions for
M4, we normalize the class histograms so that the
counts to sum to 1. This helps with numeric sta-
bility because the input vectors stay within a small
bounded range.6
5.5 Experimental Results
5.5.1 Perplexity
We begin with standard measures of the perplex-
ity of held-out data. For these experiments, we
train on 75% of the data, and test on the remaining
25%. We run the sampler for 500 iterations using the
word distributions and transition parameters learned
during training; we compute the average perplexity
from the final ten sampling iterations.
Results for different numbers of classes are shown
in Table 1. These results demonstrate the advan-
tage of models with the mixed membership property.
Although LDA outperforms both sequence models,
this is be expected. Each block’s topic distribution
is stochastically generated with LDA, whereas in the
two sequence models, the distribution over classes
is simply a deterministic function of the previous
block. This allows LDA to infer parameters that fit
the data more tightly. Comparing only the two se-
quence models, we find that M4 does significantly
better than BHMM in all cases with p < 0.05.
6Implementations of both M4 and the block HMM will be
available at http://cs.jhu.edu/˜mpaul
BHMM M40.25
0.30
0.35
0.40
0.45
0.50
0.55
Thr
ead
 Re
con
stru
ctio
n A
ccu
rac
y
CNET
BHMM M40.35
0.36
0.37
0.38
0.39
0.40
0.41
0.42 Twitter
Figure 2: Accuracy at the task of thread reconstruction.
The horizontal bar indicates a random baseline.
If capturing sequence information is not impor-
tant, then LDA may provide a better fit to a corpus
than sequence models. In the next two subsections,
we will consider tasks where the sequential structure
is important, thus LDA is not an appropriate choice.
5.5.2 Thread Reconstruction
A natural predictive task of the sequence models
is to reconstruct the discourse graph of a document
where the structure is unknown. In the conversa-
tion domain, this corresponds to the task of thread
reconstruction (Yeh and Harnly, 2006; Wang et al.,
2011c). Given only a flat structure, can we recover
the reply structure of messages in the conversation?
Previous work with BHMM found the optimal
structure by computing the likelihood of all permu-
tations of a thread or sequence (Ritter et al., 2010;
Wang et al., 2011b). We take a more practical ap-
proach and find the optimal structure as part of our
inference procedure. We do this by treating the par-
ent of each block as a hidden variable to be inferred.
The parent of block b is the random variable rb, and
we alternate between sampling values of the latent
classes z and the parents r. The sampling distri-
butions are annealed, as a search technique to find
the best configuration of assignments (Finkel et al.,
2005). At temperature ? , we sample a block’s parent
according to:
P (rb = a|z, ?) ?
?
j
(
exp(?Tj a)
?
j? exp(?
T
j?a)
)njb/?
(5)
100
For each conversation thread, any message is a
candidate for the parent of block b (except b itself)
including the dummy “start” block.
As before, we train on 75% of the data, and run
this experiment on the remaining 25%. We run the
sampler for 500 iterations, cooling ? by 1% after
each iteration, where ? (0) = 1. We measure accu-
racy as the percentage of blocks whose assignment
for rb matches the true parent. For each fold, we
run this estimation procedure from five random ini-
tializations and average the results. Like Ritter et al.
(2010), we do not enforce temporal constraints in the
thread structure for this experiment. We are purely
evaluating the predictive abilities of the model rather
than its performance in a full-fledged reconstruction
setup, which would require richer features beyond
the scope of this paper.
Figure 2 shows results comparing M4 against
BHMM. Because all blocks are independent under
LDA, it cannot be used in this experiment; using
LDA would amount to a random baseline.
We plot the distribution of results from vari-
ous samples and various numbers of classes in
{5, . . . , 25}. Most of the variance is across folds
and samples; we find that there is not a strong trend
in accuracy as a function of the number of classes.
This suggests that most of the sequence predictions
are carried by a small subset of the classes.
On average, M4 outperforms BHMM by more
than 15 points on the CNET corpus. M4 is also bet-
ter on the Twitter corpus, but the difference is not so
stark. This seems to confirm our intuition that the
advantage of M4 over BHMM is greater when the
blocks are longer; tweets may be short enough that
the single-class assumption is not as limiting.
5.5.3 Speech Act Discovery
Thus far, we have investigated the predictive
power of the model, but we would also like to deter-
mine if the inferred clusters correspond to human-
interpretible classes. In the case of conversation
data, our hope is that some of the latent classes
represent speech acts or dialog acts (Searle, 1975).
While there is a body of work in supervised speech
act classification (Cohen et al., 2004; Bangalore et
al., 2006; Surendran and Levow, 2006; Qadir and
Riloff, 2011), the variety of conversation domains
on the Web motivates the use of unsupervised ap-
5 10 15 20 25Number of classes
2.0
2.5
3.0
3.5
4.0
4.5
5.0
Var
iati
on 
of I
nfo
rma
tion
 (VI
)
Speech Act Clustering (CNET)
Random
LDA
BHMM
M4
Figure 3: The variation of information between the
human-created speech act annotations of the CNET cor-
pus and the latent class assignments by various models.
proaches.
The CNET corpus is annotated with twelve
speech act classes: QUESTION and ANSWER, which
are both broken down into multiple sub-classes, as
well as RESOLUTION, REPRODUCTION, and OTHER
(Kim et al., 2010). We would like to quantitatively
measure how closely the latent states induced by our
model match these annotations.7
We can measure this with variation of informa-
tion (Meila, 2003), which has been used in recent
years for unsupervised evaluation, e.g. in part-of-
speech clustering (Goldwater and Griffiths, 2007).
Given two sets of variable assignments z and z?, the
variation of information is defined as H(Z|Z ?) +
H(Z ?|Z). In other words, given one clustering, how
much uncertainty do we have about the other? Re-
sults are shown in Figure 3: a lower value corre-
sponds to higher similarity.
On the CNET corpus, M4 outperforms both base-
lines in all cases by a very significant margin. Qual-
itatively, we see clusters and transition parameters
that make sense. For example, the class with top
words {i,my, have, computer, am, ?, tried, help}
is most likely to begin a thread (with ? = +1.94)
and appears to describe questions or requests for
7Some messages have multiple labels. Since messages are
not annotated at finer granularities, we handle this by simply
duplicating such messages, once per label, and measuring clus-
tering performance on this expanded set of labeled data which
now has one label per token.
101
! you ? :)
u your
good !!
thanks
. i , it you
but that
im lol its
to in ! .
im ? the at
be going
! * :d lol
haha :p ?
.. me !! :o
” he . is
the him
his that
was like
. the of , ?
a in is to
for that
-url- rt
just #
today
anyone
people
?
+
?
+
+
?
++
+
+
+
+ ?
+
+
+
?
+
+
?
+
?
?
+
+
+ ?
+
?
?
+
+
?
+
?
+
Figure 4: Example output from a model trained on the Twitter corpus with 15 classes (7 shown). Each node corre-
sponds to a class learned by the model, and the most probable words are shown for each class. The symbols + and
? on the directed edges denote the sign of the ? associated with transitioning from one class to another, and the size
of the symbols is scaled by the magnitude of ?. Non-edge arrows going into a node represent the weight of starting a
conversation with that class. Low-magnitude weights are not shown, and some edges are omitted to avoid clutter.
help. The class is not likely to be followed by itself
(? = ?0.32) but is likely to be followed by the class
with words {you, your, /, com, ., http, windows}
(with ? = +1.38).
The Twitter corpus does not have speech act an-
notations, so we offer example output in Figure 4.
We again see patterns that we might expect to find in
social media conversations, and some classes appear
to correspond to speech acts such a declarations, per-
sonal questions, and replies. For example, the class
in the center of the figure has words like you and but
which suggests it is used in reply to other messages,
and indeed we see that it has a positive weight of
following almost every class, but a negative weight
for actually starting a thread. Conversely, the class
containing URLs (which corresponds to the act of
sharing news or media) is likely to begin a thread,
but is not likely to follow other classes except itself.
How well unsupervised models can truly capture
speech acts is an open question. Much as LDA
“topics” do not always correspond to what humans
would judge to be semantic classes (Chang et al.,
2009), the conversation classes inferred by unsu-
pervised sequence models are similarly unlikely to
be a perfect fit to human-assigned classes. Never-
theless, these results suggest M4 is a step forward.
Our model provides a framework for defining inter-
message transitions as functions of multiple classes,
which will be a desirable property for many corpora.
6 Conclusion
We have presented mixed membership Markov
models (M4), which extend the simple HMM ap-
proach to discourse modeling by positing class as-
signments at the level of individual tokens. This al-
lows blocks of text to belong to potentially multiple
classes, a property that relates M4 to topic models.
This type of model can be viewed as an HMM with
an expanded state space, but because the transition
probabilities are a function of a small number of pa-
rameters, the output remains human-interpretible.
M4 can be taken as a general family of models and
can be readily extended. In this work, we focused
on introducing a model of inter-message structure,
but certainly more sophisticated models of intra-
message structure beyond unigram language mod-
els could be incorporated into M4. Standard topic
model extensions such as n-gram models (Wallach,
2006) can straightforwardly be applied here, and in-
deed we already applied such an extension by in-
corporating background distributions in §5.3. For
conversational data, it could make sense to segment
102
messages (e.g. into sentences) and constraint each
segment to belong to one class or speech act; modi-
fications along these lines have been applied to topic
models as well (Gruber et al., 2007). While we have
focused on conversation modeling, M4 is a general
probabilistic model that could be applied to other
discourse applications, for example modeling sen-
tences or paragraphs in articles rather than messages
in conversations; it could also be applied to data be-
yond text.
Compared to a Bayesian block HMM, M4 per-
forms much better at a variety of tasks. A draw-
back is that the time complexity of inference as pre-
sented here is quadratic in the number of classes
rather than linear. Improving this may be the subject
of future research. Another potential avenue of fu-
ture work is to model transitions such that a Dirichlet
prior for the class distribution of a block, rather than
the class distribution itself, depends on the previous
class assignments. This would yield a model that
more closely resembles LDA, but with topic priors
that encode sequence information.
Acknowledgements
Thanks to Matt Gormley, Mark Dredze, Jason Eis-
ner, the members of my lab and the anonymous re-
viewers for helpful feedback and discussions. This
material is based upon work supported by a National
Science Foundation Graduate Research Fellowship
under Grant No. DGE-0707427 and a Dean’s Fel-
lowship from the Johns Hopkins University Whiting
School of Engineering.
References
Srinivas Bangalore, Giuseppe Di Fabbrizio, and Amanda
Stent. 2006. Learning the structure of task-driven
human-human dialogs. In Proceedings of the 21st In-
ternational Conference on Computational Linguistics
and the 44th annual meeting of the Association for
Computational Linguistics, ACL-44, pages 201–208.
Regina Barzilay and Lillian Lee. 2004. Catching the
drift: Probabilistic content models, with applications
to generation and summarization. In HLT-NAACL
2004: Main Proceedings, pages 113–120, Boston,
Massachusetts, USA, May 2 - May 7. Association for
Computational Linguistics.
M. J. Beal, Z. Ghahramani, and C. E. Rasmussen. 1997.
Factorial hidden markov models. In Machine Learn-
ing, volume 29, pages 29–245.
D. Blei and J. Lafferty. 2007. A correlated topic model
of science. Annals of Applied Statistics, 1(1):17–35.
David M. Blei and Jon D. Mcauliffe. 2007. Supervised
topic models. In Advances in Neural Information Pro-
cessing Systems 21.
David Blei, Andrew Ng, and Michael Jordan. 2003. La-
tent dirichlet allocation. Journal of Machine Learning
Research, 3.
Jonathan Chang, Jordan Boyd-Graber, Sean Gerrish,
Chong Wang, and David Blei. 2009. Reading Tea
Leaves: How Humans Interpret Topic Models. In Neu-
ral Information Processing Systems (NIPS).
Chaitanya Chemudugunta, Padhraic Smyth, and Mark
Steyvers. 2006. Modeling general and specific as-
pects of documents with a probabilistic topic model.
In NIPS, pages 241–248.
Harr Chen, S. R. K. Branavan, Regina Barzilay, and
David R. Karger. 2009. Global models of document
structure using latent permutations. In Proceedings
of Human Language Technologies: The 2009 Annual
Conference of the North American Chapter of the As-
sociation for Computational Linguistics, NAACL ’09,
pages 371–379.
William W. Cohen, Vitor R. Carvalho, and Tom M.
Mitchell. 2004. Learning to classify email into
“speech acts”. In Proceedings of EMNLP 2004,
pages 309–316, Barcelona, Spain, July. Association
for Computational Linguistics.
A. P. Dempster, N. M. Laird, and D. B. Rubin. 1977.
Maximum likelihood from incomplete data via the em
algorithm. Journal of the Royal Statistical Society. Se-
ries B (Methodological), 39(1):1–38.
Christopher P. Diehl, Galileo Namata, and Lise Getoor.
2007. Relationship identication for social network dis-
covery. In AAAI’07.
Lan Du, Wray Buntine, and Huidong Jin. 2010. Se-
quential latent dirichlet allocation: Discover underly-
ing topic structures within a document. 2010 IEEE
International Conference on Data Mining, pages 148–
157.
Jonathan L. Elsas and Jaime Carbonell. 2009. It pays to
be picky: An evaluation of thread retrieval in online fo-
rums. In 32nd Annual International ACM SIGIR Con-
ference on Research and Development on Information
Retrieval(SIGIR 2009).
Jenny Rose Finkel, Trond Grenager, and Christopher D.
Manning. 2005. Incorporating non-local information
into information extraction systems by gibbs sampling.
In ACL.
Sharon Goldwater and Tom Griffiths. 2007. A fully
bayesian approach to unsupervised part-of-speech tag-
ging. In Proceedings of the 45th Annual Meeting of
103
the Association of Computational Linguistics, pages
744–751, Prague, Czech Republic, June. Association
for Computational Linguistics.
Tom Griffiths and Mark Steyvers. 2004. Finding scien-
tific topics. In Proceedings of the National Academy
of Sciences of the United States of America.
Amit Gruber, Michal Rosen-Zvi, and Yair Weiss. 2007.
Hidden topic markov models. In Artificial Intelligence
and Statistics (AISTATS), San Juan, Puerto Rico.
Timothy Hospedales, Shaogang Gong, and Tao Xiang.
2009. A markov clustering topic model for mining
behaviour in video. In International Conference on
Computer Vision (ICCV).
Shafiq R. Joty, Giuseppe Carenini, and Chin-Yew Lin.
2011. Unsupervised modeling of dialog acts in asyn-
chronous conversations. In IJCAI, pages 1807–1813.
Su Nam Kim, Li Wang, and Timothy Baldwin. 2010.
Tagging and linking web forum posts. In Proceedings
of the Fourteenth Conference on Computational Natu-
ral Language Learning, CoNLL ’10, pages 192–202.
Marina Meila. 2003. Comparing clusterings by the vari-
ation of information. Learning Theory and Kernel Ma-
chines, pages 173–187.
D. Mimno and A. McCallum. 2008. Topic models condi-
tioned on arbitrary features with dirichlet-multinomial
regression. In UAI.
Tom Minka. 2003. Estimating a dirichlet distribution.
Ashequl Qadir and Ellen Riloff. 2011. Classifying sen-
tences as speech acts in message board posts. In Pro-
ceedings of the 2011 Conference on Empirical Meth-
ods in Natural Language Processing, pages 748–758,
Edinburgh, Scotland, UK., July. Association for Com-
putational Linguistics.
Alan Ritter, Colin Cherry, and Bill Dolan. 2010. Unsu-
pervised modeling of twitter conversations. In Human
Language Technologies: The 2010 Annual Conference
of the North American Chapter of the Association for
Computational Linguistics, HLT ’10, pages 172–180.
Carolyn Penstein Rose´, Barbara Di Eugenio, Lori S.
Levin, and Carol Van Ess-Dykema. 1995. Discourse
processing of dialogues with multiple threads. In Pro-
ceedings of the 33rd annual meeting on Association for
Computational Linguistics, ACL ’95, pages 31–38.
John Searle, 1975. A taxonomy of illocutionary acts.
University of Minnesota Press, Minneapolis.
Jangwon Seo, W. Bruce Croft, and David A. Smith.
2009. Online community search using thread struc-
ture. In ACM Conference on Information and Knowl-
edge Management (CIKM 2009), pages 1907–1910.
Andreas Stolcke, Noah Coccaro, Rebecca Bates, Paul
Taylor, Carol Van Ess-Dykema, Klaus Ries, Eliza-
beth Shriberg, Daniel Jurafsky, Rachel Martin, and
Marie Meteer. 2000. Dialogue act modeling for
automatic tagging and recognition of conversational
speech. Computational Linguistics, 26(3):339–373,
September.
Dinoj Surendran and Gina-Anne Levow. 2006. Dialog
act tagging with support vector machines and hidden
markov models. In Interspeech.
Hanna M. Wallach, David Mimno, and Andrew McCal-
lum. 2009. Rethinking LDA: Why priors matter. In
NIPS.
H.M. Wallach. 2006. Topic modeling: beyond bag-of-
words. In ICML ’06: Proceedings of the 23rd inter-
national conference on Machine learning, pages 977–
984.
Hongning Wang, Chi Wang, ChengXiang Zhai, and Ji-
awei Han. 2011a. Learning online discussion struc-
tures by conditional random fields. In 34th Annual
International ACM SIGIR Conference on Research
and Development in Information Retrieval (SIGIR’11),
pages 435–444.
Hongning Wang, Duo Zhang, and ChengXiang Zhai.
2011b. Structural topic model for latent topical struc-
ture analysis. In ACL, pages 1526–1535. The Associ-
ation for Computer Linguistics.
Li Wang, Marco Lui, Su Nam Kim, Joakim Nivre, and
Timothy Baldwin. 2011c. Predicting thread discourse
structure over technical web forums. In Proceedings
of EMNLP 2011, pages 13–25.
Gu Xu, Hang Li, and Wei-Ying Ma. 2008. Fora: Lever-
aging the power of internet communities for question
answering. In 1st International Workshop on Question
Answering on the Web (QAWeb08).
Jen-Yuan Yeh and Aaron Harnly. 2006. Email thread
reassembly using similarity matching. In Proceedings
of the 3rd Conference on Email and Anti-Spam (CEAS
2006), pages 64–71.
104
