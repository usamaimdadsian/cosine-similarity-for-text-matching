Proceedings of the 13th Conference of the European Chapter of the Association for Computational Linguistics, pages 120–129,
Avignon, France, April 23 - 27 2012. c©2012 Association for Computational Linguistics
Computing Lattice BLEU Oracle Scores for Machine Translation
Artem Sokolov Guillaume Wisniewski
LIMSI-CNRS & Univ. Paris Sud
BP-133, 91 403 Orsay, France
{firstname.lastname}@limsi.fr
Franc¸ois Yvon
Abstract
The search space of Phrase-Based Statisti-
cal Machine Translation (PBSMT) systems
can be represented under the form of a di-
rected acyclic graph (lattice). The quality
of this search space can thus be evaluated
by computing the best achievable hypoth-
esis in the lattice, the so-called oracle hy-
pothesis. For common SMT metrics, this
problem is however NP-hard and can only
be solved using heuristics. In this work,
we present two new methods for efficiently
computing BLEU oracles on lattices: the
first one is based on a linear approximation
of the corpus BLEU score and is solved us-
ing the FST formalism; the second one re-
lies on integer linear programming formu-
lation and is solved directly and using the
Lagrangian relaxation framework. These
new decoders are positively evaluated and
compared with several alternatives from the
literature for three language pairs, using lat-
tices produced by two PBSMT systems.
1 Introduction
The search space of Phrase-Based Statistical Ma-
chine Translation (PBSMT) systems has the form
of a very large directed acyclic graph. In several
softwares, an approximation of this search space
can be outputted, either as a n-best list contain-
ing the n top hypotheses found by the decoder, or
as a phrase or word graph (lattice) which com-
pactly encodes those hypotheses that have sur-
vived search space pruning. Lattices usually con-
tain much more hypotheses than n-best lists and
better approximate the search space.
Exploring the PBSMT search space is one of
the few means to perform diagnostic analysis and
to better understand the behavior of the system
(Turchi et al., 2008; Auli et al., 2009). Useful
diagnostics are, for instance, provided by look-
ing at the best (oracle) hypotheses contained in
the search space, i.e, those hypotheses that have
the highest quality score with respect to one or
several references. Such oracle hypotheses can
be used for failure analysis and to better under-
stand the bottlenecks of existing translation sys-
tems (Wisniewski et al., 2010). Indeed, the in-
ability to faithfully reproduce reference transla-
tions can have many causes, such as scantiness
of the translation table, insufficient expressiveness
of reordering models, inadequate scoring func-
tion, non-literal references, over-pruned lattices,
etc. Oracle decoding has several other applica-
tions: for instance, in (Liang et al., 2006; Chi-
ang et al., 2008) it is used as a work-around to
the problem of non-reachability of the reference
in discriminative training of MT systems. Lattice
reranking (Li and Khudanpur, 2009), a promising
way to improve MT systems, also relies on oracle
decoding to build the training data for a reranking
algorithm.
For sentence level metrics, finding oracle hy-
potheses in n-best lists is a simple issue; how-
ever, solving this problem on lattices proves much
more challenging, due to the number of embed-
ded hypotheses, which prevents the use of brute-
force approaches. When using BLEU, or rather
sentence-level approximations thereof, the prob-
lem is in fact known to be NP-hard (Leusch et
al., 2008). This complexity stems from the fact
that the contribution of a given edge to the total
modified n-gram precision can not be computed
without looking at all other edges on the path.
Similar (or worse) complexity result are expected
120
for other metrics such as METEOR (Banerjee and
Lavie, 2005) or TER (Snover et al., 2006). The
exact computation of oracles under corpus level
metrics, such as BLEU, poses supplementary com-
binatorial problems that will not be addressed in
this work.
In this paper, we present two original methods
for finding approximate oracle hypotheses on lat-
tices. The first one is based on a linear approxima-
tion of the corpus BLEU, that was originally de-
signed for efficient Minimum Bayesian Risk de-
coding on lattices (Tromble et al., 2008). The sec-
ond one, based on Integer Linear Programming, is
an extension to lattices of a recent work on failure
analysis for phrase-based decoders (Wisniewski
et al., 2010). In this framework, we study two
decoding strategies: one based on a generic ILP
solver, and one, based on Lagrangian relaxation.
Our contribution is also experimental as we
compare the quality of the BLEU approxima-
tions and the time performance of these new ap-
proaches with several existing methods, for differ-
ent language pairs and using the lattice generation
capacities of two publicly-available state-of-the-
art phrase-based decoders: Moses1 and N-code2.
The rest of this paper is organized as follows.
In Section 2, we formally define the oracle decod-
ing task and recall the formalism of finite state
automata on semirings. We then describe (Sec-
tion 3) two existing approaches for solving this
task, before detailing our new proposals in sec-
tions 4 and 5. We then report evaluations of the
existing and new oracles on machine translation
tasks.
2 Preliminaries
2.1 Oracle Decoding Task
We assume that a phrase-based decoder is able
to produce, for each source sentence f , a lattice
Lf = ?Q,??, with # {Q} vertices (states) and
# {?} edges. Each edge carries a source phrase
fi, an associated output phrase ei as well as a fea-
ture vector h¯i, the components of which encode
various compatibility measures between fi and ei.
We further assume that Lf is a word lattice,
meaning that each ei carries a single word3 and
1http://www.statmt.org/moses/
2http://ncode.limsi.fr/
3Converting a phrase lattice to a word lattice is a simple
matter of redistributing a compound input or output over a
that it contains a unique initial state q0 and a
unique final state qF . Let ?f denote the set of all
paths from q0 to qF in Lf . Each path pi ? ?f cor-
responds to a possible translation epi. The job of
a (conventional) decoder is to find the best path(s)
in Lf using scores that combine the edges’ fea-
ture vectors with the parameters ?¯ learned during
tuning.
In oracle decoding, the decoder’s job is quite
different, as we assume that at least a reference
rf is provided to evaluate the quality of each indi-
vidual hypothesis. The decoder therefore aims at
finding the path pi? that generates the hypothesis
that best matches rf . For this task, only the output
labels ei will matter, the other informations can be
left aside.4
Oracle decoding assumes the definition of a
measure of the similarity between a reference
and a hypothesis. In this paper we will con-
sider sentence-level approximations of the popu-
lar BLEU score (Papineni et al., 2002). BLEU is
formally defined for two parallel corpora, E =
{ej}Jj=1 and R = {rj}
J
j=1, each containing J
sentences as:
n-BLEU(E ,R) = BP ·
( n?
m=1
pm
)1/n
, (1)
where BP = min(1, e1?c1(R)/c1(E)) is the
brevity penalty and pm = cm(E ,R)/cm(E) are
clipped or modified m-gram precisions: cm(E) is
the total number of wordm-grams in E ; cm(E ,R)
accumulates over sentences the number of m-
grams in ej that also belong to rj . These counts
are clipped, meaning that a m-gram that appears
k times in E and l times in R, with k > l, is only
counted l times. As it is well known, BLEU per-
forms a compromise between precision, which is
directly appears in Equation (1), and recall, which
is indirectly taken into account via the brevity
penalty. In most cases, Equation (1) is computed
with n = 4 and we use BLEU as a synonym for
4-BLEU.
BLEU is defined for a pair of corpora, but, as an
oracle decoder is working at the sentence-level, it
should rely on an approximation of BLEU that can
linear chain of arcs.
4The algorithms described below can be straightfor-
wardly generalized to compute oracle hypotheses under
combined metrics mixing model scores and quality measures
(Chiang et al., 2008), by weighting each edge with its model
score and by using these weights down the pipe.
121
evaluate the similarity between a single hypoth-
esis and its reference. This approximation intro-
duces a discrepancy as gathering sentences with
the highest (local) approximation may not result
in the highest possible (corpus-level) BLEU score.
Let BLEU? be such a sentence-level approximation
of BLEU. Then lattice oracle decoding is the task
of finding an optimal path pi?(f) among all paths
?f for a given f , and amounts to the following
optimization problem:
pi?(f) = arg max
pi??f
BLEU?(epi, rf ). (2)
2.2 Compromises of Oracle Decoding
As proved by Leusch et al. (2008), even with
brevity penalty dropped, the problem of deciding
whether a confusion network contains a hypoth-
esis with clipped uni- and bigram precisions all
equal to 1.0 is NP-complete (and so is the asso-
ciated optimization problem of oracle decoding
for 2-BLEU). The case of more general word and
phrase lattices and 4-BLEU score is consequently
also NP-complete. This complexity stems from
chaining up of local unigram decisions that, due
to the clipping constraints, have non-local effect
on the bigram precision scores. It is consequently
necessary to keep a possibly exponential num-
ber of non-recombinable hypotheses (character-
ized by counts for each n-gram in the reference)
until very late states in the lattice.
These complexity results imply that any oracle
decoder has to waive either the form of the objec-
tive function, replacing BLEU with better-behaved
scoring functions, or the exactness of the solu-
tion, relying on approximate heuristic search al-
gorithms.
In Table 1, we summarize different compro-
mises that the existing (section 3), as well as
our novel (sections 4 and 5) oracle decoders,
have to make. The “target” and “target level”
columns specify the targeted score. None of
the decoders optimizes it directly: their objec-
tive function is rather the approximation of BLEU
given in the “target replacement” column. Col-
umn “search” details the accuracy of the target re-
placement optimization. Finally, columns “clip-
ping” and “brevity” indicate whether the corre-
sponding properties of BLEU score are considered
in the target substitute and in the search algorithm.
2.3 Finite State Acceptors
The implementations of the oracles described in
the first part of this work (sections 3 and 4) use the
common formalism of finite state acceptors (FSA)
over different semirings and are implemented us-
ing the generic OpenFST toolbox (Allauzen et al.,
2007).
A (?,?)-semiring K over a set K is a system
?K,?,?, 0¯, 1¯?, where ?K,?, 0¯? is a commutative
monoid with identity element 0¯, and ?K,?, 1¯? is
a monoid with identity element 1¯. ? distributes
over ?, so that a ? (b ? c) = (a ? b) ? (a ? c)
and (b? c)? a = (b? a)? (c? a) and element
0¯ annihilates K (a? 0¯ = 0¯? a = 0¯).
Let A = (?, Q, I, F,E) be a weighted finite-
state acceptor with labels in ? and weights in K,
meaning that the transitions (q, ?, q?) in A carry a
weight w ? K. Formally, E is a mapping from
(Q × ? × Q) into K; likewise, initial I and fi-
nal weight F functions are mappings from Q into
K. We borrow the notations of Mohri (2009):
if ? = (q, a, q?) is a transition in domain(E),
p(?) = q (resp. n(?) = q?) denotes its origin
(resp. destination) state, w(?) = ? its label and
E(?) its weight. These notations extend to paths:
if pi is a path in A, p(pi) (resp. n(pi)) is its initial
(resp. ending) state and w(pi) is the label along
the path. A finite state transducer (FST) is an FSA
with output alphabet, so that each transition car-
ries a pair of input/output symbols.
As discussed in Sections 3 and 4, several oracle
decoding algorithms can be expressed as shortest-
path problems, provided a suitable definition of
the underlying acceptor and associated semiring.
In particular, quantities such as:
?
pi??(A)
E(pi), (3)
where the total weight of a successful path pi =
?1 . . . ?l in A is computed as:
E(pi) =I(p(?1))?
[
l?
i=1
E(?i)
]
? F (n(?l))
can be efficiently found by generic shortest dis-
tance algorithms over acyclic graphs (Mohri,
2002). For FSA-based implementations over
semirings where ? = max, the optimization
problem (2) is thus reduced to Equation (3), while
the oracle-specific details can be incorporated into
in the definition of ?.
122
oracle target target level target replacement search clipping brevity
ex
is
ti
ng LM-2g/4g 2/4-BLEU sentence P2(e; r) or P4(e; r) exact no no
PB 4-BLEU sentence partial log BLEU (4) appr. no no
PB` 4-BLEU sentence partial log BLEU (4) appr. no yes
th
is
pa
pe
r LB-2g/4g 2/4-BLEU corpus linear appr. lin BLEU (5) exact no yes
SP 1-BLEU sentence unigram count exact no yes
ILP 2-BLEU sentence uni/bi-gram counts (7) appr. yes yes
RLX 2-BLEU sentence uni/bi-gram counts (8) exact yes yes
Table 1: Recapitulative overview of oracle decoders.
3 Existing Algorithms
In this section, we describe our reimplementation
of two approximate search algorithms that have
been proposed in the literature to solve the oracle
decoding problem for BLEU. In addition to their
approximate nature, none of them accounts for the
fact that the count of each matching word has to
be clipped.
3.1 Language Model Oracle (LM)
The simplest approach we consider is introduced
in (Li and Khudanpur, 2009), where oracle decod-
ing is reduced to the problem of finding the most
likely hypothesis under a n-gram language model
trained with the sole reference translation.
Let us suppose we have a n-gram language
model that gives a probability P (en|e1 . . . en?1)
of word en given the n? 1 previous words.
The probability of a hypothesis e is then
Pn(e|r) =
?
i=1 P (ei+n|ei . . . ei+n?1). The lan-
guage model can conveniently be represented as a
FSA ALM , with each arc carrying a negative log-
probability weight and with additional ?-type fail-
ure transitions to accommodate for back-off arcs.
If we train, for each source sentence f , a sepa-
rate language model ALM (rf ) using only the ref-
erence rf , oracle decoding amounts to finding a
shortest (most probable) path in the weighted FSA
resulting from the composition L ?ALM (rf ) over
the (min,+)-semiring:
pi?LM (f) = ShortestPath(L ?ALM (rf )).
This approach replaces the optimization of n-
BLEU with a search for the most probable path
under a simplistic n-gram language model. One
may expect the most probable path to select fre-
quent n-gram from the reference, thus augment-
ing n-BLEU.
3.2 Partial BLEU Oracle (PB)
Another approach is put forward in (Dreyer et
al., 2007) and used in (Li and Khudanpur, 2009):
oracle translations are shortest paths in a lattice
L, where the weight of each path pi is the sen-
tence level log BLEU(pi) score of the correspond-
ing complete or partial hypothesis:
log BLEU(pi) =
1
4
?
m=1...4
log pm. (4)
Here, the brevity penalty is ignored and n-
gram precisions are offset to avoid null counts:
pm = (cm(epi, r) + 0.1)/(cm(epi) + 0.1).
This approach has been reimplemented using
the FST formalism by defining a suitable semir-
ing. Let each weight of the semiring keep a set
of tuples accumulated up to the current state of
the lattice. Each tuple contains three words of re-
cent history, a partial hypothesis as well as current
values of the length of the partial hypothesis, n-
gram counts (4 numbers) and the sentence-level
log BLEU score defined by Equation (4). In the
beginning each arc is initialized with a singleton
set containing one tuple with a single word as the
partial hypothesis. For the semiring operations we
define one common?-operation and two versions
of the ?-operation:
• L1 ?PB L2 – appends a word on the edge of
L2 to L1’s hypotheses, shifts their recent histories
and updates n-gram counts, lengths, and current
score; • L1 ?PB L2 – merges all sets from L1
and L2 and recombinates those having the same
recent history; • L1 ?PB` L2 – merges all sets
from L1 and L2 and recombinates those having
the same recent history and the same hypothesis
length.
If several hypotheses have the same recent
history (and length in the case of ?PB`), re-
combination removes all of them, but the one
123
q?
0:0/01:1/0
(a) ?1
q?
00:/10 
:/10
0:0010
:0100:010
:10
(b) ?2
q?
0
0:/10
:/10
0:/10 00
0:/10
00:/10 
:/10
:010
0:0010
:010
0:00100:010
:10
:0010
0:00010
(c) ?3
Figure 1: Examples of the ?n automata for ? = {0, 1} and n = 1 . . . 3. Initial and final states are marked,
respectively, with bold and with double borders. Note that arcs between final states are weighted with 0, while in
reality they will have this weight only if the corresponding n-gram does not appear in the reference.
with the largest current BLEU score. Optimal
path is then found by launching the generic
ShortestDistance(L) algorithm over one of
the semirings above.
The (?PB`,?PB)-semiring, in which the
equal length requirement also implies equal
brevity penalties, is more conservative in recom-
bining hypotheses and should achieve final BLEU
that is least as good as that obtained with the
(?PB,?PB)-semiring5.
4 Linear BLEU Oracle (LB)
In this section, we propose a new oracle based on
the linear approximation of the corpus BLEU in-
troduced in (Tromble et al., 2008). While this ap-
proximation was earlier used for Minimum Bayes
Risk decoding in lattices (Tromble et al., 2008;
Blackwood et al., 2010), we show here how it can
also be used to approximately compute an oracle
translation.
Given five real parameters ?0...4 and a word vo-
cabulary ?, Tromble et al. (2008) showed that one
can approximate the corpus-BLEU with its first-
order (linear) Taylor expansion:
lin BLEU(pi) = ?0 |epi|+
4?
n=1
?n
?
u??n
cu(epi)?u(r),
(5)
where cu(e) is the number of times the n-gram
u appears in e, and ?u(r) is an indicator variable
testing the presence of u in r.
To exploit this approximation for oracle decod-
ing, we construct four weighted FSTs ?n con-
taining a (final) state for each possible (n ? 1)-
5See, however, experiments in Section 6.
gram, and all weighted transitions of the kind
(?n?11 , ?n : ?
n
1 /?n × ??n1 (r), ?
n
2 ), where ?s are
in ?, input word sequence ?n?11 and output se-
quence ?n2 , are, respectively, the maximal prefix
and suffix of an n-gram ?n1 .
In supplement, we add auxiliary states corre-
sponding to m-grams (m < n ? 1), whose func-
tional purpose is to help reach one of the main
(n ? 1)-gram states. There are |?|
n?1?1
|?|?1 , n > 1,
such supplementary states and their transitions are
(?k1 , ?k+1 : ?
k+1
1 /0, ?
k+1
1 ), k = 1 . . . n?2. Apart
from these auxiliary states, the rest of the graph
(i.e., all final states) reproduces the structure of
the well-known de Bruijn graphB(?, n) (see Fig-
ure 1).
To actually compute the best hypothesis, we
first weight all arcs in the input FSA L with ?0 to
obtain ?0. This makes each word’s weight equal
in a hypothesis path, and the total weight of the
path in ?0 is proportional to the number of words
in it. Then, by sequentially composing ?0 with
other ?ns, we discount arcs whose output n-gram
corresponds to a matching n-gram. The amount
of discount is regulated by the ratio between ?n’s
for n > 0.
With all operations performed over the
(min,+)-semiring, the oracle translation is then
given by:
pi?LB = ShortestPath(?0??1??2??3??4).
We set parameters ?n as in (Tromble et al.,
2008): ?0 = 1, roughly corresponding to the
brevity penalty (each word in a hypothesis adds
up equally to the final path length) and ?n =
?(4p · rn?1)?1, which are increasing discounts
124
 0 0.2
 0.4 0.6
 0.8 1
p
 0
 0.2
 0.4
 0.6
 0.8
 1
r
 22
 24
 26
 28
 30
 32
 34
 36
BLEU
 22
 24
 26
 28
 30
 32
 34
 36
Figure 2: Performance of the LB-4g oracle for differ-
ent combinations of p and r on WMT11 de2en task.
for matching n-grams. The values of p and r were
found by grid search with a 0.05 step value. A
typical result of the grid evaluation of the LB or-
acle for German to English WMT’11 task is dis-
played on Figure 2. The optimal values for the
other pairs of languages were roughly in the same
ballpark, with p ? 0.3 and r ? 0.2.
5 Oracles with n-gram Clipping
In this section, we describe two new oracle de-
coders that take n-gram clipping into account.
These oracles leverage on the well-known fact
that the shortest path problem, at the heart of
all the oracles described so far, can be reduced
straightforwardly to an Integer Linear Program-
ming (ILP) problem (Wolsey, 1998). Once oracle
decoding is formulated as an ILP problem, it is
relatively easy to introduce additional constraints,
for instance to enforce n-gram clipping. We will
first describe the optimization problem of oracle
decoding and then present several ways to effi-
ciently solve it.
5.1 Problem Description
Throughout this section, abusing the notations,
we will also think of an edge ?i as a binary vari-
able describing whether the edge is “selected” or
not. The set {0, 1}#{?} of all possible edge as-
signments will be denoted by P . Note that ?, the
set of all paths in the lattice is a subset of P: by
enforcing some constraints on an assignment ? in
P , it can be guaranteed that it will represent a path
in the lattice. For the sake of presentation, we as-
sume that each edge ?i generates a single word
w(?i) and we focus first on finding the optimal
hypothesis with respect to the sentence approxi-
mation of the 1-BLEU score.
As 1-BLEU is decomposable, it is possible to
define, for every edge ?i, an associated reward, ?i
that describes the edge’s local contribution to the
hypothesis score. For instance, for the sentence
approximation of the 1-BLEU score, the rewards
are defined as:
?i =
{
?1 if w(?i) is in the reference,
??2 otherwise,
where ?1 and ?2 are two positive constants cho-
sen to maximize the corpus BLEU score6. Con-
stant ?1 (resp. ?2) is a reward (resp. a penalty)
for generating a word in the reference (resp. not in
the reference). The score of an assignment ? ? P
is then defined as: score(?) =
?#{?}
i=1 ?i · ?i. This
score can be seen as a compromise between the
number of common words in the hypothesis and
the reference (accounting for recall) and the num-
ber of words of the hypothesis that do not appear
in the reference (accounting for precision).
As explained in Section 2.3, finding the or-
acle hypothesis amounts to solving the shortest
distance (or path) problem (3), which can be re-
formulated by a constrained optimization prob-
lem (Wolsey, 1998):
arg max
??P
#{?}?
i=1
?i · ?i (6)
s.t.
?
????(qF )
? = 1,
?
???+(q0)
? = 1
?
???+(q)
? ?
?
????(q)
? = 0, q ? Q\{q0, qF }
where q0 (resp. qF ) is the initial (resp. final) state
of the lattice and ??(q) (resp. ?+(q)) denotes the
set of incoming (resp. outgoing) edges of state q.
These path constraints ensure that the solution of
the problem is a valid path in the lattice.
The optimization problem in Equation (6) can
be further extended to take clipping into account.
Let us introduce, for each word w, a variable ?w
that denotes the number of times w appears in the
hypothesis clipped to the number of times, it ap-
pears in the reference. Formally, ?w is defined by:
?w = min
?
?
?
?
???(w)
?, cw(r)
?
?
?
6We tried several combinations of ?1 and ?2 and kept
the one that had the highest corpus 4-BLEU score.
125
where ? (w) is the subset of edges generating w,
and
?
???(w) ? is the number of occurrences of
w in the solution and cw(r) is the number of oc-
currences of w in the reference r. Using the ?
variables, we define a “clipped” approximation of
1-BLEU:
?1 ·
?
w
?w ??2 ·
?
?
#{?}?
i=1
?i ?
?
w
?w
?
?
Indeed, the clipped number of words in the hy-
pothesis that appear in the reference is given by
?
w ?w, and
?#{?}
i=1 ?i ?
?
w ?w corresponds to
the number of words in the hypothesis that do not
appear in the reference or that are surplus to the
clipped count.
Finally, the clipped lattice oracle is defined by
the following optimization problem:
arg max
??P,?w
(?1 + ?2) ·
?
w
?w ??2 ·
#{?}?
i=1
?i
(7)
s.t. ?w ? 0, ?w ? cw(r), ?w ?
?
???(w)
?
?
????(qF )
? = 1,
?
???+(q0)
? = 1
?
???+(q)
? ?
?
????(q)
? = 0, q ? Q \ {q0, qF }
where the first three sets of constraints are the lin-
earization of the definition of ?w, made possible
by the positivity of ?1 and ?2, and the last three
sets of constraints are the path constraints.
In our implementation we generalized this op-
timization problem to bigram lattices, in which
each edge is labeled by the bigram it generates.
Such bigram FSAs can be produced by compos-
ing the word lattice with ?2 from Section 4. In
this case, the reward of an edge will be defined as
a combination of the (clipped) number of unigram
matches and bigram matches, and solving the op-
timization problem yields a 2-BLEU optimal hy-
pothesis. The approach can be further generalized
to higher-order BLEU or other metrics, as long as
the reward of an edge can be computed locally.
The constrained optimization problem (7) can
be solved efficiently using off-the-shelf ILP
solvers7.
7In our experiments we used Gurobi (Optimization,
2010) a commercial ILP solver that offers free academic li-
cense.
5.2 Shortest Path Oracle (SP)
As a trivial special class of the above formula-
tion, we also define a Shortest Path Oracle (SP)
that solves the optimization problem in (6). As
no clipping constraints apply, it can be solved ef-
ficiently using the standard Bellman algorithm.
5.3 Oracle Decoding through Lagrangian
Relaxation (RLX)
In this section, we introduce another method to
solve problem (7) without relying on an exter-
nal ILP solver. Following (Rush et al., 2010;
Chang and Collins, 2011), we propose an original
method for oracle decoding based on Lagrangian
relaxation. This method relies on the idea of re-
laxing the clipping constraints: starting from an
unconstrained problem, the counts clipping is en-
forced by incrementally strengthening the weight
of paths satisfying the constraints.
The oracle decoding problem with clipping
constraints amounts to solving:
arg min
???
?
#{?}?
i=1
?i · ?i (8)
s.t.
?
???(w)
? ? cw(r), w ? r
where, by abusing the notations, r also denotes
the set of words in the reference. For sake of clar-
ity, the path constraints are incorporated into the
domain (the arg min runs over ? and not over P).
To solve this optimization problem we consider its
dual form and use Lagrangian relaxation to deal
with clipping constraints.
Let ? = {?w}w?r be positive Lagrange mul-
tipliers, one for each different word of the refer-
ence, then the Lagrangian of the problem (8) is:
L(?, ?) = ?
#{?}?
i=1
?i?i+
?
w?r
?w
?
?
?
???(w)
? ? cw(r)
?
?
The dual objective is L(?) = min? L(?, ?)
and the dual problem is: max?,?0 L(?). To
solve the latter, we first need to work out the dual
objective:
?? = arg min
???
L(?, ?)
= arg min
???
#{?}?
i=1
?i
(
?w(?i) ? ?i
)
126
where we assume that ?w(?i) is 0 when word
w(?i) is not in the reference. In the same way
as in Section 5.2, the solution of this problem can
be efficiently retrieved with a shortest path algo-
rithm.
It is possible to optimize L(?) by noticing that
it is a concave function. It can be shown (Chang
and Collins, 2011) that, at convergence, the clip-
ping constraints will be enforced in the optimal
solution. In this work, we chose to use a simple
gradient descent to solve the dual problem. A sub-
gradient of the dual objective is:
?L(?)
??w
=
?
???(w)???
? ? cw(r).
Each component of the gradient corresponds to
the difference between the number of times the
word w appears in the hypothesis and the num-
ber of times it appears in the reference. The algo-
rithm below sums up the optimization of task (8).
In the algorithm ?(t) corresponds to the step size
at the tth iteration. In our experiments we used a
constant step size of 0.1. Compared to the usual
gradient descent algorithm, there is an additional
projection step of ? on the positive orthant, which
enforces the constraint ?  0.
?w, ?(0)w ? 0
for t = 1? T do
??(t) = arg min?
?
i ?i ·
(
?w(?i) ? ?i
)
if all clipping constraints are enforced
then optimal solution found
else for w ? r do
nw ? n. of occurrences of w in ??(t)
?(t)w ? ?
(t)
w + ?(t) · (nw ? cw(r))
?(t)w ? max(0, ?
(t)
w )
6 Experiments
For the proposed new oracles and the existing ap-
proaches, we compare the quality of oracle trans-
lations and the average time per sentence needed
to compute them8 on several datasets for 3 lan-
guage pairs, using lattices generated by two open-
source decoders: N-code and Moses9 (Figures 3
8Experiments were run in parallel on a server with 64G
of RAM and 2 Xeon CPUs with 4 cores at 2.3 GHz.
9As the ILP (and RLX) oracle were implemented in
Python, we pruned Moses lattices to accelerate task prepa-
ration for it.
decoder fr2en de2en en2de
te
st N-code 27.88 22.05 15.83
Moses 27.68 21.85 15.89
or
ac
le N-code 36.36 29.22 21.18
Moses 35.25 29.13 22.03
Table 2: Test BLEU scores and oracle scores on
100-best lists for the evaluated systems.
and 4). Systems were trained on the data provided
for the WMT’11 Evaluation task10, tuned on the
WMT’09 test data and evaluated on WMT’10 test
set11 to produce lattices. The BLEU test scores
and oracle scores on 100-best lists with the ap-
proximation (4) for N-code and Moses are given
in Table 2. It is not until considering 10,000-best
lists that n-best oracles achieve performance com-
parable to the (mediocre) SP oracle.
To make a fair comparison with the ILP and
RLX oracles which optimize 2-BLEU, we in-
cluded 2-BLEU versions of the LB and LM ora-
cles, identified below with the “-2g” suffix. The
two versions of the PB oracle are respectively
denoted as PB and PB`, by the type of the ?-
operation they consider (Section 3.2). Parame-
ters p and r for the LB-4g oracle for N-code were
found with grid search and reused for Moses:
p = 0.25, r = 0.15 (fr2en); p = 0.175, r = 0.575
(en2de) and p = 0.35, r = 0.425 (de2en). Cor-
respondingly, for the LB-2g oracle: p = 0.3, r =
0.15; p = 0.3, r = 0.175 and p = 0.575, r = 0.1.
The proposed LB, ILP and RLX oracles were
the best performing oracles, with the ILP and
RLX oracles being considerably faster, suffering
only a negligible decrease in BLEU, compared to
the 4-BLEU-optimized LB oracle. We stopped
RLX oracle after 20 iterations, as letting it con-
verge had a small negative effect (?1 point of the
corpus BLEU), because of the sentence/corpus dis-
crepancy ushered by the BLEU score approxima-
tion.
Experiments showed consistently inferior per-
formance of the LM-oracle resulting from the op-
timization of the sentence probability rather than
BLEU. The PB oracle often performed compara-
bly to our new oracles, however, with sporadic
resource-consumption bursts, that are difficult to
10http://www.statmt.org/wmt2011
11All BLEU scores are reported using the multi-bleu.pl
script.
127
 25
 30
 35
 40
 45
 50
RLX ILP LB-4g LB-2g PB PBl SP LM-4g LM-2g  0
 1
 2
 3
 4
 5
 6
BLE
U
avg
. tim
e, s
BLEU
47.8
2
48.1
2
48.2
2
47.7
1
46.7
6
46.4
8
41.2
3
38.9
1
38.7
5
avg. time
(a) fr2en
 25
 30
 35
RLX ILP LB-4g LB-2g PB PBl SP LM-4g LM-2g  0
 0.5
 1
 1.5
BLE
U
avg
. tim
e, s
BLEU
34.7
9
34.7
0 35.4
9
35.0
9
34.8
5
34.7
6
30.7
8
29.5
3
29.5
3
avg. time
(b) de2en
 15
 20
 25
 30
RLX ILP LB-4g LB-2g PB PBl SP LM-4g LM-2g  0
 0.5
 1
BLE
U
avg
. tim
e, s
BLEU
24.7
5
24.6
6 25.3
4
24.8
5
24.7
8
24.7
3
22.1
9
20.7
8
20.7
4
avg. time
(c) en2de
Figure 3: Oracles performance for N-code lattices.
 25
 30
 35
 40
 45
 50
RLX ILP LB-4g LB-2g PB PBl SP LM-4g LM-2g  0
 1
 2
 3
BLE
U
avg
. tim
e, s
BLEU
43.8
2
44.0
8
44.4
4
43.8
2
43.4
2
43.2
0
41.0
3
36.3
4
36.2
5
avg. time
(a) fr2en
 25
 30
 35
RLX ILP LB-4g LB-2g PB PBl SP LM-4g LM-2g  0
 1
 2
 3
 4
BLE
U
avg
. tim
e, s
BLEU
36.4
3 36.9
1 37.7
3
36.5
2
36.7
5
36.6
2
30.5
2
29.5
1
29.4
5
avg. time
(b) de2en
 15
 20
 25
 30
RLX ILP LB-4g LB-2g PB PBl SP LM-4g LM-2g  0
 1
 2
 3
 4
 5
 6
 7
 8
 9
BLE
U
avg
. tim
e, s
BLEU
28.6
8
28.6
4 29.
94
28.9
4
28.7
6
28.6
5
26.4
8
21.2
9
21.2
3
avg. time
(c) en2de
Figure 4: Oracles performance for Moses lattices pruned with parameter -b 0.5.
avoid without more cursory hypotheses recom-
bination strategies and the induced effect on the
translations quality. The length-aware PB` oracle
has unexpectedly poorer scores compared to its
length-agnostic PB counterpart, while it should,
at least, stay even, as it takes the brevity penalty
into account. We attribute this fact to the com-
plex effect of clipping coupled with the lack of
control of the process of selecting one hypothe-
sis among several having the same BLEU score,
length and recent history. Anyhow, BLEU scores
of both of PB oracles are only marginally differ-
ent, so the PB`’s conservative policy of pruning
and, consequently, much heavier memory con-
sumption makes it an unwanted choice.
7 Conclusion
We proposed two methods for finding oracle
translations in lattices, based, respectively, on a
linear approximation to the corpus-level BLEU
and on integer linear programming techniques.
We also proposed a variant of the latter approach
based on Lagrangian relaxation that does not rely
on a third-party ILP solver. All these oracles have
superior performance to existing approaches, in
terms of the quality of the found translations, re-
source consumption and, for the LB-2g oracles,
in terms of speed. It is thus possible to use bet-
ter approximations of BLEU than was previously
done, taking the corpus-based nature of BLEU, or
clipping constrainst into account, delivering better
oracles without compromising speed.
Using 2-BLEU and 4-BLEU oracles yields com-
parable performance, which confirms the intuition
that hypotheses sharing many 2-grams, would
likely have many common 3- and 4-grams as well.
Taking into consideration the exceptional speed of
the LB-2g oracle, in practice one can safely opti-
mize for 2-BLEU instead of 4-BLEU, saving large
amounts of time for oracle decoding on long sen-
tences.
Overall, these experiments accentuate the
acuteness of scoring problems that plague modern
decoders: very good hypotheses exist for most in-
put sentences, but are poorly evaluated by a linear
combination of standard features functions. Even
though the tuning procedure can be held respon-
sible for part of the problem, the comparison be-
tween lattice and n-best oracles shows that the
beam search leaves good hypotheses out of the n-
best list until very high value of n, that are never
used in practice.
Acknowledgments
This work has been partially funded by OSEO un-
der the Quaero program.
128
References
Cyril Allauzen, Michael Riley, Johan Schalkwyk, Wo-
jciech Skut, and Mehryar Mohri. 2007. OpenFst:
A general and efficient weighted finite-state trans-
ducer library. In Proc. of the Int. Conf. on Imple-
mentation and Application of Automata, pages 11–
23.
Michael Auli, Adam Lopez, Hieu Hoang, and Philipp
Koehn. 2009. A systematic analysis of translation
model search spaces. In Proc. of WMT, pages 224–
232, Athens, Greece.
Satanjeev Banerjee and Alon Lavie. 2005. ME-
TEOR: An automatic metric for MT evaluation with
improved correlation with human judgments. In
Proc. of the ACL Workshop on Intrinsic and Extrin-
sic Evaluation Measures for Machine Translation,
pages 65–72, Ann Arbor, MI, USA.
Graeme Blackwood, Adria` de Gispert, and William
Byrne. 2010. Efficient path counting transducers
for minimum bayes-risk decoding of statistical ma-
chine translation lattices. In Proc. of the ACL 2010
Conference Short Papers, pages 27–32, Strouds-
burg, PA, USA.
Yin-Wen Chang and Michael Collins. 2011. Exact de-
coding of phrase-based translation models through
lagrangian relaxation. In Proc. of the 2011 Conf. on
EMNLP, pages 26–37, Edinburgh, UK.
David Chiang, Yuval Marton, and Philip Resnik.
2008. Online large-margin training of syntactic
and structural translation features. In Proc. of the
2008 Conf. on EMNLP, pages 224–233, Honolulu,
Hawaii.
Markus Dreyer, Keith B. Hall, and Sanjeev P. Khu-
danpur. 2007. Comparing reordering constraints
for SMT using efficient BLEU oracle computation.
In Proc. of the Workshop on Syntax and Structure
in Statistical Translation, pages 103–110, Morris-
town, NJ, USA.
Gregor Leusch, Evgeny Matusov, and Hermann Ney.
2008. Complexity of finding the BLEU-optimal hy-
pothesis in a confusion network. In Proc. of the
2008 Conf. on EMNLP, pages 839–847, Honolulu,
Hawaii.
Zhifei Li and Sanjeev Khudanpur. 2009. Efficient
extraction of oracle-best translations from hyper-
graphs. In Proc. of Human Language Technolo-
gies: The 2009 Annual Conf. of the North Ameri-
can Chapter of the ACL, Companion Volume: Short
Papers, pages 9–12, Morristown, NJ, USA.
Percy Liang, Alexandre Bouchard-Coˆte´, Dan Klein,
and Ben Taskar. 2006. An end-to-end discrim-
inative approach to machine translation. In Proc.
of the 21st Int. Conf. on Computational Linguistics
and the 44th annual meeting of the ACL, pages 761–
768, Morristown, NJ, USA.
Mehryar Mohri. 2002. Semiring frameworks and al-
gorithms for shortest-distance problems. J. Autom.
Lang. Comb., 7:321–350.
Mehryar Mohri. 2009. Weighted automata algo-
rithms. In Manfred Droste, Werner Kuich, and
Heiko Vogler, editors, Handbook of Weighted Au-
tomata, chapter 6, pages 213–254.
Gurobi Optimization. 2010. Gurobi optimizer, April.
Version 3.0.
Kishore Papineni, Salim Roukos, Todd Ward, and
Wei-Jing Zhu. 2002. BLEU: a method for auto-
matic evaluation of machine translation. In Proc. of
the Annual Meeting of the ACL, pages 311–318.
Alexander M. Rush, David Sontag, Michael Collins,
and Tommi Jaakkola. 2010. On dual decomposi-
tion and linear programming relaxations for natural
language processing. In Proc. of the 2010 Conf. on
EMNLP, pages 1–11, Stroudsburg, PA, USA.
Matthew Snover, Bonnie Dorr, Richard Schwartz, Lin-
nea Micciulla, and John Makhoul. 2006. A study
of translation edit rate with targeted human anno-
tation. In Proc. of the Conf. of the Association for
Machine Translation in the America (AMTA), pages
223–231.
Roy W. Tromble, Shankar Kumar, Franz Och, and
Wolfgang Macherey. 2008. Lattice minimum
bayes-risk decoding for statistical machine transla-
tion. In Proc. of the Conf. on EMNLP, pages 620–
629, Stroudsburg, PA, USA.
Marco Turchi, Tijl De Bie, and Nello Cristianini.
2008. Learning performance of a machine trans-
lation system: a statistical and computational anal-
ysis. In Proc. of WMT, pages 35–43, Columbus,
Ohio.
Guillaume Wisniewski, Alexandre Allauzen, and
Franc¸ois Yvon. 2010. Assessing phrase-based
translation models with oracle decoding. In Proc.
of the 2010 Conf. on EMNLP, pages 933–943,
Stroudsburg, PA, USA.
L. Wolsey. 1998. Integer Programming. John Wiley
& Sons, Inc.
129
