Proceedings of the 12th Conference of the European Chapter of the ACL, pages 763–771,
Athens, Greece, 30 March – 3 April 2009. c©2009 Association for Computational Linguistics
Semi-supervised Training for the Averaged Perceptron POS Tagger
Drahom?´ra “johanka” Spoustova´ Jan Hajic? Jan Raab Miroslav Spousta
Institute of Formal and Applied Linguistics
Faculty of Mathematics and Physics,
Charles University Prague, Czech Republic
{johanka,hajic,raab,spousta}@
ufal.mff.cuni.cz
Abstract
This paper describes POS tagging exper-
iments with semi-supervised training as
an extension to the (supervised) averaged
perceptron algorithm, first introduced for
this task by (Collins, 2002). Experiments
with an iterative training on standard-sized
supervised (manually annotated) dataset
(106 tokens) combined with a relatively
modest (in the order of 108 tokens) un-
supervised (plain) data in a bagging-like
fashion showed significant improvement
of the POS classification task on typo-
logically different languages, yielding bet-
ter than state-of-the-art results for English
and Czech (4.12 % and 4.86 % relative er-
ror reduction, respectively; absolute accu-
racies being 97.44 % and 95.89 %).
1 Introduction
Since 2002, we have seen a renewed interest in
improving POS tagging results for English, and
an inflow of results (initial or improved) for many
other languages. For English, after a relatively big
jump achieved by (Collins, 2002), we have seen
two significant improvements: (Toutanova et al.,
2003) and (Shen et al., 2007) pushed the results
by a significant amount each time.1
1In our final comparison, we have also included the re-
sults of (Gime´nez and Ma`rquez, 2004), because it has sur-
passed (Collins, 2002) as well and we have used this tag-
ger in the data preparation phase. See more details below.
Most recently, (Suzuki and Isozaki, 2008) published their
Semi-supervised sequential labelling method, whose results
on POS tagging seem to be optically better than (Shen et al.,
2007), but no significance tests were given and the tool is not
available for download, i.e. for repeating the results and sig-
nificance testing. Thus, we compare our results only to the
tools listed above.
Even though an improvement in POS tagging
might be a questionable enterprise (given that its
effects on other tasks, such as parsing or other
NLP problems are less than clear—at least for En-
glish), it is still an interesting problem. Moreover,
the “ideal”2 situation of having a single algorithm
(and its implementation) for many (if not all) lan-
guages has not been reached yet. We have cho-
sen Collins’ perceptron algorithm because of its
simplicity, short training times, and an apparent
room for improvement with (substantially) grow-
ing data sizes (see Figure 1). However, it is clear
that there is usually little chance to get (substan-
tially) more manually annotated data. Thus, we
have been examining the effect of adding a large
monolingual corpus to Collins’ perceptron, appro-
priately extended, for two typologically different
languages: English and Czech. It is clear however
that the features (feature templates) that the tag-
gers use are still language-dependent.
One of the goals is also to have a fast im-
plementation for tagging large amounts of data
quickly. We have experimented with various clas-
sifier combination methods, such as those de-
scribed in (Brill and Wu, 1998) or (van Halteren et
al., 2001), and got improved results, as expected.
However, we view this only as a side effect (yet, a
positive one)—our goal was to stay on the turf of
single taggers, which are both the common ground
for competing on tagger accuracy today and also
significantly faster at runtime.3 Nevertheless, we
have found that it is advantageous to use them to
(pre-)tag the large amounts of plain text data dur-
2We mean easy to use for further research on problems
requiring POS tagging, especially multilingual ones.
3And much easier to (re)implement as libraries in proto-
type systems, which is often difficult if not impossible with
other people’s code.
763
Training data size (thousands of tokens)
Accu
racy
 on d
evel
opm
ent d
ata
100 200 300 400 500 600 700 800 900
96.0
96.5
97.0
97.5
98.0
Figure 1: Accuracy of the original averaged per-
ceptron, supervised training on PTB/WSJ (En-
glish)
ing the training phase.
Apart from feeding the perceptron by various
mixtures of manually tagged (“supervised”) and
auto-tagged (“unsupervised”)4 data, we have also
used various feature templates extensively; for ex-
ample, we use lexicalization (with the added twist
of lemmatization, useful especially for Czech, an
inflectionally rich language), “manual” tag clas-
sification into large classes (again, useful espe-
cially for Czech to avoid the huge, still-to-be-
overcome data sparseness for such a language5),
and sub-lexical features mainly targeted at OOV
words. Inspired i.a. by (Toutanova et al., 2003)
and (Hajic? and Vidova´-Hladka´, 1998), we also use
“lookahead” features (however, we still remain
in the left-to-right HMM world – in this respect
our solution is closer to the older work of (Hajic?
and Vidova´-Hladka´, 1998) than to (Toutanova et
al., 2003), who uses bidirectional dependencies
to include the right-hand side disambiguated tags,
4For brevity, we will use the terms “supervised” and “un-
supervised” data for “manually annotated” and “(automat-
ically annotated) plain (raw) text” data, respectively, even
though these adjectives are meant to describe the process of
learning, not the data themselves.
5As (Hajic?, 2004) writes, Czech has 4400 plausible tags,
of which we have observed almost 2000 in the 100M cor-
pus we have used in our experiments. However, only 1100
of them have been found in the manually annotated PDT 2.0
corpus (the corpus on which we have based the supervised
experiments). The situation with word forms (tokens) is even
worse: Czech has about 20M different word forms, and the
OOV rate based on the 1.5M PDT 2.0 data and measured
against the 100M raw corpus is almost 10 %.
which we cannot.)
To summarize, we can describe our system as
follows: it is based on (Votrubec, 2006)’s imple-
mentation of (Collins, 2002), which has been fed
at each iteration by a different dataset consisting
of the supervised and unsupervised part: precisely,
by a concatenation of the manually tagged training
data (WSJ portion of the PTB 3 for English, mor-
phologically disambiguated data from PDT 2.0 for
Czech) and a chunk of automatically tagged unsu-
pervised data. The “parameters” of the training
process (feature templates, the size of the unsu-
pervised chunks added to the trainer at each itera-
tion, number of iterations, the combination of tag-
gers that should be used in the auto-tagging of the
unsupervised chunk, etc.) have been determined
empirically in a number of experiments on a de-
velopment data set. We should also note that as a
result of these development-data-based optimiza-
tions, no feature pruning has been employed (see
Section 4 for details); adding (even lexical) fea-
tures from the auto-tagged data did not give signif-
icant accuracy improvements (and only made the
training very slow).
The final taggers have surpassed the current
state-of-the-art taggers by significant margins (we
have achieved 4.12 % relative error reduction for
English and 4.86 % for Czech over the best pre-
viously published results, single or combined),
using a single tagger. However, the best En-
glish tagger combining some of the previous state-
of-the-art ones is still “optically” better (yet not
significantly—see Section 6).
2 The perceptron algorithm
We have used the Morc?e6 tagger (Votrubec, 2006)
as a main component in our experiments. It is a
reimplementation of the averaged perceptron de-
scribed in (Collins, 2002), which uses such fea-
tures that it behaves like an HMM tagger and thus
the standard Viterbi decoding is possible. Collins’
GEN(x) set (a set of possible tags at any given
position) is generated, in our case, using a mor-
phological analyzer for the given language (essen-
6The name “Morc?e” stands for “MORfologie C?Es?tiny”
(“Czech morphology”, see (Votrubec, 2006)), since it
has been originally developed for Czech. We keep this
name in this paper as the generic name of the aver-
aged perceptron tagger for the English-language experi-
ments as well. We have used the version available at
http://ufal.mff.cuni.cz/morce/.
764
tially, a dictionary that returns all possible tags7
for an input word form). The transition and out-
put scores for the candidate tags are based on a
large number of binary-valued features and their
weights, which are determined during iterative
training by the averaged perceptron algorithm.
The binary features describe the tag being pre-
dicted and its context. They can be derived from
any information we already have about the text at
the point of decision (respecting the HMM-based
overall setting). Every feature can be true or false
in a given context, so we can consider the true fea-
tures at the current position to be the description
of a tag and its context.
For every feature, the perceptron keeps its
weight coefficient, which is (in its basic version)
an integer number, (possibly) changed at every
training sentence. After its final update, this in-
teger value is stored with the feature to be later
retrieved and used at runtime. Then, the task of
the perceptron algorithm is to sum up all the co-
efficients of true features in a given context. The
result is passed to the Viterbi algorithm as a tran-
sition and output weight for the current state.8 We
can express it as
w(C, T ) =
n?
i=1
?i.?i(C, T ) (1)
where w(C, T ) is the transition weight for tag T
in context C, n is the number of features, ?i is the
weight coefficient of the ith feature and ?i(C, T )
is the evaluation of the ith feature for context C
and tag T . In the averaged perceptron, the val-
ues of every coefficient are added up at each up-
date, which happens (possibly) at each training
sentence, and their arithmetic average is used in-
stead.9 This trick makes the algorithm more re-
sistant to weight oscillations during training (or,
more precisely, at the end of it) and as a result, it
substantially improves its performance.10
7And lemmas, which are then used in some of the fea-
tures. A (high recall, low precision) “guesser” is used for
OOV words.
8Which identifies unambiguously the corresponding tag.
9Implementation note: care must be taken to avoid inte-
ger overflows, which (at 100 iterations through millions of
sentences) can happen for 32bit integers easily.
10Our experiments have shown that using averaging helps
tremendously, confirming both the theoretical and practical
results of (Collins, 2002). On Czech, using the best feature
set, the difference on the development data set is 95.96 % vs.
95.02 %. Therefore, all the results presented in the following
text use averaging.
The supervised training described in (Collins,
2002) uses manually annotated data for the esti-
mation of the weight coefficients ?. The train-
ing algorithm is very simple—only integer num-
bers (counts and their sums for the averaging) are
updated for each feature at each sentence with
imperfect match(es) found against the gold stan-
dard. Therefore, it can be relatively quickly re-
trained and thus many different feature sets and
other training parameters, such as the number of
iterations, feature thresholds etc. can be con-
sidered and tested. As a result of this tuning,
our (fully supervised) version of the Morc?e tag-
ger gives the best accuracy among all single tag-
gers for Czech and also very good results for En-
glish, being beaten only by the tagger (Shen et al.,
2007) (by 0.10 % absolute) and (not significantly)
by (Toutanova et al., 2003).
3 The data
3.1 The “supervised” data
For English, we use the same data division of Penn
Treebank (PTB) parsed section (Marcus et al.,
1994) as all of (Collins, 2002), (Toutanova et al.,
2003), (Gime´nez and Ma`rquez, 2004) and (Shen
et al., 2007) do; for details, see Table 1.
data set tokens sentences
train (0-18) 912,344 38,220
dev-test (19-21) 131,768 5,528
eval-test (22-24) 129,654 5,463
Table 1: English supervised data set — WSJ part
of Penn Treebank 3
For Czech, we use the current standard Prague
Dependency Treebank (PDT 2.0) data sets (Hajic?
et al., 2006); for details, see Table 2.
data set tokens sentences
train 1,539,241 91,049
dev-test 201,651 11,880
eval-test 219,765 13,136
Table 2: Czech supervised data set — Prague De-
pendency Treebank 2.0
3.2 The “unsupervised” data
For English, we have processed the North Amer-
ican News Text corpus (Graff, 1995) (without the
765
WSJ section) with the Stanford segmenter and to-
kenizer (Toutanova et al., 2003). For Czech, we
have used the SYN2005 part of Czech National
Corpus (CNC, 2005) (with the original segmenta-
tion and tokenization).
3.3 GEN(x): The morphological analyzers
For English, we perform a very simple morpholog-
ical analysis, which reduces the full PTB tagset to
a small list of tags for each token on input. The re-
sulting list is larger than such a list derived solely
from the PTB/WSJ, but much smaller than a full
list of tags found in the PTB/WSJ.11 The English
morphological analyzer is thus (empirically) opti-
mized for precision while keeping as high recall
as possible (it still overgenerates). It consists of a
small dictionary of exceptions and a small set of
general rules, thus covering also a lot of OOV to-
kens.12
For Czech, the separate morphological analyzer
(Hajic?, 2004) usually precedes the tagger. We use
the version from April 2006 (the same as (Spous-
tova´ et al., 2007), who reported the best previous
result on Czech tagging).
4 The perceptron feature sets
The averaged perceptron’s accuracy is determined
(to a large extent) by the set of features used. A
feature set is based on feature templates, i.e. gen-
eral patterns, which are filled in with concrete val-
ues from the training data. Czech and English
are morphosyntactically very different languages,
therefore each of them needs a different set of
feature templates. We have empirically tested
hundreds of feature templates on both languages,
taken over from previous works for direct compar-
ison, inspired by them, or based on a combination
of previous experience, error analysis and linguis-
tic intuition.
In the following sections, we present the best
performing set of feature templates as determined
on the development data set using only the super-
vised training setting; our feature templates have
thus not been influenced nor extended by the un-
supervised data.13
11The full list of tags, as used by (Shen et al., 2007), also
makes the underlying Viterbi algorithm unbearably slow.
12The English morphology tool is also downloadable as a
separate module on the paper’s accompanying website.
13Another set of experiments has shown that there is not,
perhaps surprisingly, a significant gain in doing so.
4.1 English feature templates
The best feature set for English consists of 30 fea-
ture templates. All templates predict the current
tag as a whole. A detailed description of the En-
glish feature templates can be found in Table 3.
Context predicting whole tag
Tags
Previous tag
Previous two tags
First letter of previous tag
Word forms
Current word form
Previous word form
Previous two word forms
Following word form
Following two word forms
Last but one word form
Current word affixes
Prefixes of length 1-9
Suffixes of length 1-9
Current word features
Contains number
Contains dash
Contains upper case letter
Table 3: Feature templates for English
A total of 1,953,463 features has been extracted
from the supervised training data using the tem-
plates from Table 3.
4.2 Czech feature templates
The best feature set for Czech consists of 63 fea-
ture templates. 26 of them predict current tag as
a whole, whereas the rest predicts only some parts
of the current tag separately (e.g., detailed POS,
gender, case) to avoid data sparseness. Such a fea-
ture is true, in an identical context, for several dif-
ferent tags belonging to the same class (e.g., shar-
ing a locative case). The individual grammatical
categories used for such classing have been cho-
sen on both linguistic grounds (POS, detailed fine-
grained POS) and also such categories have been
used which contribute most to the elimination of
the tagger errors (based on an extensive error anal-
ysis of previous results, the detailed description of
which can be found in (Votrubec, 2006)).
Several features can look ahead (to the right
of the current position) - apart from the obvious
word form, which is unambiguous, we have used
(in case of ambiguity) a random tag and lemma of
the first position to the right from the current po-
sition which might be occupied with a verb (based
on dictionary and the associated morphological
guesser restrictions).
A total of 8,440,467 features has been extracted
from the supervised training data set. A detailed
description is included in the distribution down-
loadable from the Morc?e website.
766
5 The (un)supervised training setup
We have extended the averaged perceptron setup
in the following way: the training algorithm is
fed, in each iteration, by a concatenation of the
supervised data (the manually tagged corpus) and
the automatically pre-tagged unsupervised data,
different for each iteration (in this order). In
other words, the training algorithm proper does
not change at all: it is the data and their selection
(including the selection of the way they are auto-
matically tagged) that makes all the difference.
The following “parameters” of the (unsuper-
vised part of the) data selection had to be deter-
mined experimentally:
• the tagging process for tagging the selected
data
• the selection mechanism (sequential or ran-
dom with/without replacement)
• the size to use for each iteration
• and the use and order of concatenation with
the manually tagged data.
We have experimented with various settings to
arrive at the best performing configuration, de-
scribed below. In each subsection, we compare
the result of our ,,winning“ configuration with re-
sults of the experiments which have the selected
attributes omitted or changed; everything is mea-
sured on the development data set.
5.1 Tagging the plain data
In order to simulate the labeled training events,
we have tagged the unsupervised data simply by
a combination of the best available taggers. For
practical reasons (to avoid prohibitive training
times), we have tagged all the data in advance, i.e.
no re-tagging is performed between iterations.
The setup for the combination is as follows (the
idea is simplified from (Spoustova´ et al., 2007)
where it has been used in a more complex setting):
1. run N different taggers independently;
2. join the results on each position in the data
from the previous step — each token thus
ends up with between 1 and N tags, a union
of the tags output by the taggers at that posi-
tion;
3. do final disambiguation (by a single tag-
ger14).
Tagger Accuracy
Morc?e 97.21
Shen 97.33
Combination 97.44
Table 4: Dependence on the tagger(s) used to tag
the additional plain text data (English)16
Table 4 illustrates why it is advantageous to go
through this (still)16 complicated setup against a
single-tagger bootstrapping mechanism, which al-
ways uses the same tagger for tagging the unsu-
pervised data.
For both English and Czech, the selection of
taggers, the best combination and the best over-
all setup has been optimized on the development
data set. A bit surprisingly, the final setup is very
similar for both languages (two taggers to tag the
data in Step 1, and a third one to finish it up).
For English, we use three state-of-the-art tag-
gers: the taggers of (Toutanova et al., 2003) and
(Shen et al., 2007) in Step 1, and the SVM tag-
ger (Gime´nez and Ma`rquez, 2004) in Step 3. We
run the taggers with the parameters which were
shown to be the best in the corresponding papers.
The SVM tagger needed to be adapted to accept
the (reduced) list of possible tags.17
For Czech, we use the Feature-based tagger
(Hajic?, 2004) and the Morc?e tagger (with the new
feature set as described in section 4) in Step 1, and
an HMM tagger (Krbec, 2005) in Step 3. This
combination outperforms the results in (Spoustova´
et al., 2007) by a small margin.
5.2 Selection mechanism for the plain data
We have found that it is better to feed the training
with different chunks of the unsupervised data at
each iteration. We have then experimented with
14This tagger (possibly different from any of theN taggers
from Step 1) runs as usual, but it is given a minimal list of (at
most N ) tags that come from Step 2 only.
15”Accuracy” means accuracy of the semi-supervised
method using this tagger for pre-tagging the unsupervised
data, not the accuracy of the tagger itself.
16In fact, we have experimented with other tagger
combinations and configurations as well—with the TnT
(Brants, 2000), MaxEnt (Ratnaparkhi, 1996) and TreeTag-
ger (Schmid, 1994), with or without the Morc?e tagger in the
pack; see below for the winning combination.
17This patch is available on the paper’s website (see Sec-
tion 7).
767
three methods of unsupervised data selection, i.e.
generating the unsupervised data chunks for each
training iteration from the ,,pool“ of sentences.
These methods are: simple sequential chopping,
randomized data selection with replacement and
randomized selection without replacement. Ta-
ble 5 demonstrates that there is practically no dif-
ference in the results. Thus, we use the sequential
chopping mechanism, mainly for its simplicity.
Method of data selection English Czech
Sequential chopping 97.44 96.21
Random without replacement 97.44 96.20
Random with replacement 97.44 96.21
Table 5: Unsupervised data selection
5.3 Joining the data
We have experimented with various sizes of the
unsupervised parts (from 500k tokens to 5M) and
also with various numbers of iterations. The best
results (on the development data set) have been
achieved with the unsupervised chunks containing
approx. 4 million tokens for English and 1 million
tokens for Czech. Each training process consists
of (at most) 100 iterations (Czech) or 50 iterations
(English); therefore, for the 50 (100) iterations we
needed only about 200,000,000 (100,000,000) to-
kens of raw texts. The best development data set
results have been (with the current setup) achieved
on the 44th (English) and 33th (Czech) iteration.
The development data set has been also used to
determine the best way to “merge” the manually
labeled data (the PTB/WSJ and the PDT 2.0 train-
ing data) and the unsupervised parts of the data.
Given the properties of the perceptron algorithm,
it is not too surprising that the best solution is to
put (the full size of) the manually labeled data first,
followed by the (four) million-token chunk of the
automatically tagged data (different data in each
chunk but of the same size for each iteration). It
corresponds to the situation when the trainer is pe-
riodically “returned to the right track” by giving it
the gold standard data time to time.
Figure 2 (English) and especially Figure 3
(Czech) demonstrate the perceptron behavior in
cases where the supervised data precede the un-
supervised data only in selected iterations. A sub-
set of these development results is also present in
Table 6.
0 10 20 30 40 509
7.20
97.2
5
97.3
0
97.3
5
97.4
0
Iteration
Accu
racy
 on d
evel
opm
ent d
ata
Every iterationEvery 4th iterationEvery 8th iterationEvery 16th iterationOnce at the beginning    No supervised data
Figure 2: Dependence on the inclusion of the su-
pervised training data (English)
English Czech
No supervised data 97.37 95.88
Once at the beginning 97.40 96.00
Every training iteration 97.44 96.21
Table 6: Dependence on the inclusion of the su-
pervised training data
5.4 The morphological analyzers and the
perceptron feature templates
The whole experiment can be performed with
the original perceptron feature set described in
(Collins, 2002) instead of the feature set described
in this article. The results are compared in Table 7
(for English only).
Also, for English it is not necessary to use our
morphological analyzer described in section 3.3
(other variants are to use the list of tags derived
solely from the WSJ training data or to give each
token the full list of tags found in WSJ). It is
practically impossible to perform the unsupervised
training with the full list of tags (it would take sev-
eral years instead of several days with the default
setup), thus we compare only the results with mor-
phological analyzer to the results with the list of
tags derived from the training data, see Table 8.
It can be expected (some approximated exper-
iments were performed) that the results with the
full list of tags would be very similar to the results
with the morphological analyzer, i.e. the morpho-
logical analyzer is used mainly for technical rea-
sons. Our expectations are based mainly (but not
768
0 10 20 30 40 50
95.6
95.7
95.8
95.9
96.0
96.1
96.2
Iteration
Accu
racy
 on d
evel
opm
ent d
ata
Every iterationEvery 4th iterationEvery 8th iterationEvery 16th iterationOnce at the beginning    No supervised data
Figure 3: Dependence on the inclusion of the su-
pervised training data (Czech)
only) on the supervised training results, where the
performance of the taggers using the morpholog-
ical analyzer output and using the full list of tags
are nearly the same, see Table 9.
Feature set Accuracy
Collins’ 97.38
Our’s 97.44
Table 7: Dependence on the feature set used by the
perceptron algorithm (English)
GEN(x) Accuracy
List of tags derived from train 97.13
Our morphological analyzer 97.44
Table 8: Dependence on the GEN(x)
6 Results
In Tables 10 and 11, the main results (on the eval-
test data sets) are summarized. The state-of-the
art taggers are using feature sets discribed in the
corresponding articles ((Collins, 2002), (Gime´nez
and Ma`rquez, 2004), (Toutanova et al., 2003) and
(Shen et al., 2007)), Morc?e supervised and Morc?e
semi-supervised are using feature set desribed in
section 4.
For significance tests, we have used the paired
Wilcoxon signed rank test as implemented in the
R package (R Development Core Team, 2008)
GEN(x) Accuracy
List of tags derived from train 95.89
Our morphological analyzer 97.17
Full tagset 97.15
Table 9: Supervised training results: dependence
on the GEN(x)
Tagger accuracy
Collins 97.07 %
SVM 97.16 %
Stanford 97.24 %
Shen 97.33 %
Morc?e supervised 97.23 %
combination 97.48 %
Morc?e semi-supervised 97.44 %
Table 10: Evaluation of the English taggers
Tagger accuracy
Feature-based 94.04 %
HMM 94.82 %
Morc?e supervised 95.67 %
combination 95.70 %
Morc?e semi-supervised 95.89 %
Table 11: Evaluation of the Czech taggers
in wilcox.test(), dividing the data into 100
chunks (data pairs).
6.1 English
The combination of the three existing English tag-
gers seems to be best, but it is not significantly
better than our semi-supervised approach.
The combination is significantly better than
(Shen et al., 2007) at a very high level, but more
importantly, Shen’s results (currently represent-
ing the replicable state-of-the-art in POS tagging)
have been significantly surpassed also by the semi-
supervised Morc?e (at the 99 % confidence level).
In addition, the semi-supervised Morc?e per-
forms (on single CPU and development data set)
77 times faster than the combination and 23 times
faster than (Shen et al., 2007).
6.2 Czech
The best results (Table 11) are statistically signif-
icantly better than the previous results: the semi-
supervised Morc?e is significantly better than both
769
the combination and the supervised (original) vari-
ant at a very high level.
7 Download
We decided to publish our system for wide use un-
der the name COMPOST (Common POS Tagger).
All the programs, patches and data files are avail-
able at the website http://ufal.mff.cuni.cz/compost
under either the original data provider license, or
under the usual GNU General Public License, un-
less they are available from the widely-known and
easily obtainable sources (such as the LDC, in
which case pointers are provided on the download
website).
The Compost website also contains easy-to-run
Linux binaries of the best English and Czech sin-
gle taggers (based on the Morc?e technology) as de-
scribed in Section 6.
8 Conclusion and Future Work
We have shown that the “right”18 mixture of su-
pervised and unsupervised (auto-tagged) data can
significantly improve tagging accuracy of the av-
eraged perceptron on two typologically different
languages (English and Czech), achieving the best
known accuracy to date.
To determine what is the contribution of the in-
dividual ”dimensions” of the system setting, as
described in Sect. 5, we have performed exper-
iments fixing all but one of the dimensions, and
compared their contribution (or rather, their loss
when compared to the best ”mix” overall). For
English, we found that excluding the state-of-the-
art-tagger (in fact, a carefully selected combina-
tion of taggers yielding significantly higher qual-
ity than any of them has) drops the resulting ac-
curacy the most (0.2 absolute). Significant yet
smaller drop (less than 0.1 percent) appears when
the manually tagged portion of the data is not used
or used only once (or infrequently) in the input
to the perceptron’s learner. The difference in us-
ing various feature templates (yet all largely sim-
ilar to what state-of-the-art taggers currently use)
is not significant. Similarly, the way the unsuper-
vised data is selected plays no role, either; this dif-
fers from the bagging technique (Breiman, 1996)
where it is significant. For Czech, the drop in ac-
curacy appears in all dimensions, except the unsu-
pervised data selection one. We have used novel
features inspired by previous work but not used in
18As empirically determined on the development data set.
the standard perceptron setting yet (linguistically
motivated tag classes in features, lookahead fea-
tures). Interestingly, the resulting tagger is better
than even a combination of the previous state-of-
the-art taggers (for English, this comparison is in-
conclusive).
We are working now on parallelization of the
perceptron training, which seems to be possible
(based i.a. on small-scale preliminary experiments
with only a handful of parallel processes and
specific data sharing arrangements among them).
This would further speed up the training phase, not
just as a nice bonus per se, but it would also allow
for a semi-automated feature template selection,
avoiding the (still manual) feature template prepa-
ration for individual languages. This would in turn
facilitate one of our goals to (publicly) provide
single-implementation, easy-to-maintain state-of-
the-art tagging tools for as many languages as pos-
sible (we are currently preparing Dutch, Slovak
and several other languages).19
Another area of possible future work is more
principled tag classing for languages with large
tagsets (in the order of 103), and/or adding
syntactically-motivated features; it has helped
Czech tagging accuracy even when only the “in-
trospectively” defined classes have been added. It
is an open question if a similar approach helps
English as well (certain grammatical categories
can be generalized from the current WSJ tagset as
well, such as number, degree of comparison, 3rd
person present tense).
Finally, it would be nice to merge some of the
approaches by (Toutanova et al., 2003) and (Shen
et al., 2007) with the ideas of semi-supervised
learning introduced here, since they seem orthog-
onal in at least some aspects (e.g., to replace the
rudimentary lookahead features with full bidirec-
tionality).
Acknowledgments
The research described here was supported by the
projects MSM0021620838 and LC536 of Ministry
of Education, Youth and Sports of the Czech Re-
public, GA405/09/0278 of the Grant Agency of the
Czech Republic and 1ET101120503 of Academy
of Sciences of the Czech Republic.
19Available soon also on the website.
770
References
Thorsten Brants. 2000. TnT - a Statistical Part-of-
Speech Tagger. In Proceedings of the 6th Applied
Natural Language Processing Conference, pages
224–231, Seattle, WA. ACL.
Leo Breiman. 1996. Bagging predictors. Mach.
Learn., 24(2):123–140.
Eric Brill and Jun Wu. 1998. Classifier Combination
for Improved Lexical Disambiguation. In Proceed-
ings of the 17th international conference on Compu-
tational linguistics, pages 191–195, Montreal, Que-
bec, Canada. Association for Computational Lin-
guistics.
CNC, 2005. Czech National Corpus – SYN2005. In-
stitute of Czech National Corpus, Faculty of Arts,
Charles University, Prague, Czech Republic.
Michael Collins. 2002. Discriminative Training Meth-
ods for Hidden Markov Models: Theory and Exper-
iments with Perceptron Algorithms. In EMNLP ’02:
Proceedings of the ACL-02 conference on Empirical
methods in natural language processing, volume 10,
pages 1–8, Philadelphia, PA.
Jesu´s Gime´nez and Llu?´s Ma`rquez. 2004. SVMTool:
A General POS Tagger Generator Based on Support
Vector Machines. In Proceedings of the 4th Interna-
tional Conference on Language Resources and Eval-
uation, pages 43–46, Lisbon, Portugal.
David Graff, 1995. North American News Text Cor-
pus. Linguistic Data Consortium, Cat. LDC95T21,
Philadelphia, PA.
Jan Hajic? and Barbora Vidova´-Hladka´. 1998. Tag-
ging Inflective Languages: Prediction of Morpho-
logical Categories for a Rich, Structured Tagset.
In Proceedings of the 17th international conference
on Computational linguistics, pages 483–490. Mon-
treal, Quebec, Canada.
Jan Hajic?. 2004. Disambiguation of Rich Inflection
(Computational Morphology of Czech). Nakladatel-
stv?´ Karolinum, Prague.
Jan Hajic?, Eva Hajic?ova´, Jarmila Panevova´, Petr Sgall,
Petr Pajas, Jan S?te?pa´nek, Jir??´ Havelka, and Marie
Mikulova´. 2006. Prague Dependency Treebank
v2.0, CDROM, LDC Cat. No. LDC2006T01. Lin-
guistic Data Consortium, Philadelphia, PA.
Pavel Krbec. 2005. Language Modelling for Speech
Recognition of Czech. Ph.D. thesis, UK MFF,
Prague, Malostranske´ na´me?st?´ 25, 118 00 Praha 1.
Mitchell P. Marcus, Mary Ann Marcinkiewicz, and
Beatrice Santorini. 1994. Building a large anno-
tated corpus of English: The Penn Treebank. Com-
putational Linguistics, 19(2):313–330.
R Development Core Team, 2008. R: A Language and
Environment for Statistical Computing. R Foun-
dation for Statistical Computing, Vienna, Austria.
ISBN 3-900051-07-0.
Adwait Ratnaparkhi. 1996. A maximum entropy
model for part-of-speech tagging. In Proceedings
of the 1st EMNLP, pages 133–142, New Brunswick,
NJ. ACL.
Helmut Schmid. 1994. Probabilistic part-of-speech
tagging using decision trees. In Proceedings of the
International Conference on New Methods in Lan-
guage Processing, page 9pp., Manchester, GB.
Libin Shen, Giorgio Satta, and Aravind K. Joshi. 2007.
Guided Learning for Bidirectional Sequence Classi-
fication. In Proceedings of the 45th Annual Meet-
ing of the Association of Computational Linguistics,
pages 760–767, Prague, Czech Republic, June. As-
sociation for Computational Linguistics.
Drahom?´ra ”johanka” Spoustova´, Jan Hajic?, Jan
Votrubec, Pavel Krbec, and Pavel Kve?ton?. 2007.
The Best of Two Worlds: Cooperation of Statistical
and Rule-Based Taggers for Czech. In Proceedings
of the Workshop on Balto-Slavonic Natural Lan-
guage Processing 2007, pages 67–74, Prague, Czech
Republic, June. Association for Computational Lin-
guistics.
Jun Suzuki and Hideki Isozaki. 2008. Semi-supervised
sequential labeling and segmentation using giga-
word scale unlabeled data. In Proceedings of ACL-
08: HLT, pages 665–673, Columbus, Ohio, June.
Association for Computational Linguistics.
Kristina Toutanova, Dan Klein, Christopher D. Man-
ning, and Yoram Singer. 2003. Feature-Rich Part-
of-Speech Tagging with a Cyclic Dependency Net-
work. In NAACL ’03: Proceedings of the 2003 Con-
ference of the North American Chapter of the As-
sociation for Computational Linguistics on Human
Language Technology, pages 173–180, Edmonton,
Canada. Association for Computational Linguistics.
Hans van Halteren, Walter Daelemans, and Jakub Za-
vrel. 2001. Improving accuracy in word class
tagging through the combination of machine learn-
ing systems. Computational Linguistics, 27(2):199–
229.
Jan Votrubec. 2006. Morphological Tagging Based
on Averaged Perceptron. In WDS’06 Proceedings of
Contributed Papers, pages 191–195, Prague, Czech
Republic. Matfyzpress, Charles University.
771
