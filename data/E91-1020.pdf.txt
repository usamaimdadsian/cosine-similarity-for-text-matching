STRUCTURE-DRIVEN GENERATION 
FROM SEPARATE SEMANTIC  REPRESENTAT IONS 
Stephan Busernann 
Deutsches Forschungszentrum fiir Kf instl iche Intell igenz (DFKI )  GmbH 
Stuh lsatzenhausweg 3, D-6600 Saarbrficken 11 
uucp: buseman @dfki.uni-sb.de 
ABSTRACT 
A new approach to structure-driven generation 
is I)resented that is based on a separate seman- 
tics as input structure. For the first time, a GPSG- 
based formalism is complemented with a system of 
pattern-action rules that relate the parts of a se- 
mantics to appropriate syntactic rules. This way a 
front end generator can be adapted to some ap- 
plication system (such as a machine translation 
system) more easily than would be possible with 
many previous generators based on modern gram- 
mar formalisms. 1 
INTRODUCTION 
In the licld of unification-based computational 
linguistics, current research on tactical natural an- 
guage (NL) generation concentrates on the folio- 
wing problem: 
i 
• Given a semantic representation (which is of- 
ten called logical form (LF)) and a grammar 
that includes a lexicon, what are the surface 
strings corresponding to the semantic repre- 
sentation? 
A variety of approaches to solving this problem in 
an efficient way has been put forward on the ba- 
sis of unification-based grammar formalisms with a 
context-free backbone and complex categories (for 
some discussion see e.g. \[Shieber et al. 1990\]). Most 
of this work shares a Montagovian view of seman- 
tics by assuming that LF be integrated into the 
grammar rules, thus assigning to each syntactic a- 
tegory its semantic representation. 
Within this integrated-semantics approach the 
generation tmsk mainly consists of reconstructing a 
1This work was partially funded by the German Mini- 
ster for Research trod Tedmology (BMFT) mt(ler contract 
ITW 9002. Most of the research underlying rids article was 
accomplished within the EURO'rH.A-D accompanying re- 
search project K IT-FAST at the Technical University of Ber- 
lin and fimded by the BMFT trader contract 1013211. 
I wish to thank Christa llauenschiid, John Nerbo\[me, and 
Ilans Ilszk~weit h,r com,,lcntin g on earlier ve,.'~ions of this 
paper. 
given LF, thereby ensuring that the result is com- 
plete (all parts of the input structure are recon- 
structed) and coherent (no additional structure is 
built up). Thus, the surface strings then come out 
as a side effect. 
This paper describes a different use of seman- 
tics for generatio n. llere the semantics i not part 
of the grammar, but rather expressed within a se- 
parate semantic representation language (abbrcv.: 
SRL). This approach, in which the grammar only 
covers the syntax part, is called the separate se- 
mantics approach. It has a long tradition in At NL 
systems, but was rarely used for unification-based 
syntax and semantics. It will be argued that it can 
still be useful for interfacing a syntactic generator 
to some application system. 
The main goal of this paper is to describe a ge- 
nerator using a separate semantics and to suggest a
structure-driven strategy that is bascd on a systcm 
of pattern-action (PA) rules, as they are known 
from AI production systems (for an overview see 
\[Davis/King 1977\]). The purpose of these rulcs is 
to explicitly relate the semantic (sub)structures to 
possible syntactic ounterparts. The rnappizJg pro- 
cess is driven by the semantic input structure that 
is traversed step by step. At each step PA rules are 
applied, which contribute to successively i)roducing 
an overall syntactic structure from which the ter- 
minal string can easily be produced. This new ap- 
proach allows for a carefully directed and nearly 
deterministic choice of grammar ules. 
KEEP ING SEMANTICS  SEPARATE 
FROM SYNTAX 
The integrated-semantics approach is often illu- 
strated in a Prolog-like notation using DCG rules. 
The infix function symbol ' / '  is used in each ca- 
tegory to separate tile syntactic from the semantic 
part. Rule (1) introduces complements in an llPSG- 
style manner by "removing" tile complement from 
the VP's subcategorization list (cf. \[Pollard/Sag 
1987\]). The relation between the semantics S and 
the semantics of Comp:l. is established in tile lexical 
entry for tile verb (2). 
- 113-  
(1) vp(Subcat)/S - ->  
vp(\[CompllSubcat\])/S, Compl. 
(2) vp(\[np(_)/0bj,  np(3rd-s ing) /Subj \ ] ) /  
k iss(Subj ,  0bj) --> \ [k i sses \ ] .  
Recent work on semantic-head-driven generation 
\[Shieber et al. 1990, Calder et al. 1989, Noord 1990, 
Russell et al. 1990\] provides a very promising step 
towards efficient, goal-directed reconstruction f LF 
that is espescially suited for lexicon-centered gram- 
mar formalisms such as IIPSG or UCG. It was ob- 
served that top-down generation may not termi- 
nate. This is illustrated in (1). If the vp node is 
used for top-down expansion, there is nothing to 
prevent he subcategorization list from growing in- 
finitely. If the Comp node is used, the constituent 
to be generated must completely be guessed ue to 
the uninstantiated semantics. Since the grammar 
will contain recursive rules (e.g. for relative clau- 
ses), the guessing procedure will not terminate it- 
her. In view of this problem a bottom-up approach 
was suggested that is guided by semantic informa- 
tion in a top-down fashion. 
The benefits of integrated semantics are mani- 
fold. Elegant analyses of linguistic phenomena are 
possible that relate syntactic and semantic pro- 
perties to each other (cf. the treatment of e.g. 
'raising' and 'equi' constructions in \[Pollard/Sag 
1987\]). LF is defined on purely linguistic grounds 
and as such, it is well-suited to tile contputationai 
linguist's work. 
llowever, if a generator based on an integrated 
semantics i to be used for conveying the results of 
some application system into NL, expressions ofthe 
application system's SRL have to be adalJted to LF. 
Given that tile grammar should not be rewritten, 
this amou,,ts to an additional'step of processing. 
This step may turn out to be costly since the SRL 
will typically contain application-dependent infor- 
mation that must be considered. Take, for instance, 
a transfer-based machine translation (MT) system 
(such as EUROTRA \[Arnold/des Tombe 1986\]). 
The results of the transfer (say, from German to 
English) are encoded in a semantic representation 
that is given to the system's generation component 
to produce the English target sentence. In a system 
capable of translating between a variety of langua- 
ges, representations of this kind may themselves be 
subject o transfer and will therefore contain infor- 
mation relevant for translation. 2 
SAn exception is tim MiMe2 system \[Noord et al. 1990\]. 
The price to pay for allowing transfer at the level of LF was 
to accept an "extremely poor" view of translation by just  
preserving the logical meaning emd--as far as possible--the 
way in which meaning is built compositionMiy (quotation 
from \[Noord et al. 1990\]). 
The effort of introducing an additional step of 
processing can be saved to a large extent by ad- 
opting a separate-semantics approach. The SRL of 
some application system may directly serve as an 
interface to the generator. 3 In the case at hand, two 
additional components must be introduced into the 
generation scenario: the definition of SRL and PA 
rules. Instead of mapping SRL onto LF, SRL is di- 
rectly related to syntax by virtue of the PA rules. 
A STRUCTURE-DRIVEN GENERATOR 
The generator to be described in this section 
is a module of the Berlin MT system \[llauen- 
schild/Busemann 1988\], which translates sentences 
taken from administrative t xts in an EC corpus 
from German into English and vicc versa. 4 The 
syntax formalism Used is a constructive version of 
GPSG \[Gazdar et al. 1985\] as described in \[Buse- 
mann/Hauenschild 1988\]. The semantic representa- 
tion language FAS (Functor-Argument Stuctures) 
\[Mahr/Umbach 1990\] is employed as an interface 
between three different processes: it is the target of 
GPSG-based analysis, for sentence-semantic trans- 
fer, and as the source for GPSG-based generation. 
FAS is defined by context-free rule schemata with 
complex categories consisting of a main category 
(e.g. 'clause' in Figure la), which is associated with 
a fixed list of feature specifications. 5 The categories 
are in canonical order with the functor preceding all 
of its arguments. In contrast to syntactic structures 
where agreement relations are established by virtue 
of feature propagation, FAS categories contain al- 
nmst no redundant information. For instance, num- 
ber information isonly located at the 'det' category. 
The use of semantic relations (encoded by the 'role' 
feature), role configurations ('conf') and semantic 
features allows us to discriminate between different 
readings of words that result in different ransla- 
tional equivalents. Moreover, part of the thematic 
structure of the source language sentence is preser- 
ved during transfer and encoded by virtue of the 
feature 'them' with the numerical values indicating 
which portion should preferrably be presented first, 
second, third etc. The definitions of FAS for the 
German and English fragments mainly differ with 
regard to their terminal symbols. 
3This interface does not  correspond to the common sepa- 
ration between making decisions about what to say and how 
to say it (cf. \[McKeown/Swartout 1988\]). Rather the inter- 
face in question must be situated somewhere in the 'how to 
say it' component because it presupposes many decisions ab- 
out sentence formulation (e.g. regarding pronominalization, 
or voice). 
4The underlying view of MT is described in \[Hauenschild 
1988\]. 
Sln the present versions there are up to seven features in a 
FAS category. For sake of simplicity many details irrelevant 
to the present discussion are omitted in the examples. 
- 114-  
(a) FAS expression: 
fas / \  
illoc clauselin / \  
fin clause 
assertion I porf : + 
pres_ind J / ~ '~ '~,~.~ 
v__pred term 
voice: active role: agent 
conf: ag_af them : 3 
them : 2 ~ , ~  
I det nom 
/ \  
verab- num: sing I 
schieden I 
nwed 
sere: inst 
de\[_sing J 
rat 
term 
role: affected 
them : 1 /-... 
det nom 
num: plur I 
n_pred 
sem: plan 
dies I 
vorschlag 
(b) GPSG structure: 
S\[fin, -plul 
NP \[+top, acc, +plu\] S \[fin, -plu\] / NP \[+top, acc. +plu\] / \  
Det N1 V \[fro, -plu\] S \[psp, -plu\] / NP \[+top, acc. +plu\] 
dies N hab NP \[nom. -plul V \[trans, pspl 
I / \  I 
vorschlag Dot N1 verabschied 
I I 
d- N 
I fal 
I 
diese vorschl~tge hat der Rat verabschiedet 
\]these proposals has the Council adopted\] 
"These proposals have been adopted by the Council." 
Figure 1: Sample FAS Expression (a) and Corresponding GPSG Structure (b). 
The GPSG formalism used includes the ID/LP 
format, feature co-occurrence restrictions (FCRs) 
and universal principles of feature instantiation 
(FIPs). The ID rules are interpreted by the gene- 
rator as providing the basic information for a local 
tree. The categories of each generated local tree are 
filrther instantiated by the FIPs and FCRz. Finally, 
the branches are ordered by virtue of the LP state- 
lnen|.s.  
St ra teg ies  for  s t ruc ture  bu i ld ing  and  feature  
ins tant ia t ion .  The task of constructing an admis- 
sible GPSG syntactic structure call be divided up 
into the following suhta.sks that can be performed 
independently of each other, and each according to 
its own processing strategy: 
,, Structure building (by virtue of PA rules, 
which in turn use ID rules) 
. Feature instantiaton and ordering of the bran- 
ches (by virtue of FIPs, FCRs and LP state- 
merits) 
The question arises which strategies are best sui- 
ted to ellicient generation. For each subtask both 
a top-down and a bottom-up strategy have been 
investigated. As a result it turned out that struc- 
ture building shouhl occur top-down whereas fea- 
ture instantiation should be performed in a bottom- 
up manner. 
Before .justifying the result let us have a closer 
look at the sl.ructure-buiiding algorithm. Tile over- 
all syntactic structure (OSS) is successively con- 
strued in a top-down manner. At each level there is 
a set of nonterminal leaf nodes available serving 
as attachment points for further expansion steps 
(initially tile empty category is the only attachment 
point). An expansion step consists of 
1. generating a local tree t by virtue of an ID rule, 
2. unifying its mother node with one of the 
attachment points, 
3. removing the attachment point from the cur- 
rent set, 
4. defining tile daughters of t as the new current 
set of attachment points. 
Since lexicai entries terminate a branch of the OSS, 
the fourth of the above points is dropped during 
expansion of lexical categories: processing continues 
with the reduced set of attachment points. 
Feature instafftiation and the ordering of bran- 
ches take place in a bottom-up manner after a lo- 
cal tree has no fuither attachment points associated 
with it (i.e. all of its daughters have been expan- 
ded). Then processing returns to tile next higher 
level o f  tile OSS examining the set of attachment 
points. Depending on whether or not it is empty, 
the next step is either feature instantiation or struc- 
ture building. Given this interlinking of the two 
subtasks, all OSS is admitted by tile grammar if 
115 - 
its top-most local tree has passed feature instantia- 
tion. 
The effects of feature instantiation with respect 
to the German example in Figure lb 6 can be better 
understood with the help of the S-expansion rules 
used; of. (3)-(5). t Rule (3) causes topicalization, 
(4) introduces a perfect auxiliary, and (5) requires 
a transitive verb whose object is topicalized. 
(3). S , X\[+top\],S\[fin\] / X\[+top\] 
(4) s ,v,s\[psp\] 
(5) s / NP\[+top, ace\] , NP\[nom\], V\[trans\] 
The solution will now be justified. First of all, note 
that the top-most part of an FAS expression is re- 
lated to tile top-most part of the GPSG structure, 
and that the leaves of a FAS expression usually cor- 
respond to GPSG lexicon entries. As a consequence, 
the order the FAS expression is traversed etermi- 
nes the order in which the structure-building sub- 
task is performed. Why should then, in the case of 
FAS, the traversal occur top-down? 
The answer is motivated by the distribution of in- 
formation in FAS expressions. In order to apply a 
certain ID rule deterministically, information from 
distant portions of tim FAS expression may be nee- 
ded. For instance, the FAS specification (them : 1), 
which is part of one of the daughters of c lause 
in Figure la, is interpreted as requiring topicaliza- 
tion of a syntactic onstituent under the condition 
that a declarative sentence is being generated. This 
latter information is, however, only available at the 
\ [ i l l o¢  \ [asner t ion \ ]  \] s part of the FAS expression 
(of. Figure la). 
Two possible methods for collecting this infor- 
nration present themselves. First, the pattern in- 
cluding (them : 1) could be required to cover as 
nmch of the FAS expression as would be needed to 
include i \] . loc. In that case, all the information ee- 
ded is present, and the traversal of the FAS expres- 
sion could occur bottom-up as well as top-down. 
• Unfortunately the required size of the pattern is 
not always known in advance because the FAS syn- 
tax might allow an arbitrary number of recursively 
defined local trees to intervene. 
The second method--which was eventually 
adopted--requires the patterns to cover not more 
than one local FAS tree. In order to gather infor- 
mation that is locally missing, an auxiliary storage 
is needed. If, for instance, the illocution is mat- 
ched, information about whether or not a declara- 
tive sentence is being generated is stored. Later on, 
(them : 1) is encountered. Now, the ID rule for to- 
6These are not  shown for the const i tuents  of NPs. 
ZNote the different use of the symbol  ' / ' :  here it denotes 
the category-valued feature 's lash' .  
e Square brackets are used here to indicate tree stn icture .  
picalization (3) is triggered iff 'declarative' can be 
retrieved from the storage. 
If the necessary information is not available yet, 
one must accept either a delay of a mapping or 
backtracking. With a top-down traversal of FAS 
expressions, however, such cases are sufficiently re- 
stricted to ensure efficiency. Note that a bottom-up 
traversal or a mixed strategy could be more efficient 
if the distribution of information in the SRL were 
different. 
The problems observed with top-down genera- 
tots using an integrated semantics cannot occur 
in the separate-semantics approach. Expansion of 
grammar ules can be controlled by the semantic 
representation if each rule application is explicitly 
triggered. Situations causing an infinite expansion 
due to an uninstantiated semantics (as with top- 
down expansion using the rule (2)) cannot arise at 
all since the separate semantics is fully specified. 
Let us now discuss why feature instantiation 
should be a bottom-up process. The FIPs apply 
to tim mother and/or a subset of daughters in a 
local tree. In general, tile more these categories 
are instantiated the less likely the l"lPs will have 
to choose between alternative instantiations, which 
would be a source for backtracking. A top-down 
strategy would meet a more completely instan- 
tiated mother, but still underspecified aughters. 
With a bottom-up strategy, howew:r, only tile mo- 
ther would be underspecified. For instance, consi- 
der the GPSG account of parasitic gaps, which are 
handled by the Foot Feature Principle. The 'slash' 
feature may occur at more than one daughter and 
then require all occurrences of it to unify with the 
mother (el. \[Gazdar et al. 1985, p. 16211\]). While 
this is easy to handle for a bottom-up process, a 
top-down strategy would have to guess at which 
daughters to instantiate a slash value. 
Pat tern -act ion  rules.  A PA rule is a pro- 
duction rule with a pattern for local FAS trees 
as its left-hand side and two sets of actions as 
its right-hand side. The information-gathering ac- 
lions (IGAs) maintain the auxiliary storage. The 
structure-building actions (SBAs) generate GPSG 
trees. Either one of these sets may be empty. 
In:order to minimize tim power of PA rules, the 
inventory of IGAs and SBAs is restricted. There are 
only lthree 1GAs for storing information into and 
removing from the auxiliary storage. The auxiliary 
storage is a two-dimensional rray of a fixed size. It 
may contain atomic values for a set of features pre- 
determined by the PA rule writer as well as a single 
GPSG category. There are only five SBAs for diffe- 
rent kinds of mapping, three of which are explained 
below; cf. \[Busemann 1990\] for a coml)rehensive dis- 
cussion. Any SBA' will remove the stored category 
116 - 
FAS pattern: term (them: 1) 
IGA: \[removestore(sent, decl), 
set_.gpsg, features(top: +)\] 
SBA: I I 
FAS pattern: 
dot (def:+, num:plur) \ "~ 
IGA: \[set_gpsg_features(plu:+)\] 
SBA: \[calUd( NP --> Det, N1 )\] 
Figure 2: Two Pattern-Action Rules for NP-Topicalization. 
from the storage and unify it with the :mother of 
the local tree it is about to generate. 
To illustrate this let us return to the topica- 
lization example. The responsible PAl rules are 
shown in Figure 2. The pattern of the first one 
naatches any local FAS tree whose mbther is a 
term(them: 1). The 1GAs work as follows: I fa  spe- 
cification (sent : (lecl) can be removed from the sto- 
rage, the GPSG feature specification \[+top\] will be 
added to the stored category (by virtue of the IGA 
set_gpsg_features) .  The SBA set is empty. The 
second PA rule matches any local FAS tree whose 
first daughter is a dcfinite determiner with plural 
number followed by zcro or more daughters. Note 
that both patterns match the same local tree of the 
FAS expression in Figure la. There is only one IGA, 
which adds the number information to the stored 
GPSG category. The single SBA, ca l l _ id ,  states 
that a local GPSG tree is generated by virtue of the 
ID rule indicated and added to the OSS. Since the 
mother of the local tree (NP) now contains the spe- 
cification \[+top\], it  can only unify with the 'slash' 
value introduced by the mother of rule (5). Fron- 
ting of the NP is achieved in accordance with the 
FIPs and LP statements. 
Three kinds of PA rules should be distinguished 
according to the effects of their SBAS. Figure 2 
shows two of tl,em; the first one doesn't create 
structure at, all while the second one transduces 
a (FAS) local tree into a (GPSG) loi:ai tree. A 
third type of rules generates GPSG structure out of 
FAS feature specifications. Figure 1 shows its use 
to generate the non-local subtree including the per- 
fect auxiliary fs I'v \[hab'l, s (psp) \ ] \ ]  from the 
local FAS tree dominated by c lauso(per f :+) .  
Note that this PA rule must be applied be- 
fore an attempt is started to attach the subtree 
f s /np(acc)  \[np(nom), v ( t rans) \ ] \ ] .  This latter 
subtree is generated by a PA rule whose pattern 
rnatches the same FAS tree as the previous one. 
We shall return to this problem in the following 
section. 
Cont ro l l ing  the ntapl>ing procc.'dure.. First of 
all note that PA rules can comrnunicate with each 
other only indirectly, i.e. by modifying the content 
of the auxiliary storage or by successfully apply- 
ing an SBA, thereby creating a situation in which 
another ule becomes applicable (or cannot be ap- 
plied anymore). PA rules do not contain any control 
knowledge. 
A local FAS tree is completely verbalized iff a 
maximum number t > 1 of applicable PA rules are 
successful. A PA rule is applicable to a local FAS 
tree t iff its pattern unifies with t. An applicable 
PA rule is successful iff all elements of IGA can 
be executed and an SBA-- i f  present--is uccessful. 
An SBA is successful iff a syntactic subtree can be 
attached to the OSS as described above. 
Since the set of PA rules is not commutative, the 
order of application is crucial in order to ensure that 
72 is maximal. Due to the restricted power of the PA 
rules possible conflicts can be detected and resolved 
a priori. A conflict arises if more than one pattern 
matches a given FAS tree. All FAS trees matched 
by more than one pattern can be identified with 
help of the FAS grammar. The respective PA rules 
are members of the same conflict set. The elements 
of a conflict set can be partially ordered by virtue 
of precedence rules operating on pairs of PA rules. 
For instance, the conflict regarding the perfect 
auxiliary is resolved by making a precedence rule 
check the ID rules that would be invoked by the re- 
spective SBAs. If the mother of the second one can 
be unified with a daughter of the first one and not 
vice versa, then the first PA rule must be applied 
before the second one. Thus a PA rule with an SBA 
invoking ID rule (4) will apply before another one 
wifll an SBA invoking ID rule (5). 
Note that, in this example, the number of suc- 
cessful PA rules would not be maximal if the order 
of application was the other way around since the 
SBA invoking ID rule (4) would not succeed any- 
more. 
The control regime described above guarantees 
termination, completeness and coherence in the fol- 
lowing way: The traversal of a FAS expression ter- 
minates ince there is only a finite number of local 
trees to be investigated, and for each of them a 
I17 - 
finite number of PA rules is applicable. The aSS 
generated is complete because all local FAS trees 
are processed and for each a maximum rmmber of 
PA rules is successful. It is coherent because (1) no 
PA rule may be applied whose pattern is not mat- 
ched by the FAS expression and (2) all attachment 
points nmst be expanded. 
CONCLUSION 
The adaptation of a GPSG-based generator to 
an MT system using FAS as its SRL was described 
as an instance of the separate-semantics approach 
to surface generation. In this instance, the OSS is 
most efficiently built top-down whereas feature in- 
stmltiation is performed bottom-up. 
The mapping based on PA rules has proved to 
be efficient in practice. There are only a few cases 
where backtracking is required; most often the local 
FAS tree being verbalized allows together with the 
contents of the auxiliary storage and the current 
set of attachment points for a deterministic choice 
of grammar ules. 
The generator has been fully implemented and 
tested with middle-sized fragments of English and 
German. It is part of the Berlin MT system and 
runs on both an IBM 4381 under VM/SP in Water- 
loo Core Prolog and a PC XT /AT  in Arity Prolog. 
Compared to algorithms based on an integrated 
semantics the separate-semantics approach pursued 
here is promising if the generator has to be adapted 
to the SRL of some application system. Adaptation 
then consists in modifying the set of PA rules rather 
than in rewriting the grammar. 
REFERENCES 
\[Arnold/des Tombe 1986\] Doug Arnold and Louis des 
"Ibmbe (1986), 'Ba.~ic Theory and Methodology in 
Eurotra', in S. Nirenburg (ed.), Theoretical and Me- 
thodological Issues in Machine Translation, Cam- 
bridge: Cambridge University Press, 114-135. 
\[Busemann 1990\] Stephan Busemann (1990), Gcne- 
rierung nat6rlichcr Sprache mit Generalisierten 
Phrascnstruktur-Grammatiken, Doctoral Disserta- 
tion, Universit~t des Saarlandes, Saarbriicken. Also 
available: TU Berlin, Dept. of Computer Science, 
KIT Report 87. 
\[Busemann/Ilauenschild 1988\] 
Stephan Busemann and Christa Hauenschild (1988), 
'A Constructive View of GPSG or Itow to Make it 
Work', in Proc. leth COLING-88, Budapest, 77-82. 
\[Calder et ai. 1989\] Jonathan Calder, Mike Reape, and 
llenk Zeevat (1989), 'An Algorithm for Generation i
Unification Categorial Grammar', in Proc. 4th Conf. 
of the European Chapter of the ACL, Manchester, 
233-240. 
\[Davis/King 1977\] Randall Davis und Jonathan King 
(1977), 'An Overview of Production Systems', in E. 
W. Elcock and D. Michie (eds.), Machine Intelligence 
8, Chichester: Ellis Itorwood, 300-332. 
\[Gazdar ct al. 1985\] Gerald Gazdar, Ewan Klein, Ge- 
offrey Pullum, and Ivan Sag, (1985), Generalized 
Phrase Structure Grammar, Oxford: Blackwell. 
\[Hauenschild 1988\] Christa Hauenschild (1988), 'Dis- 
course Structure--Some Imphcations for Machine 
Translation', in D. Maxwell, K. Schubert und A. 
P. M. Witkam (eds.), New Directions in Machine 
Translation, Dordrecht: Foris, 145-156. 
\[tlauenschild/Busemann 1988\] Christa llauen- 
schild and Stephan Busemann (1988), 'A Construc- 
tive Version of GPSG for Machine Translation', in E. 
Steiner, P. Schmidt, and C. Zelinsky-Wibbelt (eds.), 
From Syntax to Semantics--Insights From Machine 
Translation, London: Frances Pinter, 216-238. 
\[MMtr/Umbach 1990\] Bernd Mahr and Carla Umbach 
(1990), 'Functor-Argument Structures for the Mea- 
ning of Natural Language Sentences and Their For- 
mal Interpretation', in K.-H. Bl~sius, U. Hedstiick, 
and C.-R. Rollinger (eds.), Sorts and Types in Artifi- 
cial Intelligence, Berlin, New York: Springer (Lecture 
Notes in Artificial Intelligence 418), 286-304. 
\[McKeown/Swartout 1988\] Kathleen R. McKeown and 
William R. Swartout, 'Language Generation and Ex- 
planation', in M. Zock and G. Sabah (eds.), Advan- 
ces in Natural Language Generation. An blterdisci- 
plinary Perspective. Vol. 1, London: Frances Pinter, 
1-52. 
\[Noord 1990\] Gertjan van Noord (1990), 'An Overview 
of Head-Driven Bottom-up Generation', in R. Dale, 
C. Mellish, and M. Zock (eds.), Current Research in 
Natural Language Generation, Academic, 141-165. 
\[Noord et al. 1990\] Gertjan van Noord, Joke Dorre- 
paal, Pim van tier Eijk, Maria Florenza, and Louis 
des qbmbe (1990), 'The MiMo2 Research System', in 
Proc. 3rd Int. Conf. on Theoretical and Methodolo- 
gical Issues in Machine Translation, Austin, Texas. 
\[Pollard/Sag 1987\] Carl J. Pollard and Ivan A. Sag 
(1987), Information-Based Syntax and Semantics. 
Volume I, Center for the Study of Language and In- 
formation, CSLI Lecture Notes 13, Chicago: Univer- 
sity of Chicago Press. 
\[Russell et al. 1990\] Graham Russell, Susan Warwick, 
and John Carroll (1990), 'Asymmetry in Parsing and 
Generating with Unification Grammars: Case Stu- 
dies from ELU', in Prac. Conf. o/ the ~8th Annual 
Meeting of the ACL, Pittsburgh, 205-211. 
\[Shieber et al. 1990\] Stuart M. Shieber, Gertjan van 
Noord, Robert C. Moore, and Fernando C. N. Pereira 
(1990), 'A Semantic-Head-Driven Generation Algo- 
rithm for Unification-Based Formalisms', in Compu- 
tational Linguistics, 16(1), 30-42. 
- 118-  
