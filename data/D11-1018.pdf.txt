Proceedings of the 2011 Conference on Empirical Methods in Natural Language Processing, pages 193–203,
Edinburgh, Scotland, UK, July 27–31, 2011. c©2011 Association for Computational Linguistics
Inducing Sentence Structure from Parallel Corpora for Reordering
John DeNero
Google Research
denero@google.com
Jakob Uszkoreit
Google Research
uszkoreit@google.com
Abstract
When translating among languages that differ
substantially in word order, machine transla-
tion (MT) systems benefit from syntactic pre-
ordering—an approach that uses features from
a syntactic parse to permute source words
into a target-language-like order. This paper
presents a method for inducing parse trees au-
tomatically from a parallel corpus, instead of
using a supervised parser trained on a tree-
bank. These induced parses are used to pre-
order source sentences. We demonstrate that
our induced parser is effective: it not only
improves a state-of-the-art phrase-based sys-
tem with integrated reordering, but also ap-
proaches the performance of a recent pre-
ordering method based on a supervised parser.
These results show that the syntactic structure
which is relevant to MT pre-ordering can be
learned automatically from parallel text, thus
establishing a new application for unsuper-
vised grammar induction.
1 Introduction
Recent work in statistical machine translation (MT)
has demonstrated the effectiveness of syntactic pre-
ordering: an approach that permutes source sen-
tences into a target-like order as a pre-processing
step, using features of a source-side syntactic parse
(Collins et al., 2005; Xu et al., 2009). Syntac-
tic pre-ordering is particularly effective at apply-
ing structural transformations, such as the order-
ing change from a subject-verb-object (SVO) lan-
guage like English to a subject-object-verb (SOV)
language like Japanese. However, state-of-the-art
pre-ordering methods require a supervised syntac-
tic parser to provide structural information about
each sentence. We propose a method that learns
both a parsing model and a reordering model di-
rectly from a word-aligned parallel corpus. Our ap-
proach, which we call Structure Induction for Re-
ordering (STIR), requires no syntactic annotations
to train, but approaches the performance of a re-
cent syntactic pre-ordering method in a large-scale
English-Japanese MT system.
STIR predicts a pre-ordering via two pipelined
models: (1) parsing and (2) tree reordering. The
first model induces a binary parse, which defines
the space of possible reorderings. In particular, only
trees that properly separate verbs from their object
noun phrases will license an SVO to SOV trans-
formation. The second model locally permutes this
tree. Our approach resembles work with binary syn-
chronous grammars (Wu, 1997), but is distinct in its
emphasis on monolingual parsing as a first phase,
and in selecting reorderings without the aid of a
target-side language model.
The parsing model is trained to maximize the
conditional likelihood of trees that license the re-
orderings implied by observed word alignments in
a parallel corpus. This objective differs from those
of previous grammar induction models, which typ-
ically focus on succinctly explaining the observed
source language corpus via latent hierarchical struc-
ture (Pereira and Schabes, 1992; Klein and Man-
ning, 2002). Our convex objective allows us to train
a feature-rich log-linear parsing model, even without
supervised treebank data.
Focusing on pre-ordering for MT leads to a new
193
perspective on the canonical NLP task of grammar
induction—one which marries the wide-spread sci-
entific interest in unsupervised parsing models with
a clear application and extrinsic evaluation method-
ology. To support this perspective, we highlight sev-
eral avenues of future research throughout the paper.
We evaluate STIR in a large-scale English-
Japanese machine translation system. We measure
how closely our predicted reorderings match those
implied by hand-annotated word alignments. STIR
approaches the performance of the state-of-the-art
pre-ordering method described in Genzel (2010),
which learns reordering rules for supervised tree-
bank parses. STIR gives a translation improvement
of 3.84 BLEU over a standard phrase-based system
with an integrated reordering model.
2 Parsing and Reordering Models
STIR consists of two pipelined log-linear models for
parsing and reordering, as well as a third model for
inducing trees from parallel corpora, trees that serve
to train the first two models. This section describes
the domain and structure of each model, while Sec-
tion 3 describes features and learning objectives.
Figure 1 depicts the relationship between the three
models. For each aligned sentence pair in a paral-
lel corpus, the parallel parsing model selects a bi-
nary tree t over the source sentence, such that t li-
censes the reordering pattern implied by the word
alignment (Section 2.2). The monolingual parsing
model is trained to generate t without inspecting the
alignments or target sentences (Section 2.3). The
tree reordering model is trained to locally permute t
to produce the target order (Section 2.4). In the con-
text of an MT system, the monolingual parser and
tree reorderer are applied in sequence to pre-order
source sentences.
2.1 Unlabeled Binary Trees
Unlabeled binary trees are central to the STIR
pipeline. We represent trees via their constituent
spans. Let [k, `) denote a span of indices of a 0-
indexed word sequence e, where i ? [k, `) if k ?
i < `. [0, n) denotes the root span covering the
whole sequence, where n = |e|.
A tree t = (T ,N ) consists of a set of termi-
nal spans T and non-terminal spans N . Each non-
?? ? ?? ? ?? ?????
pair [subj] list to add to was
0 1 2 3 4 5
pair added to the lexicon
[0,2) [4,6) [3,4) [2,3)
?
Target
Alignment
Projections
Parallel
Parse
Source
Induced
Parse
Gloss
Reference
Order
Induced
Order
pair addedtothe lexicon
pair addedtothe lexicon
[ ] ][ ][ [ ]
Positions
S V O
s o v
Parallel
corpus
Parallel
parsing 
model
S V O
Trees &
rotations
Monolingual
parsing 
model
Tree 
reordering 
model
S V O
S V O
S O V
Figure 1: The training and reordering pipeline for STIR
contains three models. The inputs and outputs of each
model are indicated by solid arrows, while dashed arrows
indicate the source of training examples. The parallel
parsing model provides tree and reordering examples that
are used to train the other models. In an MT system, the
trained reordering pipeline (shaded) pre-orders a source
sentence without target-side or alignment information.
terminal span [k, `) ? N has a split point m, where
k < m < ` splits the span into child spans [k,m)
and [m, `). Formally, a pair (T ,N ) is a well-formed
tree over [0, n) if:
• The root span [0, n) ? T ? N .
• For each [k, `) ? N , there exists exactly one m
such that {[k,m), [m, `)} ? T ? N .
• Terminal spans T are disjoint, but cover [0, n).
These trees include multi-word terminal spans. It
is often convenient to refer to a split non-terminal
triple (k,m, `) that include a non-terminal span
[k, `) and its split point m. We denote the set of
these triples as
N+= {(k,m, `) : {[k, `), [k,m), [m, `)}? T ? N} .
2.2 Parallel Parsing Model
The first step in the STIR pipeline is to select a bi-
nary parse of each source sentence in a parallel cor-
pus, one which licenses the reordering implied by
a word alignment. Let the triple (e, f ,A) be an
aligned sentence pair, where e and f are word se-
quences and A is a set of links (i, j) indicating that
ei aligns to fj .
The set A provides ordering information over e.
To simplify definitions below, we first adjust A to
194
ignore all unaligned words in f .
A? = {(i, c(j)) : (i, j) ? A}
c(j) = |{j? : j? < j ? ?i such that (i, j?) ? A}| .
c(j) is the number of aligned words in f prior to
position j. Next, we define a projection function:
?(i) =
[
min
j?Ji
j,max
j?Ji
j + 1
)
Ji = {j : (i, j) ? A?} ,
and let ?(i) = ? if ei is unaligned. We can extend
this projection function to spans [k, `) of e via union:
?(k, `) =
?
k?i<`
?(i) .
We say that a span [k, `) aligns contiguously if
?(i, j) ? A?, j ? ?(k, `) implies i ? [k, `) ,
which corresponds to the familiar definition that
[k, `) is one side of an extractable phrase pair. Un-
aligned spans do not align contiguously.
Given this notion of projection, we can relate
trees to alignments. A tree (T ,N ) over e respects
an alignment A? if all [k, `) ? T ? N align con-
tiguously, and for every (k,m, `), the projections
?(k,m) and ?(m, `) are adjacent. Projections are
adjacent if the left bound of one is the right bound
of the other, or if either is empty.
The parallel parsing model is a linear model over
trees that respect A?, which factors over spans.
s(t) =
?
[k,`)?T
wT?T (k, `) +
?
(k,m,`)?N+
wN?N (k,m, `)
where the weight vector w = (wT wN ) scores fea-
tures ?T on terminal spans and ?N on non-terminal
spans and their split points.
Exact inference under this model can be per-
formed via a dynamic program that exploits the fol-
lowing recurrence. Let s(k, `) be the score of the
highest scoring binary tree over the span [k, `) that
respects A?. Then,
sT (k, `) =
?
??
??
wT?T (k, `) if [k, `) aligns
contiguously
?? otherwise
f(k,m, `) = s(k,m) + s(m, `) + wN?N (k,m, `)
sN (k, `) = maxm:k<m<`
?
???
???
f(k,m, `) if ?(k,m) is
adjacent
to ?(m, `)
?? otherwise
s(k, `) = max [sT (k, `), sN (k, `)]
Above, sT scores terminal spans while filtering out
those which are not contiguous. The function f
scores non-terminal spans by the sum of their child
scores and additional features ?N of the parent
span. The recursive function sN maximizes over
split points while filtering out non-adjacent children.
The recurrence will assign a score of ?? to any
tree that does not respect A?. Section 3 describes
the features of this model. s(k, `) can be computed
efficiently using the CKY algorithm.
2.3 Monolingual Parsing Model
The monolingual parsing model is trained to select
the same trees as the parallel model, but without
any features or constraints that reference word align-
ments. Hence, it can be applied to a source sentence
before its translation is known.
This model also scores untyped binary trees ac-
cording to a linear model parameterized by some
w = (wT wN ) that weights features on terminal and
non-terminal spans, respectively. We impose a max-
imum terminal length of L, but otherwise allow any
binary tree. The score s(k, `) of the maximal tree
over a span [k, `) satisfies the familiar recurrence:
sM (k, `) =
{
wT?T (k, `) if `? k ? L
?? otherwise
s(k, `) = max
[
sL(k, `), maxm:k<m<` f(k,m, `)
]
Inference under this recurrence can also be per-
formed using the CKY algorithm. Section 3 de-
scribes the feature functions and training method.
195
2.4 Tree Reordering Model
Given a binary tree (T ,N ) over a sentence e, we
can reorder e by (a) permuting the children of non-
terminals and (b) permuting the words of terminal
spans. Formally, a reordering r assigns each termi-
nal [k, `) ? T a permutation ?(k, `) of its words
and each split non-terminal (k,m, `) a permutation
b(k,m, `) of its subspans, which can be either mono-
tone or inverted, in the case of a binary tree. The per-
mutation ?(k, `) of a non-terminal span [k, `) /? T
is defined recursively as:
{
?(k,m) ?(m, `) if b(k,m, `) is monotone
?(m, `) ?(k,m) if b(k,m, `) is inverted
In this paper, we use a reordering model that
selects each terminal ?(k, `) and each split non-
terminal b(k,m, `) independently, conditioned on
the sentence e. While the sub-problems of choos-
ing ?(k, `) and b(k,m, `) are formally similar, we
consider and evaluate them separately because the
former deals only with local reordering, while the
latter involves long-distance structural reordering.
Because our trees are binary, selecting b(k,m, `)
is a binary classification problem. Selecting ?(k, `)
for a terminal is a multiclass prediction problem that
chooses among the (` ? k)! permutations of ter-
minal [k, `). Development experiments in English-
Japanese yielded the best results with a maximum
terminal span length L = 2. Hence, in experiments,
terminal reordering is also binary classification.
Because each permutation is independent of all
the others, reordering inference via a single pass
through the tree is optimal. However, a more com-
plex search procedure would be necessary to main-
tain optimality if the decision of b(k,m, `) ref-
erenced other permutations, such as ?([k,m)) or
?([m, `)). Coupling together inference in this way
represents a possible area of future study.
3 Features and Training Objectives
Each of these linear models factors over features
on either terminal spans [k, `) or split non-terminals
(k,m, `). Features vary in concert with the learning
objectives and search spaces of each model.
Figure 2 shows an example sentence from our de-
velopment corpus, including the target (Japanese)
?? ? ?? ? ?? ?????
pair [subj] list to add to was
0 1 2 3 4 5
pair added to the lexicon
[0,2) [4,6) [3,4) [2,3)
?
Target
Alignment
Projections
Parallel
Parse
Source
Induced
Parse
Gloss
Reference
Order
Induced
Order
pair addedtothe lexicon
pair addedtothe lexicon
[ ] ][ ][ [ ]
Positions
Figure 2: An example from our development corpus, an-
notated with the information flow (left) and annotations
and predictions (right). Alignments inform projections,
which are spans of the target associated with each source
word. The parallel parse may only include contiguous
spans. On the other hand, the induced parse may only
condition on the source sentence. The induced order
is restricted by the induced parse. In this example, the
induced order is incorrect because the subject and verb
form a constituent in the induced parse that cannot be sep-
arated correctly by the reordering model. This example
demonstrates the important role of the induced parser in
the STIR pipeline.
sentence, alignment, projections, parallel parser pre-
diction, monolingual parser prediction, and pre-
dicted permutation. The feature descriptions below
reference this example.
3.1 Tree Reordering Features
The tree reordering model consists of two local clas-
sifiers: the first can invert the two children of a
non-terminal span, while the second can permute the
words of a terminal span. The non-terminal classi-
fier is trained on the trees that are selected by the
parallel parsing model; the weights are chosen to
minimize log loss of the correct permutation of each
span (i.e., a maximum entropy model).
The terminal model is a multi-class maximum en-
tropy model over the n! possible permutations of the
words in a terminal span. To make reordering more
robust to monolingual parsing errors, the terminal
196
model is trained on all contiguous spans of each sen-
tence up to length L, not just the terminal spans in-
cluded in the parallel parsing tree.
The feature templates we apply to each span can
be divided into the following five categories. Most
features are shared across the two models.
Statistics. From a large aligned parallel corpus, we
compute two statistics.
• PC(e) = count(e aligns contiguously)count(e) is the frac-tion of the time that a phrase e aligns con-
tiguously to some target phrase, for all
phrases up to length 4.
• PD(ei, ej) is the fraction of the time that
two co-occuring source words ei and ej
align to adjacent positions in the target.
The first statistic indicates whether a contigu-
ous phrase in the source should stay contiguous
after reordering. Features based on this statistic
apply to both terminal and short non-terminal
spans. The second statistic indicates when a
possibly discontiguous pair of words should be
adjacent after reordering. This statistic is ap-
plied to pairs of words that would end up ad-
jacent after an inversion: ek and e`?1 for span
[k, `). For instance, PC(added to) = 0.68 and
PD(lexicon, to) = 0.19.
Cluster. All source word types are clustered into
word classes, which together maximize likeli-
hood of the source side of a large parallel cor-
pus under a hidden Markov model, as in Uszko-
reit and Brants (2008). Indicator features based
on clusterings over c classes are defined over
words ek, em?1, em and e`?1, as well as word
sequences for spans up to length 4. Features are
included for a variety of clusterings with sizes
c ? {23, 24, . . . , 211}.
POS. A supervised part-of-speech (POS) tagger
provides coarse tags drawn from a 12 tag set
T = {Verb, Noun, Pronoun, Conjunction,
Adjective, Adverb, Adposition, Determiner,
Number, Particle/Function word, Punctuation,
Other} (Petrov et al., 2011). Features based on
these tags are computed identically to the fea-
tures based on word classes.
Lexical. For a list of very common words in the
source language, we include lexical indicator
features for the boundary words ek and e`?1.
For instance, the word “to” triggers a reorder-
ing, as do prepositions in general.
Length. Length computed as `?k, length as a frac-
tion of sentence length, and quantized length
features all contribute structural information.
All features except POS are computed directly
from aligned parallel corpora. The Cluster and POS
features play a similar role of expressing reordering
patterns over collections of similar words. The ab-
lation study in Section 5 compares these two feature
sets directly.
3.2 Monolingual Parsing Features
The monolingual parsing model is also trained dis-
criminatively, but involves structured prediction, as
in a conditional random field (Lafferty et al., 2001).
Conditional likelihood objectives have proven ef-
fective for supervised parsers (Finkel et al., 2008;
Petrov and Klein, 2008). Recall that the score of a
tree t = (T ,N ) factors over spans.
s(t) =
?
[k,`)?T
wT?T (k, `) +
?
[k,`)?N
wN?N (k,m, `)
P(t|e) = exp [s(t)]?
(t?)?B(e) exp [s(t?)]
where B(e) is the set of well-formed trees over e.
The parallel parsing model (Section 2.2) produces
a tree over the source sentence of each aligned sen-
tence pair; these trees serve as our training exam-
ples. We can maximize their conditional likelihood
according to this model via gradient methods. Each
tree t over sentence e has a cumulative feature vector
of dimension |w| = |wT |+|wN |, formed by stacking
the terminal and non-terminal vectors:
?(t, e) =
?
? ?
[k,`)?T
?T (k, `)
?
[k,`)?N
?N (k,m, `)
?
?
The contribution to the gradient objective from a tree
t for a sentence e is the difference between observed
197
and expected feature vectors.
L(w) =
?
(t,e)
log P(t|e)
?L(w) =
?
(t,e)
?
??(t, e)?
?
t??B(e)
P(t?|e) · ?(t?, e)
?
?
The second term in the gradient—the expected
feature vector—can be computed efficiently because
the feature vector ?(t?) decomposes over the spans
of t?. In particular, the inside-outside algorithm pro-
vides the quantities needed to compute the poste-
rior probability of each terminal span [k, `) and each
split non-terminal (k,m, `). Let, ?(k, `) and ?(k, `)
be the outside and inside scores of a span, respec-
tively, computed using a log-sum semiring. Then,
the log probablility that a terminal span [k, `) ap-
pears in the tree for e under the posterior distribu-
tion P(t|e) is ?(k, `) + wT?T (k, `) . Note that this
terminal posterior does not include the inside score
of the span.
The log probability that a non-terminal span [k, `)
appears with split point m is
?(k, `) + ?(k,m) + ?(m, `) + wN?N (k,m, `)
By the linearity of expectations, the expected feature
vector for e can be computed by averaging the fea-
ture vectors of each terminal and split non-terminal
span, weighted by their posterior probabilities.
In future work, one may consider training this
model to maximize the likelihood of an entire forest
of trees, in order to maintain uncertainty over which
tree licensed a particular alignment.
We are currently using l-BFGS to optimize this
objective over a relatively small training corpus, for
35 iterations. For this reason, we only include lexi-
cal features for very common words. Distributed or
online training algorithms would perhaps allow for
more training data (and therefore more lexicalized
features) to be used in the future.
The features of this parsing model share the same
types as the tree reordering models, but vary in their
definition. The differences stem primarily from the
different purpose of the model: here, features are
not meant to decide how to reorder the sentence, but
instead how to bracket the sentence hierarchically so
that it can be reordered.
In particular, terminal spans have features on the
sequence of POS tags and word clusters they con-
tain, while a split non-terminal (k,m, `) is scored
based on the tags/clusters of the following words and
word pairs: ek, em?1, em, e`?1, (ek, em), (ek, e`?1),
and (em?1, em). The head word of a constituent of-
ten appears at one of its boundary positions, and so
these features provide a proxy for explicitly tracking
constituent heads in a parser.
Context features also appear, inspired by the
constituent-context model of Klein and Manning
(2001). For a span [k, `), we add indicator fea-
tures on the POS tags and word clusters of the words
(ek?1, e`) which directly surround the constituent.
Features based on the statistic PC(e) are also
scored in the parsing model on all spans of length
up to 4.
Length features score various structural aspects of
each non-terminal (k,m, `), such as m?k`?k , m?kk?m , etc.
One particularly interesting direction for future
work is to train a single parsing model that licenses
the reordering for several different languages. We
might expect that a reasonable syntactic bracket-
ing of English would simultaneously license the
head-final transformations necessary to produce a
Japanese or Korean ordering, and also the verb-
subject-object ordering of formal Arabic.1
3.3 Parallel Parsing Features
The parallel parsing model does not run at transla-
tion time, but instead provides training examples to
the other two models. Hence, defining an appropri-
ate learning objective for this model is more chal-
lenging.
In the end, we are interested in selecting trees that
we can learn to reproduce without an alignment (via
the monolingual parsing model) and which can be
reordered reliably (via the tree reordering model).
Note that by construction, any tree selected by the
parallel parsing model can be reordered perfectly.
However, some of those trees will be easier to re-
produce and reorder than others.
1An astute reviewer pointed out that no binary tree over an
S-V-O sentence can license both S-O-V and V-S-O orderings.
Hence, parse trees that are induced for multilingual reordering
will need n-ary branches.
198
3.3.1 Reordering Loss Function
In order to measure the effectiveness of a reorder-
ing pipeline, we would like a metric over permu-
tations. Fortunately, permutation loss for machine
translation is already an established component of
the METEOR metric, called a fragmentation penalty
(Lavie and Agarwal, 2007). We define a slight vari-
ant of METEOR’s fragmentation penalty that ranges
from 0 to 1.
Given a sentence e, a reference permutation ??
of (0, · · · , |e| ? 1), and a hypothesized permuta-
tion ?ˆ, let chunks(?ˆ, ??) be the minimum number
of “chunks” in ?ˆ: the number of elements in a par-
tition of ?ˆ such that each contiguous subsequence is
also contiguous in ??.
We can define the reordering score between two
permutations in terms of chunks.
R(?ˆ, ??) = |?
?| ? chunks(?ˆ, ??)
|??| ? 1 (1)
If ?ˆ = ??, then chunks(?ˆ, ??) = 1. If no
two adjacent elements of ?ˆ are adjacent in ??, then
chunks(?ˆ, ??) = |?|. Hence, the metric defined by
Equation 1 ranges from 0 to 1.
The reference permutation ?? of a source sen-
tence e can be defined from an aligned sentence pair
(e, f ,A) by sorting the words ei of e by the left
bound of their projection ?(i). Null-aligned words
are placed to the left of the next aligned word to their
right in the original order.
The reordering-specific loss functions defined in
Equation 1 has been shown to correlate with human
judgements of translation quality, especially for lan-
guage pairs with substantial reordering like English-
Japanese (Talbot et al., 2011). Other reordering-
specific loss functions also correlate with human
judgements (Birch et al., 2010). Future research
could experiment with alternative reordering-based
loss functions, such as Kendall’s Tau, as suggested
by Birch and Osborne (2011).
3.3.2 Parallel Parsing Objective
We can train our reordering pipeline by dividing
an aligned parallel corpus into two halves, A and B,
where the monolingual parsing and tree reordering
models are trained on A, and their effectiveness is
evaluated on held-out set B. Then, the effectiveness
of the parallel parsing model is best measured on B,
given fully trained parsing and reordering models.
?
(e,??)?B
R
(
?
(
arg max
t?B(e)
[w · ?(t)]
)
, ??
)
(2)
Evaluating this objective involves training the
other two models. Therefore, we can only hope to
optimize this objective directly over a small dimen-
sional space, for instance using a grid search. For
this reason, we currently only include 4 features in
the parallel parsing model for a tree t:
1. The sum of log PC(e) for all terminals e in t
with length greater than 1.
2. The count of length-1 terminal spans in t.
3. The count of terminals of length greater than k.
4. An indicator feature of whether parentheses
and brackets are balanced in each span.
The model weights of features 3 and 4 above are
fixed to large negative constants to prefer terminal
spans of length up to k and spans with balanced
punctuation. The weight of feature 1 is fixed to 1,
and weight 2 was set via line search to 0.3. Ties
among trees were broken randomly.
Of course, the problem of selecting training trees
need not be directly tied to the end task of reorder-
ing, as in Equation 2. Instead, we might consider se-
lecting trees according to a likelihood objective on
the source side of a parallel corpus, similar to how
monolingual grammar induction models often opti-
mize corpus likelihood. In such a case, we could
imagine training models with far more parameters,
but we leave this research direction to future work.
4 Related Work
Our approach to inducing hierarchical structure for
pre-ordering relates to several areas of previous
work, including other pre-ordering methods, re-
ordering models more generally, and models for the
unsupervised induction of syntactic structure.
4.1 Pre-Ordering Models
Our reordering pipeline is intentionally similar to
approaches that use a treebank-trained supervised
199
parser to reorder source sentences at training and
translation time (Xia and McCord, 2004; Collins
et al., 2005; Lee et al., 2010). Given a supervised
parser, a rule-based pre-ordering procedure can ei-
ther be specified by hand (Xu et al., 2009) or learned
automatically (Genzel, 2010). We consider our ap-
proach to be a direct extension of these approaches,
but one which induces structure from parallel cor-
pora rather than relying on a treebank.
Tromble (2009) show that some pre-ordering ben-
efits can be realized without a parsing step at all, by
instead casting pre-ordering as a permutation mod-
eling problem. While not splitting the task of pre-
ordering into parsing and tree rordering, that work
shows that pre-ordering models can be learned di-
rectly from parallel corpora.
4.2 Integrated Reordering Models
Distortion models have been primary components
in machine translation models since the advent of
statistical MT (Brown et al., 1993). In modern
systems, reordering models are integrated into de-
coders as additional features in a discriminative log-
linear model, which also includes a language model,
translation features, etc. In these cases, reordering
models interact with the strong signal of a target-
side language model. Because ordering prediciton
is conflated with target-side generation, evaluations
are conducted on the entire generated output, which
cannot isolate reordering errors from other sorts of
errors, like lexical selection.
Despite these differences, certain integrated re-
ordering models are similar in character to syntactic
pre-ordering models. In particular, the tree rotation
model of Yamada and Knight (2001) posited that re-
ordering decisions involve rotations of a source-side
syntax tree. The parameters of such a model can be
trained by treating tree rotations as latent variables
in a factored translation model, which parameterizes
reordering and transfer separately but performs joint
inference (Dyer and Resnik, 2010). Syntactic re-
ordering and transfer can also be modeled jointly,
for instance in a tree-to-string translation system pa-
rameterized by a transducer grammar.
While the success of integrated reordering models
certainly highlights the importance of reordering in
machine translation systems, we see several advan-
tages to a pipelined, pre-ordering approach. First,
the pre-ordering model can be trained and evaluated
directly. Second, pre-ordering models need not fac-
tor according to the same dynamic program as the
translation model. Third, the same reordering can be
applied during training (for word alignment and rule
extraction) and translation time without adding com-
plexity to the extraction and decoding algorithms.
Of course, integrating our model into translation in-
ference represents a potentially fruitful avenue of fu-
ture research.
4.3 Grammar Induction
The language processing community actively works
on the problem of automatically inducing grammat-
ical structure from a corpus of text (Pereira and
Schabes, 1992). Some success in this area has
been demonstrated via generative models (Klein and
Manning, 2002), which often benefit from well-
chosen priors (Cohen and Smith, 2009) or poste-
rior constraints (Ganchev et al., 2009). In princi-
ple, these models must discover the syntactic pat-
terns that govern a language from the sequences of
word tokens alone. These models are often evalu-
ated relative to reference treebank annotations.
Grammar induction in the context of machine
translation reordering offers different properties.
The alignment patterns in a parallel corpus pro-
vide an additional signal to models that is strongly
tied to syntactic properties of the aligned languages.
Also, the evaluation is straightforward—any syntac-
tic structure that supports the prediction of reorder-
ing is rewarded.
Kuhn (2004) applied alignment-based constraints
to the problem of inducing probabilistic context-free
grammars, and showed an improvement with respect
to Penn Treebank annotations over monolingual in-
duction. Their work is distinct from ours because it
focused on projecting distituents across languages,
but mirrors ours in demonstrating that there is a role
for aligned parallel corpora in grammar induction.
Snyder et al. (2009) also demonstrated that paral-
lel corpora can play a role in improving the quality
of grammar induction models. Their work differs
from ours in that it focuses on multilingual lexical
statistics and dependency relationships, rather than
reordering patterns.
200
Parsing Tree Reordering Pipeline
Prec Rec F1 accN accT RO R
All features 82.0 87.8 84.8 97.3 93.6 87.7 80.5
Annotated word All but POS 81.3 87.7 84.4 97.0 92.6 86.6 79.4
alignments All but Cluster 81.2 87.9 84.4 95.9 93.2 83.8 77.8
All but POS & Cluster 75.4 82.0 78.5 89.2 89.7 66.8 49.7
Learned alignments All features 72.5 61.0 66.3 91.6 83.3 72.0 49.5
Monotone order 34.9
Inverted order 30.8
Syntactic pre-ordering (Genzel, 2010) 66.0
Table 1: Accuracy of individual monolingual parsing and reordering models, as well as complete pipelines trained on
annotated and learned word alignments.
4.4 Bilingual Grammar Induction
Also related to STIR is previous work on bilingual
grammar induction from parallel corpora using ITG
(Blunsom et al., 2009). These models have focused
on learning phrasal translations — which are the ter-
minal productions of a synchronous ITG — rather
than reordering patterns that occur higher in the tree.
Hence, while this paper shares formal machinery
and data sources with that line of work, the models
themselves target orthogonal aspects of the transla-
tion problem.
5 Experimental Results
As training data for our models we used 14,000 En-
glish sentences that were sampled from the web,
translated into Japanese, and manually annotated
with word alignments. The annotation was carried
out by the original translators to promote consis-
tency of analysis. Talbot et al. (2011) describes this
corpus in further detail. A held-out test set of 396
manually aligned sentence pairs was used to evalu-
ate reordering accuracy. Statistics used for features
were computed from the full, unreordered, automat-
ically word aligned, parallel training corpus used for
the translation experiments described below.
5.1 Individual Model Accuracy
We evaluate the accuracy of the monolingual parsing
models by their span F1, relative to the trees induced
by the parallel parsing model on the held-out set.
The first row of Table 1 shows that the model was
able to reliably replicate the parses induced from
alignments, at 84.8% F1. The following three lines
show that removing either POS or cluster features
degrades performance by only 0.4% F1, indicating
that POS features are largely redundant in the pres-
ence of automatically induced word class features.
Hence, no syntactic annotations are necessary at all
to train the model.
We report two accuracy measures for the tree re-
ordering model, one for non-terminal spans (accN )
and one for terminal spans (accT ). The following
column, labeled RO, is the reordering score of the
tree reordering model applied to the oracle parallel
parser tree. This score is independent of the mono-
lingual parsing model.
The fifth line, labeled learned alignments, shows
the impact of replacing manual alignment anno-
tations with learned Model 1 alignments, trained
in both directions and combined with the refined
heuristic (Brown et al., 1993; Och et al., 1999).
The pipeline column shows the reordering score
of the full STIR pipeline compared to two simple
baselines: Monotone applies no reordering, while
inverted simply inverts the word order. STIR out-
performs all three other systems.
In the final line, we compare to the syntax-based
pre-ordering system described in Genzel (2010).
This approach first parses source sentences with a
supervised parser, then learns reordering rules that
permute those trees.
5.2 Translation Quality
We apply STIR as a pre-ordering step in a state-
of-the-art phrase-based translation system from En-
glish to Japanese (Koehn et al., 2003). At training
201
time, pre-ordering is applied to the source side of ev-
ery sentence pair in the training corpus before word
alignment and phrase extraction. Likewise, every in-
put sentence is pre-ordered at translation time.
Our baseline is the same system, but without pre-
ordering. Our implementation’s integrated distor-
tion model is expressed as a negative exponential
function of the distance between the current and pre-
vious source phrase, with a maximum jump width
of four words. Our in-house decoder is based on the
alignment template approach to translation and uses
a small set of standard feature functions during de-
coding (Och and Ney, 2004).
We compare to using an integrated lexicalized re-
ordering model (Koehn and Monz, 2005), a forest-
to-string translation model (Zhang et al., 2011) and
finally the syntactic pre-ordering technique of Gen-
zel (2010) applied to the phrase-based baseline. We
evaluate the impact of the proposed approach on
translation quality as measured by the BLEU score
on the token level (Papineni et al., 2002).
The translation model is trained on 700 million
tokens of parallel text, primarily extracted from the
web using automated parallel document identifica-
tion (Uszkoreit et al., 2010). Alignments were
learned using two iterations of Model 1 and two it-
erations of the HMM alignment model (Vogel et al.,
1996). Our dev and test data sets consist of 3100
and 1000 English sentences, respectively, that were
randomly sampled from the web and translated into
Japanese. The eval set is a larger, heterogenous
set containing 12,784 sentences. In all cases, the
final log-linear models were optimized on the dev
set using lattice-based Minimum Error Rate Train-
ing (Macherey et al., 2008).
Table 2 shows that STIR improves over the base-
line system by a large margin of 3.84% BLEU (test).
These gains are comparable in magnitude to those
reported in Genzel (2010). Our induced parses are
competitive with both systems that use syntactic
parsers and substantially outperform lexicalized re-
ordering.
6 Conclusion
We have demonstrated that induced parses suffice
for pre-ordering. We hope that future work in gram-
mar induction will also consider pre-ordering as an
BLEU %
dev test eval
Baseline 18.65 19.02 13.60
Lexicalized Reordering 19.45 18.92 13.99
Forest-to-String 23.08 22.85 16.60
Syntactic Pre-ordering 22.59 23.28 16.31
STIR: annotated 22.46 22.86 16.39
STIR: learned 20.28 20.66 14.64
Table 2: Translation quality, measured by BLEU, for En-
glish to Japanese. STIR results use both manually anno-
tated and learned alignments.
extrinsic evaluation.
References
Alexandra Birch and Miles Osborne. 2011. Reordering
metrics for MT. In Proceedings of the Association for
Computational Linguistics.
Alexandra Birch, Phil Blunsom, and Miles Osborne.
2010. Metrics for MT evaluation: Evaluating reorder-
ing. Machine Translation.
Phil Blunsom, Trevor Cohn, Chris Dyer, and Miles Os-
borne. 2009. A Gibbs sampler for phrasal syn-
chronous grammar induction. In Proceedings of the
Association for Computational Linguistics.
Peter F. Brown, Stephen A. Della Pietra, Vincent J. Della
Pietra, and Robert L. Mercer. 1993. The mathematics
of statistical machine translation: Parameter estima-
tion. Computational Linguistics.
Shay Cohen and Noah Smith. 2009. Shared logistic
normal distributions for soft parameter tying in unsu-
pervised grammar induction. In Proceedings of the
North American Chapter of the Association for Com-
putational Linguistics.
Michael Collins, Philipp Koehn, and Ivona Kucerova.
2005. Clause restructuring for statistical machine
translation. In Proceedings of the Association for
Computational Linguistics.
Chris Dyer and Philip Resnik. 2010. Context-free re-
ordering, finite-state translation. In Proceedings of the
North American Chapter of the Association for Com-
putational Linguistics.
Jenny Rose Finkel, Alex Kleeman, and Christopher D.
Manning. 2008. Efficient, feature-based, conditional
random field parsing. In Proceedings of the Associa-
tion for Computational Linguistics.
Kuzman Ganchev, Jennifer Gillenwater, and Ben Taskar.
2009. Dependency grammar induction via bitext pro-
jection constraints. In Proceedings of the Association
for Computational Linguistics.
202
Dmitriy Genzel. 2010. Automatically learning source-
side reordering rules for large scale machine transla-
tion. In Proceedings of the Conference on Computa-
tional Linguistics.
Dan Klein and Christopher D. Manning. 2001. Natu-
ral language grammar induction using a constituent-
context model. In Proceedings of Neural Information
Processing Systems.
Dan Klein and Christopher D. Manning. 2002. A gener-
ative constituent-context model for improved grammar
induction. In Proceedings of the Association for Com-
putational Linguistics.
Philipp Koehn and Christof Monz. 2005. Shared task:
Statistical machine translation between european lan-
guages. In Proceedings of the International Workshop
on Spoken Language Translation.
Philipp Koehn, Franz Josef Och, and Daniel Marcu.
2003. Statistical phrase-based translation. In Proceed-
ings of the North American Chapter of the Association
for Computational Linguistics.
Jonas Kuhn. 2004. Experiments in parallel-text based
grammar induction. In Proceedings of the Association
for Computational Linguistics.
John Lafferty, Andrew McCallum, and Fernando Pereira.
2001. Conditional random fields: Probabilistic mod-
els for segmenting and labeling sequence data. In Pro-
ceedings of the International Conference on Machine
Learning.
Alon Lavie and Abhaya Agarwal. 2007. METEOR: An
automatic metric for mt evaluation with high levels of
correlation with human judgments. In Proceedings of
ACL Workshop on Statistical Machine Translation.
Young-Suk Lee, Bing Zhao, and Xiaoqiang Luo. 2010.
Constituent reordering and syntax models for English-
to-Japanese statistical machine translation. In Pro-
ceedings of the Conference on Computational Linguis-
tics.
Wolfgang Macherey, Franz Och, Ignacio Thayer, and
Jakob Uszkoreit. 2008. Lattice-based minimum er-
ror rate training for statistical machine translation. In
Proceedings of the Conference on Empirical Methods
in Natural Language Processing.
Franz Josef Och and Hermann Ney. 2004. The align-
ment template approach to statistical machine transla-
tion. Computational Linguistics.
Franz Josef Och, Christopher Tillman, and Hermann Ney.
1999. Improved alignment models for statistical ma-
chine translation. In Proceedings of the Conference on
Empirical Methods in Natural Language Processing.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. BLEU: A method for automatic eval-
uation of machine translation. In Proceedings of the
Association for Computational Linguistics.
Fernando Pereira and Yves Schabes. 1992. Inside-
outside reestimation from partially bracketed corpora.
In Proceedings of the Association for Computational
Linguistics.
Slav Petrov and Dan Klein. 2008. Sparse multi-scale
grammars for discriminative latent variable parsing. In
Proceedings of the Conference on Empirical Methods
in Natural Language Processing.
Slav Petrov, Dipanjan Das, and Ryan McDonald. 2011.
A universal part-of-speech tagset. Technical report.
Benjamin Snyder, Tahira Naseem, and Regina Barzilay.
2009. Unsupervised multilingual grammar induction.
In Proceedings of the Association for Computational
Linguistics.
David Talbot, Hideto Kazawa, Hiroshi Ichikawa, Ja-
son Katz-Brown, Masakazu Seno, and Franz J. Och.
2011. A lightweight evaluation framework for ma-
chine translation reordering. In Proceedings of the
Sixth Workshop on Statistical Machine Translation.
Roy Tromble. 2009. Learning linear ordering problems
for better translation. In Proceedings of the Confer-
ence on Empirical Methods in Natural Language Pro-
cessing.
Jakob Uszkoreit and Thorsten Brants. 2008. Distributed
word clustering for large scale class-based language
modeling in machine translation. In Proceedings of
the Association for Computational Linguistics.
Jakob Uszkoreit, Jay Ponte, Ashok Popat, and Moshe Du-
biner. 2010. Large scale parallel document mining for
machine translation. In Proceedings of the Conference
on Computational Linguistics.
Stephan Vogel, Hermann Ney, and Christoph Tillmann.
1996. HMM-based word alignment in statistical trans-
lation. In Proceedings of the Conference on Computa-
tional linguistics.
Dekai Wu. 1997. Stochastic inversion transduction
grammars and bilingual parsing of parallel corpora.
Computational Linguistics.
Fei Xia and Michael McCord. 2004. Improving a sta-
tistical mt system with automatically learned rewrite
patterns. In Proceedings of the Conference on Com-
putational Linguistics.
Peng Xu, Jaeho Kang, Michael Ringgard, and Franz Och.
2009. Using a dependency parser to improve smt for
subject-object-verb languages. In Proceedings of the
North American Chapter of the Association for Com-
putational Linguistics.
Kenji Yamada and Kevin Knight. 2001. A syntax-based
statistical translation model. In Proceedings of the As-
sociation for Computational Linguistics.
Hao Zhang, Licheng Fang, Peng Xu, and Xiaoyun Wu.
2011. Binarized forest to string translation. In Pro-
ceedings of the Association for Computational Lin-
guistics.
203
