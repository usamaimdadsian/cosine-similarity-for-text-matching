INDEXING AND REFERENTIAL DEPENDENCIES WITHIN BINDING 
COMPUTATIONAL FRAMEWORK 
Fabio Pianesi 
Istituto per la Ricerea Scientifica eTecnologica 
38050, Pante' di Povo - Trento - Italy 
pianesi@irshit 
THEORY: A 
ABSTRACT 
This work is concerned with the development of 
instruments for GB parsing. An alternative to the 
well known indexation system of (Chomsky, 
1981) will be proposed and then used to formalize 
the view of Binding Theory in terms of the 
generation of constraints on the referential 
properties of the NPs of a sentence. Finally the 
problems of verification and satisfiability of BT 
will be addressed within the proposed framework. 
1 In t roduct ion  
This work is concerned with the development of 
instruments for GB parsing (see Barton, (1984); 
Berwick (1987); Kolb & Tiersch, (1990)); in 
particular, our attention will be focused on the 
Binding Theory (henceforth, BT) a module of the 
theory of Government and Binding (henceforth, 
GB; see Chomsky (1981; 1986)). It has been 
pointed out (eg. in Kolb & Tiersch, (1990)) that 
the lack of a complete and coherent formalization 
of a linguistic theory like GB can be a major 
obstacle in addressing the issue of principle-based 
parsing; this is true of BT too, in particular with 
respect to the indexing system of Chomsky (1981), 
the shortcomings ofwhich have often been pointed 
out in the literature. A formalism for the treatment 
of the referential relationships among the NPs of a 
sentence will be presented that is more expressive 
than indexation and more effective as a 
computational tool. 
In Section 2 the indexing system and the role it 
plays within BT will be discussed; in Section 3, an 
alternative will be developed that overcomes some 
of the shortcomings of indexing. Such a system 
will, then, be used to formalize the view of BT as a 
device that generates ( yntactic) constraints on 
reference. In Section 4, it will be shown how our 
proposal could be applied to some computational 
problems, i.e. the problems of verification and 
satisfiability within BT. 
2 Pre l im inar ies  
Since Chomsky (1981), it has become 
commonplace to denote the interpretative r lations 
among the NPs of a sentence by means of indices, 
i.e. integers attached to NPs in such a way that 
elements bearing the same index are taken to denote 
the same object(s), while different indices 
correspond to different denotations; most of the 
statements ofBT have been |aid down in terms of 
this system (Chomsky, 1981, 1986). In a number 
of works (see Chomsky (1981), Higginbotham 
(1983) and Lasnik & Uriagereka (1988)), however, 
it has been pointed out that the indexing device is 
not adequate ocapture certain referential relations; 
this is true for the relation between pronouns and 
split antecedents, i.e. antecedents composed of two 
or more arguments bearing different hematic 
roles, l Furthermore, indices blur the distinction 
between coindexing under c-command and 
coindexing without c-command, thereby making it 
difficult o capture the dependence of an element, 
behaving like a variable, upon its antecedent (see 
Reinhart, (1983)). 2 The replacement of indices with 
index sets has been proposed as a way to address 
the first problem (see Higginbotham, (1983)): an 
ordinary index is substituted by a singleton; when 
there are pluralities, e.g. when an NP is coindexed 
with a split antecedent, i  is annotated with the 
(set) union of the index sets of each component of
the plurality; therefore, coindexing amounts to 
equating index sets. In this view, the ordinary 
conditions on disjoint reference (Principles B and C 
of BT) must be extended toavoid not only identical 
reference but, more generally, reference 
intersection. It has also been argued 
(Higginbotham, 1983) that indices should be 
abandoned and substituted by the non symmetric 
relation of linking; when the antecedent is split, a 
plurality of links should be used. This way, 
however, two different situations are collapsed 
together: the one in which an item is coindexed 
with a plurality of elements all of which share the 
same index, and the case of true split antecedents, 
where the elements composing the antecedent do 
not have the same index. Furthermore, the 
asymmetric behaviour of linking has no clear 
correlate at the structural level; it will be suggested 
below that c-command should continue to play a 
role here. 
Computational works about BT have been 
mainly concerned with providing lists of possible 
or impossible antecedents for the NPs of a sentence 
(see Correa (1988); Ingria & Stallard (1989)); 
additional procedures select actual antecedents 
1 R-expressions can take split antecedents too, at least in 
certain cases (epithets); however, we will not explicitly 
address this point here. Anaphors, instead, can never take 
~lit antecedents. 
There is a full range of phenomena for which such a 
distinction seems crucial, eg. weak crossover and sloppy 
reading of pronouns (Reinhart, 1983); donkey sentences and 
the so called indirect binding (Ha'de, 1984; Reinhart, 1987). 
However, only few of them will be addressed here. 
- 39  - 
among the potential ones. Berwick (1989) 
considers only R-expressions and a device (actually, 
a Turing machine) assigning the same index to 
multiple occurences of the same R-expression 
(names); furthermore, a set of disjoint indices is 
associated with each item. Finally, Fong (1990) 
performs a combinatorial nalysis of the paradigm 
of free indexation, as proposed in (Chomsky, 
1981); he shows that free indexation gives rise to 
an exponential number of alternatives and argues 
for the necessity of interleaving indexing and 
structure computation. In any case, indexing has 
been either explicitly or implicitly assumed, so 
that most of the computational pproaches to BT 
suffer the same shortcomings pointed out above. In 
particular, given that both split antecedents and the 
distinction between binding and coreference annot 
be easily accounted for, this results in an 
impoverished input being provided to the semantic 
(intepretative) routine. 
In the following section a formal system will be 
discussed that tries to address uch problems by 
explicitly distinguishing between binding and 
coreference; atthe same time, BT will be seen as a 
theory that states very general constraints 
(constraint schemata), which are then (at least in 
part) instantiated according to the structural 
properties of the sentence at hand. These 
instantiated constraints are then used to test sets of 
positive specifications (indexations) which 
constitute the input to further semantic 
processing. 3 
3 The formal  apparatus  
For a given sentence w, let N={n 1, n 2 ..... nm} be 
the set of its NPs; furthermore l t us indicate with 
A, P and R the subset of N whose members are 
anaphors, pronouns and R-expressions, 
respectively. Sets A, P, R, constitute a partition of 
set N. Finally, Q denotes the set of quantified 
expressions and syntactic variables. Split 
antecedents will be considered as members of the 
power set of N, P(N); for the sake of uniformity, 
single NPs will be denoted by members of P(N) 
with cardinality equal to one, i.e. by singletons. 
Def in i t ion  1 A relation s ~(P(N)×P(N))is 
defined such that (9 ~)es iff ¢={m}, ly={n I . . . . .  
np} ,p> l and me lg. 
For any ¢i~=(n), neN, sets .~(n), B(n) and G{n) will 
denote the set of elements that c-command n and lie 
3Disjoint reference constraints arising from Principles B and 
C of BT are not carried over to semantic routines but are 
resolved at an earlier stage. Furthermore, it is assumed that, 
whatever processing the semanti~ routines perform, their 
default behaviour consists of assigning non-sharing semantic 
import to different NPs, unless otherwise stated in the input 
constraint set. 
inside its binding domain whenever, espectively, 
n eA, nEP or neR; finally, if n is a pronoun D(n) 
will denote the set of NPs c-commanding it and 
lying outside its binding domain. 4 
Def in i t ion  2 Given a sentence w, a relation 
b ~ (P(N)×P(N)) is defined, such that (9 ~)eb iff 
one of the following conditions obtains: 
(i) ~={n't}, nieA , ~={nj} and nje.~(ni); 
(ii) ~={ni}, nieP, II/={nj}, and njeD(ni). 
Def in i t ion  3 Given a sentence w, a relation 
d~ ( P(N) × P(N) ) is defined, such that (9 ~)e d iff 
~={ni}, II/={nj} and either njeB(ni) or njeC(ni), 
depending on whether nieP or nieR. 
In the following, b(.)and s(.), the inverse 
relations, will be used as well. 
Def in i t ion 4 Given a sentence w and a phrase 
structure tree representation for it, Zw, the set of 
binding constraints for T,v is the set ~R,,={(¢ r ~) I 
9, ~veP(N), r is a symbol, re {d, b, b(.) } }, such 
that (9 r ~)e~R,, iff (9 Ig)er, where r is the 
corresponding relation. 5
Given sentence w and a phrase structure 
representation, a binding constraint set states 
disjoint reference constraints (essentially, the 
consequencies of Principle B and C of BT) and the 
range of the binding relation (see below) for each 
NP. The meaning of the formers is that whenever 
(a d \]\])e 9?,,, the intersection of the references of ct 
and 13 is empty. Note that 3, ,  does not exhaust the 
range of possible constraints on reference; for 
instance, those preventing weak crossover 
violations or circular readings are not included in 
~,,  but will be discussed later on; furthermore, 
split antecedents are not mentioned in9t,, 
Let us, now, focus the attention on how to 
represent positive referential relationships. To this 
p~arpose, two fundamental relations on ~N) ,  
coreference and binding (more precisely, the bound 
variable reading, in the terminology of Reinhart 
(1983)) are introduced. The former is a tran~sitive, 
symmetric and reflexive relation, therefore an 
equivalence relation; the latter is irreflexive, 
intransitive and non symmetric, it only obtains 
under c-command and denotes the dependence of an 
item upon another one for its interpretation. 6 An 
4The relevant notion of c.command, is the following: node vt 
c-commands node 13 in the tree I: iff ct does not dominates \[3 
and every node y dominating ct also dominates 6. In a sense, 
~ni)  , B(n i) and C(ni) are partial encodings of, respectively, 
Principles A, B and C of BT; see Giorgi, Pianesi, Satta (1990) 
for algorithms that compute these sets. 
5Here, it is assumed that lr w has been built according to all the 
modules of the theory, a part BT. 
6Both binding and coreferenee are formal relations in that 
- 40  - 
item can be bound by, at most, one other element; 
on the contrary, an NP can corefer more than once 
and even with itself. Split antecedents cannot be 
bound and, finally, it is not possible for an item, 
ct, to be bound and, at the same time, to corefer; 
on the other hand, ct can be a binder and, at the 
same time, corefer. The binding relation will be 
denoted by the symbol I. 
The differences between binding and coreference 
are at both the structural and the interpretative 
level. Binding can only obtain under c-command 
while this is not a prerequisite for coreference; at
the interpretative level, the reference of the binder 
can be accessed to form the reference of the bindee. 
Instead, coreference corresponds to a sort of 
extensional identity and simply amounts to 
equating independent references; of course, items 
that do not refer (e.g., quantified expressions and 
anaphors) cannot corefer. 7 Bound items behave 
similarly, i.e. even a pronoun, when bound, loses 
the capability of autonomously referring and, 
therefore, of coreferring. Transitivity has not been 
assumed for binding, in order to avoid reducing the 
interpretation of a sequence of elements al .... an, 
such that each ai is bound by ai+l, upon that of the 
last element; consider the following sentence: 
(1) John and Mary told each other PRO to leave. 
and the two readings: 
(2) (i) John told Mary that Mary should 
leave and Mary told John that 
John should leave. 
(ii)* John told Mary that John should 
leave and Mary told John that 
Mary should leave. 
Because of obligatory control, PRO is bound by 
the reciprocal, which, in its turn, is bound by the 
matrix's subject. If binding were transitive, we 
should conclude that the interpretation f PRO is 
entirely dependent upon that of John and Mary (in 
this being on a par with the reciprocal) and the 
relevant reading would be (2.ii). However, (1) has 
only the first of the two readings in (2) and this 
requires that PRO inherits reciprocality from each 
other; therefore, the correct dependencies are 
between PRO and each other and between the latter 
and the matrix subject. 8 Note that a sentence like 
they are largely determined by structural properties. No 
pragmatic import is assumed for coreference, as is done by 
Reinhart (1983). 
7See tla'ik (1984) for a discussion about he distinction 
between referring and non referring NPs. 
8Here, it is assumed that a VP conlaining a reciprocal, e.g. 
told each other, is true of each element a such that a is in the 
interpretation of each other and told(a, b) is true. where b is 
also in the interpretation of each other and a;~b; see 
(3) John and Mary told each other that they 
should leave. 
admits both readings, given that the subject of the 
dependent clause can be bound either by the 
reciprocal or by the matrix subject. In this work, 
then, binding has a functional nature which may 
well reflect properties of semantic processing; even 
in this case, however, the point is that syntax only 
addresses an abstract property, i.e. functionality. 
Since coreference is an equivalence, the 
representation could be simplified by considering a 
minimal relation corresponding tocoreference. The 
connected parts of the graph of the coreference 
relation are complete subgraphs; for each of them, 
A=(V, E), choose an arbitrary vertex, ~t, and 
consider the graph Amin=(V, {(~ 0~)\] 1~:0~, (1~ 
a)~ E}). By iterating the procedure and then taking 
the union of the results, a (directed) graph is 
obtained that represents the minimal relation 
corresponding to coreference. 9 We will denote such 
a minimal relation with the symbol c and call it 
'coreference' tout court. The inverses of both I and 
c, I(.) and c(.) will be used as well. 
At this point, the notion of indexation set can be 
defined. 
Definition 5 A indexation set for a sentence w 
is the set ~3 w= { ( ~ r u,/) I q), ~/~ P(N), r is a symbol 
and re {c, c(.) , l, l(.), s, s(.)} } such that (~ r 
9')~$w iff (¢ ~)~r, where r is now interpreted as 
the corresponding relation. 
Note that split antecedents (relation s) are seen as 
part of the indexation set of the sentence since they 
do not have any independent s atus within syntax; 
furthermore, this move permits us to only consider 
a limited number of them every time, instead of the 
exponential number of possible split antecedents 
arising by free combinatorics. 
3.1 Compatib i l i ty  of an indexation set  
with BT 
An indexation set is composed of positive 
specifications that interpretative procedures process 
in order to assign actual references. Before this 
could happen, however, it must be verified that 
each of such specifications does not contradict the 
sentence particular constraints of ~R,v and general 
BT restrictions. In other words, a way is needed to 
enforce the overall compatibility of ~,, w.r.t~. BT. 
A path in ~3 w is a sequence of elements p=(¢o rl 
~1) (~1 r2 ~2)... ($m-1 rm ~m), m>-l; if ~O=~m 
Higginbotham (1981, 1985). 
9No information is lost in the passage from coreference to its 
minimal counterpart; the original graph can, in fact, be easily 
recovered by reintroducing transitivity, symmetricity and 
reflexivity. Of course, the choice of 0t does not affect he 
result. 
-41  - 
then p is a circular path. Furthermore, the string 
wp=rl r2 ... rm is called the path string associated 
with p. Path strings may be used to define the 
following regular languages that will be useful to 
state many of the conditions about index sets in a 
compact form: Ll=l*(c+c(.)+cc(.)+c(.)c+l+l(.))l(.)*, 
L2= {s} + Is} L1 +Ll{S} +LI{sJLI, I-,3 = Is(.)} + {s(. 
)}LI +Ll{S(.)} +LI{s(.)}L1. Let us briefly discuss 
their meaning. The paths from an element, ¢~, to 
another one, ~, with strings in LI encode all the 
possible ways in which ¢~ and ~ can be related by a 
combination of binding and coreference r lations 
(in such a way, of course, that their definitory 
properties are respected). In this respect, Ll replaces 
the traditional notion of coindexation (although we 
will continue to use this (improper) term to denote 
the existence of a path with string in L l ) .  
Therefore, given a sentence like the following one 
(where subscripts are only used to single out 
constituents): 
(4) His1 mother told John 2 that he3 should 
leave 
a possible indexation set may contain the 
following elements: (3 1 2), (2 c I) and the string 
lc for the path from 3 to 1, may be taken to 
substitute the old notion of coindexation. Consider, 
now, the notion of referential contribution; the 
basic case is given by the configuration (~ s 
~)e5 w (i.e., an element contributing to a split 
antecedent); by extension, language L2 encodes all 
the cases in which an element contributes to the 
reference of another one. For instance, a possible 
indexation set for the following sentence 
(5) John1 told Mary 2 that hey3 should leave 
is {(1 s 4), (2 s 4), (3 l 4)}; in this case, 1 and 2 
are both contributing to the reference of 4 (the split 
antecedent) and of 3. On the other hand, language 
L 3 encodes all the cases in which an element 
receives a referential contribution from ~. Finally, 
consider overlapping reference between two items; 
the basic instance is given by two split antecedents 
some component of which are either shared or 
coindexed; the general configuration gives rise to 
paths with strings in the language L3L2, the 
concatenation f L3 with L2 .10 An example is the 
following sentence: 
10In the linguistic literature, the term overlapping reference 
is used for all cases in which the reference of two items is not 
disjoint; of course, this implies that at least one of them 
denotes a plurality. However, the present use of this term, and 
that of referential contribution as well, is restricted to split 
antecedents, seen as the means, available to syntax, to 
compose pluralities and does not general ize to all the 
possible different varieties of plurals, such as those 
considered in (Lasnik (1976) and Higginbotham (1983)). 
(6) John I told Mary 2 that they 3should avoid 
telling Henry 4that heY5 had been 
discovered 
with the following indexation set: {(1 s 6), (2 s 6), 
(1 s 7), (4 s 7), (3 l 6), (5 l 7)}. In this case, two 
split antecedents (6 and 7) are introduced that share 
the component 1; therefore, overlapping reference 
obtains between 6 and 7 and between 3 and 5. 
The BT version considered here consistes of 
Principles A, B and C, as given by Chomsky 
(1986), weak crossover (see Reinhart (1983)) and 
some restrictions on circular eadings. Now we can 
state the following: 
Theorem 1 Cond i t ions  for  the 
compat ib i l i ty  o f  an index set wi th BT 
Given a sentence w, a tree representation zwand the 
b~nding constraint set, ~w, an index set, ~3w, 
complies with BT iff the following statements 
hold: 
(i) for any pair (~={ni}, v={njt ..... nip}, l_<p, if 
((; l I g )~w then (~ b Vk)e g~ w , l_~k_<p, where 
~k={ni~}; i.e. binding relations cannot be 
arbitrarily introduced in ~3 w, but must be derived 
from the relation b in 9~ w. 
(ii) for any ¢={n} there is no circular path in ~w, 
from ¢, with string in l+; i.e. there are no 
circular dependencies; 
(iii) for any ¢={n}, no circular path in BW gives 
rise to strings in L2; i.e. an element is never 
coindexed with another one and, at the same 
time, contributes to its reference; 
(iv) for any ¢={n}, if neA then there is a ~ such 
that (¢l v/)e~w and I~1=1; i.e. each anaphor is 
bound in ~w and never takes a split antecedent; 
(v) for any ¢)={n}, if n eQ then there is no 
element W such that (~ c ~)EBw or (IF c 
¢)e~ w ; i.eo quantifiers and syntactic variables 
cannot corefer;, therefore, they can only function 
as binders;l 1
(vi) if (~ d ~)~9~ w then there are no paths, in ~w. 
from ¢ to V with strings either in Ll or in L2 
or in L3L2; i.e. if two elements are in a 
principle B or principle C configuration then: 
they cannot be coindexed; no one of them can 
contribute Co the reference of the other and, 
finally, their references do not overlap. 
This theorem states the conditions for the 
compatibility of an indexation set for a sentence w
with BT. Note, that certain constraints, expecially 
those in (vi), make crucial use of the set 9~ w ; other 
constraints, instead, directly apply to ~w, e.g. that 
i l (v  ) together with (i) enforces the ban against weak 
crossover in that (v) checks that no quantifier corefers and (i) 
only admits binding under e-command. 
- 42  - 
preventing weak crossover. 
4 Applications 
Two applications of the formalism introduced 
above are now considered. The discussion will by 
no means be exhaustive, the purpose being just to 
show the potentiality of the present proposal. 
4.1 Ver i f i ca t ion  
We define the verification problem for BT as 
follows: let Xw be a phrase structure tree 
representation for a sentence w and let 5 w be an 
indexation set for w. We want to know if $ w is 
compatible with the constraints imposed by BT on 
Zw. In essence, this is the same problem as that 
discussed in the last section. A polynomial time 
algorithmic method that solves it will be briefly 
discussed. The problem at hand can be reduced to 
the following one: let R be a set of symbols and 
GR=(V, E) be a graph whose edges are triples (~1 r 
~)  where reR; given a regular language LR ~R*,  
is there any path p in GR with string in LR ? An 
algorithm can be given, based on a dynamic 
programming method presented in Aho et al. 
(1974), which takes as input one such graph GR. a 
finite state non deterministic automaton for LR and 
computes a IVI x IVI boolean matrix such that its 
ij-th entry is set to 1 just in case there is a path, 
from node ni to node nj, with string in LR. 
The verification problem for BT can, then, be 
solved by the following algorithmic schema: first, 
compute relations d and b ; then check condition (i) 
of Theorem 1 for every element in ~, , .  If the test 
is successful, build the directed labelled graph 
Gv=(V, E) where V={v I veP(N) and either (v r 
~)e~qw or (~ r v)~ ~w , for some r in {c, 1, 1(.), s, 
st.)} } and E=~3~. Now, check conditions (ii) 
through (v) of Theorem 1, by means of successive 
runs of the algorithm previously sketched. 
4.2  Satisf iabil ity 
Satisfiability for BT can be stated as follows: 
given a sentence w and a phrase structure tree 
representation for it, Zw, does there exist at least 
one indexation set which is BT compatible ?
Observe that, addressing the problem of BT 
satisfiability can prove useful in actual parsing 
systems, since it provides a means to weed out 
ungrammatical analysis of the input string. 
According to the version of BT considered here, 
only anaphors need to be considered; in fact, from 
the point of view of the syntactic theory, it is 
always possible to assign every R-expression and 
every pronoun an independent reference so that no 
interactions arise. In other words, a sentence like 
She loves her is perfectly grammatical, provided 
that the two pronouns are neither in the binding 
nor in the coreference relation, even if uttered 
without any context from which references can be 
drawn; in this case the only BT compatible index 
set is the empty set, i.e. the one that does not 
specify any mutual dependency between the two 
elements. On the side of the interpretative 
processes, this corresponds to (possibly infinitely) 
many non overlapping reference assignments to the 
two pronouns. 12 
Anaphors make the real difference, though, since 
Principle A requires them to get their reference 
from intrasentential items. Our attention will be 
focused on 9~ w , called the A-restricted binding 
constraint set and on 3w', called the A-restricted 
indexation set. ~w' is defined in such a way that (~ 
r I/t)eg~ w iff either ~p={n}, neA or Ip={m}, meA 
and r is as in ~w. 3w" is defined in a similar way. 
The problem, then, is to find out whether an A- 
reduced index set verifying (i), (ii) and (iv) of 
Theorem 1 exists, for a given pair (w, "rw). 
Theorem 2 - Cond i t ions  for BT 
Satisfiabil ity: Let w be a sentence, ~'w one of 
its phrase structure tree representations and ~w" its 
A-restricted binding constraint set; then, w satisfies 
BT iff for any ¢={n}, neA there exists an element, 
~={m}, meP, R, such that there is a path, p=(¢ ri 
~1) (~1 r2 ~2)... (Om.l rm Ill) in ~ '  with string 
wpeb + and (ll/ d ~ra.l)Z~ w. 
An algorithmic solution for the satisfiability 
problem can be pursued by means of an approach 
similar to the one sketched above for verification. 
5 Conc lus ions  
BT is concerned with the relationships among the 
references of NPs. Indices, however, tend to 
collapse together situations in which more subtle 
distinctions seem to be needed or blur the 
distinctions between symmetrical relationships 
(coreference) and asymmetrical ones (binding). 
A formalism has been provided that does not 
suffer the shortcomings of indexation. It permits a 
relevant number of phenomena tobe addressed in a 
rather natural way and provides a richer and less 
ambiguous input to the semantic routines. The 
overall architecture can be depicted as follows: 
given a sentence, w, and a phrase structure tree 
representation "rw, a set ~w is built which, 
essentially, is a partial encoding of Principles A, B 
and C of BT as applied to z~,. ~w, together with 
general BT compatibility conditions (see Theorem 
1), constrains the form and content of any well 
12Generalizing, it is easy to see how the empty set is a BT 
compatible indexation set whenever  anaphors are not 
involved. 
- 43  - 
formed indexation set, ~w. As far as the version of 
BT considered here (essentially, that of Chomsky, 
(1986)) is concerned, the work of syntax ends with 
$,v; any further computation is semantic. 
The formalism could be extended to other 
phenomena. Consider, for instance, the ban against 
circular reference; statements (ii) and (iii) of 
Theorem 1account for the particular cases in which 
an item a is bound by itself or contributes to the 
reference ofanother element while being coindexed 
with it. More general cases were addressed by the 
so called i-within-i condition of Chomsky (1981) 
and, more recently, by the condition on circular 
chains of Hoeksema nd Napoli (1990). The latter 
forbids circular chains, where achain is a sequence 
of elements al ..... an such that either ai is 
coindexed with ai+l or a/contains ai+l. This 
condition could be captured within the framework 
proposed here by explicitly introducing dominance, 
say, by means of a relation symbol sl and, then, by 
requiring that no circular paths are in ~w such that 
their strings are in the language (siLl) +. If this 
approach is tenable, then a parallelism emerges 
between the s and the s~ relations, since both are 
involved in statements forbidding some kind of 
circularity (for s, the relevant statement is (iii) of 
Theorem 1) and both can be seen as estabilishing 
some sort of referential dependency between two 
items. The relevant dependency for s is set 
inclusion while for sl it is some kind of functional 
dependency, under the assumption that the reference 
of a constituent is a function of the references of its 
subconstituents. This observation accounts for the 
fact that disjoint reference constraints affect items 
in the s relation (see point (vi) of Theorem 1) but 
not those in sl. 
This work has been developed as part of a larger 
system that uses GB as the reference syntactic 
theory. Currently, we are studying two applications 
of the formalism presented here: 1) on-line 
algorithms for the satisfiability problem addressed 
in Section 4.2 in an off-line fashion; the 
interleaving of the computation of satisfiability 
with structure building would provide away to rule 
out ungrammatical analysis of the input string at 
an early stage, i.e. as soon aS their incapability of 
satisfing BT can be detected; 2) algorithms for the 
exhaustive generation of all index sets that are BT 
compatible w.r.t, a given zw,. 
ACKNOWLEDGMENTS. The author would 
like to acknowledge the continuous and fruitful 
discussions with Alessandra Giorgi and Giorgio 
Satta; many of the ideas in this paper have arisen 
during them. Of course, the responsability for any 
error is author's one. 
REFERENCES 
Aho, A.V., Hopcroft, J.E., Ullman, J.D., (1974), 
The Design and Analysis of Computer Algorithms, 
Addison-Wesley, Reading, Ma. 
Barton, G., (1984), Towards a Principle Based 
Parser, MIT AI Memo No.788 
Berwick, R., (1987), Principle-Based Parsing, 
MIT AI Lab Technical Rept. 972 
Berwick, R., (1989), Natural Language 
Computational Complexity and Generative 
Capacity, to appear in Computers and Artificial 
Intelligence 
Chomsky, N., (1981) Lectures on Government 
and Binding, Foris, Dordrecht 
Chomsky, N., (1986) Knowledge of Language, 
Praeger, New York 
Correa, N., (1988), A Binding Rule for 
Government-Binding Parsing, Proceedings of 
COLING, Budapest 
Fong, S., (1990), Free Indexation: Combinatorial 
Analysis and a Compositional Algorithm, 
Proceedings of the 28th Annual Meeting of the 
Association for Computational Linguistics, 
Pittsburgh, Pc. 
Giorgi, A, Pianesi, F, Satta, G., (1990), A 
Computational Approach to Binding Theory, 
Proceedings ofCOLING, Helsinki 
Hai'k, I., (1984), Indirect Binding, Linguistic 
Inquiry, 15, 185-224 
Higginbotham, J., (1981), Reciprocal 
Interpretation, Journal of Linguistic Research, 1, 
97-117. 
Higginbotham, J. (1983) Logical Form, Binding 
and Nominals, Linguistic Inquiry, 14, 395-420 
Higginbotham, J., (1985), On Semantics, 
Linguistic Inquiry, 16, 547-594 
Hoeksema, J. and D.J. Napoli, (1990), A 
Condition on Circular Chains: A restatement of i- 
within-i, Journal of Linguistics, 26, 403-424. 
Ingria, R.P.J. & D. Stallard, (1989), A 
Computational Mechanism for Pronominal 
Reference, Proceedings ofthe 27th Annual Meeting 
of the Association for Computational Linguistics, 
Vancouver. 
Kolb, H.P.& C. Tiersch (1990), Levels and 
Empty Categories in a Principles and Parameters 
Approach to Parsing, in K. Netter & C. Rohrer 
(eds.) Representational and Derivational 
Approaches to Generative Grammar, Reidel, 
Dordrecht (forthcoming) 
Lasnik, H., (1976), Remarks on Coreference, 
Linguistic Analysis, 2, 1-23 
Lasnik, H. & J. Uriagereka (1988), A Course in 
GB Syntax, MIT Press, Cambridge, Ma. 
Reinhart, T., (1983), Anaphora and Semantic 
Interpretation, University of Chicago Press, 
Chicago 
Reinhart, T., (1987), Specifier and Operator 
Binding, in E.J. Reuland & A.G.B. ter Meulen 
(eds) The Representation f (In)definiteness, MIT 
Press, Cambridge, Ma. 
- 44  - 
