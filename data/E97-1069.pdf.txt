Generative Power of CCGs with Generalized Type-Raised Categories 
Nobo Komagata 
Depar tment  o f  Computer  and In fo rmat ion  Sc ience  
Un ivers i ty  o f  Pennsy lvan ia  
Ph i lade lph ia ,  PA 19104 
komaga t a@ 1 inc. c i s. upenn, edu 
Abstract 
This paper shows that a class of Combinatory 
Categorial Grammars (CCGs) augmented with 
a linguistically-motivated form of type raising 
involving variables is weakly equivalent to the 
standard CCGs not involving variables. The 
proof is based on the idea that any instance of 
such a grammar can be simulated by a standard 
CCG. 
1 Introduction 
The class of Combinatory Categorial Grammars (CCG- 
Std) was proved to be weakly equivalent to Linear Index 
Grammars and Tree Adjoining Grammars (Joshi, Vijay- 
Shanker, and Weir, 1991; Vijay-Shanker and Weir, 1994). 
But CCG-Std cannot handle the generalization of type 
raising that has been used in accounting for various lin- 
guistic phenomena including: coordination and extrac- 
tion (Steedman, 1985; Dowty, 1988; Steedman, 1996), 
prosody (Prevost and Steedman, 1993), and quantifier 
scope (Park, 1995). Intuitively, all of these phenomena 
call for a non-traditional, more flexible notion of consti- 
tuency capable of representing surface structures inclu- 
ding "(Subj V) (Obj)" in English. Although lexical type 
raising involving variables can be introduced to derive 
such a constituent? unconstrained use of variables can 
increase the power. For example, a grammar involving 
(T \z ) / (T \v )  can generate a language A"B"C"D"E" 
which CCG-Std cannot (Hoffman, 1993). 
This paper argues that there is a class of grammars 
which allows the use of linguistically-motivated form of 
type raising involving variables while it is still weakly 
equivalent o CCG-Std. A class of grammars, CCG- 
GTRC, is introduced in the next section as an extension 
to CCG-Std. Then we show that CCG-GTRC can actually 
be simulated by a CCG-Std, proving the equivalence. 
°Thanks to Mark Steedman, Beryl Hoffman, Anoop Sarkar, 
and the reviewers. The research was supported in part by NSF 
Grant Nos. IRI95-04372, STC-SBR-8920230, ARPA Grant 
No. N66001-94-C6043, and ARID Grant No. DAAH04-94- 
G0426. 
IOur lexieal rules to introduce type raising are non-recursive 
and thus do not suffer from the problem of the overgeneration 
discussed in (Carpenter, 1991). 
2 CCGs  w i th  Genera l i zed  Type-Ra ised  
Categor ies  
In languages like Japanese, multiple NPs can easily form 
a non-traditional constituent as in "\[(Subj I Objl) & (Subj2 
Obj2)\] Verb". The proposed ~ammars (CCG-GTRC) 
admit lexical type-raised categories (LTRC) of the form 
"1"/(T\a) or'l'\ (T/a) where T is a variable over categories 
and a is a constant category (Const). 2 Then, composition 
of LTRCs can give rise to a class of categories having 
the fo rmT/ (T \a  .... \at) or T\ (T/a .... /at), representing 
a multiple-NP constituent exemplified by "Subjl Objt". 
We call these categories generalized type-raised cate- 
gories (GTRC) and each ai of a GTRC an argument (of 
the GTRC). 
The introduction of GTRCs affects the use of combi- 
natory rules: functional application ">: z /y  + y ---, z" 
and generalized functional composition ">B ~ (x) : 
z /y  + ylzt ...\[zk - - -  zlzl ...\[z~" where k is bounded by a 
grammar-dependent kma~ as in CCG-Std. 3 This paper 
assumes two constraints defined for the grammars and 
one condition stipulated to control the formal properties. 
The following order-preserving constraint, which 
follows more primitive directionality features (Steedman, 
1991), limits the directions of the slashes in GTRCs. 
(1) In a GTRC "1"\[o (T\[,a .... Ira,), the direction of \[0 must 
be the opposite to any of In, ..., \]b 
This prohibits functional composition '>B×'  on 
'GTRC+GTRC' pairs so that 
"T/(T\A\B) + U\(U/C/D)" does not result in 
T\ (T\A\B/C/D) or U / (U IC /D\A \B) .  That is, no 
movement of arguments across the functor is allowed. 
The variable constraint states that: 
(2) Variables are limited to the defined positions in 
GTRCs. 
This prohibits '>B k (×) '  with k > I on the pair 
2Categories are in the "result-leftmost" representation a d 
associate l ft. Thus a/b/c should be read as (a/b)/c and re- 
turns a/b when an argument c is applied to its right. A ..... Z 
stand for nonterminals and a,...,z for complex, constant 
categories. 
3There are also backward rules (<) that are analogous to 
forward rules (>). Crossing rules where zt is found in the 
direction opposite of that of y are labelled with 'x ' .  'k' re- 
presents the number of arguments being passed. '\[' stands for 
a directional meta-variable for {/, \}. 
513 
'Const+GTRC'. For example, '>B 2' on "A/B + 
T/(TkC)" cannot realize the unification of the form 
"A/B + TrITe./(TtITz\C)" (with T = TilT,_) resulting in 
"AIT,./(BITz\C)". 
In order to assure the expected generative capacity, we 
place a condition on the use of rules. The condition can 
be viewed in a way comparable tothose on rewriting rules 
to define, say, context-free grammars. The bounded ar- 
gument condition ensures that every argument category 
is bounded as follows: 
(3) '>B (x) '  should not apply to the pair 
'Const+GTRC'. 
For example, this prohibits "A/ B + T~ (TkC....\Ct) -- 
A/(B\C,.. . \Cl)", where the underlined argument can 
be unboundedly arge. These constraints and condition 
also tell us how we can implement a CCG-GTRC system 
without overgeneration. 
The possible cases of combinatory ule application are 
summarized as follows: 
(4) a. For 'Const+Const', the same rules as in CCG-Std 
are applicable. 
b. For 'GTRC+Const', the applicable rules are: 
(i) >: e.g., "T/(TkAkB) + SkAkB -- S" 
(ii) >B k (x): e.g., "T/(TkA\B) + 
SkA\BkC/D -. S\C/D'" 
c. For 'Const+GTRC', only '> '  is possible: e.g., 
"S/ (S/ (S\B)) +r/ (T \B)  --, S" 
d. For 'GTRC+GTRC', the possibilities are: 
(i) >: e.g., "T/(mx (S/A/B)) + Tk (T/A/B) 
(ii) >B: e.g., "T/ (T\A\B)  + T/ (T \C\D)  - .  
T/(TkAkB\C\D)"  
CCG-GTRC is defined below where g, ta and ~a,rc re- 
present the classes of the instances of CCG-Std and CCG- 
GTRC, respectively: 
Definition 1 Gatrc is the collection of G's (extension of 
a G E G, ta) such that: 
l. For the lexical function f of G (from terminals to 
sets of categories), if a E f (a), f '  may additionally 
include { (a, T / (T \a ) ) ,  (a, T\ (T/a)) }. 
2. G' may include the rule schemata in (4). 
The main claim of the paper is the following: 
Proposition 1 ~9*~e is weakly equivalent with ~,ta. 
We show the non-trivial direction: for any G' E Ggt~c, 
there is a G" 6 ~,,a such that L (G') = L (G"). As G' 
corresponds toa unique G E ~,ta, we extend G" from G 
to simulate G', then show that the languages are exactly 
the same. 
3 Simulation of CCG-GTRC 
Consider a fragment of CCG-GTRC with a lexical 
function f such that f(a) = {A,T / (T \A)} , f (b)  = 
{ A, T/(TkA) }, f (¢) = {SNA\B}. This fragment can 
generate the following two permutations: 
(5) a. ~ b ¢ 
, / (T \a )  + 
> S\A 
> 
$ 
b. b a c 
r/(r\B) + r/(r\a) + s\a\8 
.>BX 
S\B 
> 
S 
Notice that (5b) cannot be generated by the original CCG-  
Std where the lexicon does not involve GTRCs.  In order 
to (statically) simulate (5b) by a CCG-Std, we add S\BkA 
to the value of f" (c) in the lexicon of G'. Let us call 
this type of relation between the original S\A\B and the 
S\B\]\A\] wrapping, due to its resemblance to the new 
operation of the same name in (Bach, 1979). There are 
two potential problems with this simple augmentation. 
First, wrapping may affect unboundedly ong chunks of 
categories as exemplified in (6). Second, the simulation 
may overgenerate. We discuss these issues in turn. 
(6) "T / (T \A)+T/ (TkB)+. . .+T/ (T \A)+T/ (T \B)+ 
s \a \B . . . \a \B \c  - s \c"  
We need S\~ -- \AXB...kAkB 1 which can be the result of 
unboundedly-long compositions, tosimulate (6) without 
depending on the GTRCs. Intuitively, this situation is 
analogous to long-distance movement of C from the po- 
sition left of SkAkB...kC to the sentence-initial position. 
In order to deal with the first problem, the following 
key properties of CCG-GTRC must be observed: 
(7) a. Any derived category is a combination of lexical 
categories. For example, 
SkAkB\A\B...\AkBkC may be derived from 
"SkAkBkC + ... + SkAkBkS + SkAkBkS" by 
'<B' .  
b. Wrapping can occur only when GTRCs are invol- 
ved in the use o f '>  Bkx ' and can only cross at most 
km~= arguments. Since there are only finitely- 
many argument categories, the argument(s) being 
passed can be encoded in afinite store. 
For derivable categories bounded by the maximum 
number of arguments of a lexical category, we add all 
the instances of wrapping required for simulating the ef- 
fect of GTRC into the lexicon of G". For the unbounded 
case, we extend the lexicon as in the following example: 
(8) a. For a category S\A\B\C, add S{\c}\AkB to the 
lexicon. 
b. For SkA\BkS, add S{\c}\A\BkS{\c}, 
S\A\B\C\S{\c} ..... S \C~\S{\c} .  
S{\c} is a new category representing the situation where 
\C  is being passed across categories. Thus \C which 
originatedin SkAkB\C in (a) may be passed onto another 
514 
category in (b), after a possibly unbounded number of 
compositions as follows: 
(9) S{\c}\A \B  + S{\c}\A\B\S{\c}+ ... + 
S\~S{\c}  - . -  S\GJ \A\B... \A\B\A\B 
Now, both of the permutations in (5) can be derived in 
this extension of CCG-Std. The finite lexicon with finite 
extension assures the termination of the process. This 
covers the case (4bii). 
Case (4e) can be characterized by a general pattern 
"cl (hi (b\ak...\a,)) + T/(T\ak. . . \a , )  --* c" where T = 
b. Since any argument category is bounded, we can add 
b/(b\ak...\a~) 6 f' (al. . .a,) in the lexicon as an idiom. 
The other cases do not require simulation as the same 
string can be derived in the original grammar. 
The second problem of overgeneration calls for 
another step. Suppose that the lexicon includes 
jr(c) = {S\A\B}, f (d)  = {S\B\A}, and f (e )  = 
{E\(S\B\A)} and that S\BF~ is added to f (c )  
by wrapping. To avoid generating an illegal string 
"c e" (in addition to the legal "de" ) ,  we label the 
state of wrapping as S\Bt+~o,~pl\[ \A~+,~,.~,p\] t The origi- 
nal entries can be labelled as S\Bt . . . .  p\]\A\[ . . . .  pj and 
E\ (S\B\[ . . . .  pj\A\[ . . . .  pl). The lexical, argument cate- 
gories, e.g., A, are underspecified with respect to the fea- 
ture. Since finite features can be folded into a category, 
this can be written as a CCG-Std without features. 
4 Equivalence of the Two Languages 
Proposition I can be proved by the following lemma (as 
a special case where c = S): 
Lemma 1 For any G'  6 Ggtre (an extension of G), there 
is a G" 6 ~,td such that a string w is derivable from a 
constant category c in G'  iff (~)  w is derivable from c in 
Gl l   
The sketch of the proof goes as follows. First, we con- 
struct G" from G' as in the previous ection. Both di- 
rections of the lemma can be proved by induction on the 
height of derivation. Consider the direction of '---.'. The 
base (lexical) case holds by definition of the grammars. 
For the induction step, we consider each case of rule ap- 
plication in (4). Case (4a) allows direct application of 
the induction hypothesis for the substructure of smaller 
height starting with a constant category. Other cases in- 
volve GTRC and require sublemmas which can be proved 
by induction on the length of the GTRC. Cases (4hi, di) 
have a differently-branching derivation in G" but can be 
derived without simulation. Cases (4bii, c) depend on 
the simulation of the previous ection. Case (4dii) only 
appears in sublemmas as the result category is GTRC. In 
each sublemma, the induction hypothesis of Lemma 1 is 
applied (mutually recursively) to handle the derivations 
of the smaller substructures from a constant category. 
A similar proof is applicable to the other direction. 
The special cases in this direction involves the feature 
\[+wrap\] and/or the new categories of the form 'z{...}' 
which record the argument(s) being passed. As before, 
we need sublemmas to handle each case. The proof of 
the sublemma involving the 'z{...}' form can be done by 
induction on the length of the category. 
5 Conclusion 
We have shown that CCG-GTRC as formulated above is 
weakly equivalent to CCG-Std. The results support he 
use of type raising involving variables in accounting for 
various linguistic phenomena. Other related results to be 
reported in the future include: (i) an extension o\[ the po- 
lynomial parsing algorithm of (Vijay-Shanker and Weir, 
1990) for CCG-Std to CCG-GTRC (Komagata, 1997), 
(ii) application to a Japanese parser which is capable 
of handling non-traditional constituents and information 
structure (roughly, topic/focus tructure). An extension 
of the formalism is also being studied, to include lexi- 
ca/type raising of the form T / (T \c )  ld~...Id~ for English 
prepositions/articles andJapanese particles. 
References 
Bach, Emmon. 1979. Control in Montague grammar. Lingui- 
stic Inquiry, 10. 
Carpenter, Bob. 1991. The generative power of Categorial 
Grammars and Head-driven Phrase Structure Grammars with 
lexical rules. ComputationalLinguistics, 17. 
Dowty, David. 1988. Type raising, functional composition, 
and non-constituent conjunction. In Richard Oehrle et al., 
editors, Categorial Grammars and Natural Language Struc- 
tures. D. Reidel. 
Hoffman, Beryl. 1993. The formal consequences of using 
variables in CCG categories. InACL31. 
Joshi, Aravind, K. Vijay-Shanker, and David Weir. 1991. The 
convergence of mildly context-sensitive grammatical forma- 
lisms. In Peter Sells et al., editors, Foundational Issues in 
Natural Language Processing. MIT Press, pages 31-81. 
Komagata, Nobo. 1997. Efficient parsing of CCGs with genera- 
lized type-raised categories. Ms. University of Pennsylvania. 
Park, Jong C. 1995. Quantifier scope and constituency. In 
ACL33. 
Prevost, Scott and Mark Steedman. 1993. Generating contex- 
tually appropriate intonation. In EACL6. 
Steedman, Mark J. 1985. Dependency and coordination i the 
grammar of Dutch and English. Language, 61:523-56. 
Steedman, Mark. 1991. Type-raising and directionality in
Combinatory Grammar. In ACL29. 
Steedman, Mark. 1996. Surface Structure and Interpretation. 
MIT Press. 
Vijay-Shanker, K. and David J. Weir. 1990. Polynomial time 
parsing of Combinatory Categorial Grammars. In ACL28. 
Vijay-Shanker, K. and D. J. Weir. 1994. The equivalence 
of four extensions ofcontext-free grammars. Mathematical 
Systems Theory, 27:511. 
515 
