Proceedings of the 13th Conference of the European Chapter of the Association for Computational Linguistics, pages 524–528,
Avignon, France, April 23 - 27 2012. c©2012 Association for Computational Linguistics
Learning How to Conjugate the Romanian Verb. Rules for Regular and
Partially Irregular Verbs
Liviu P. Dinu
Faculty of Mathematics
and Computer Science
University of Bucharest
ldinu@fmi.unibuc.ro
Vlad Niculae
Faculty of Mathematics
and Computer Science
University of Bucharest
vlad@vene.ro
Octavia-Maria S, ulea
Faculty of Foreign Languages
and Literatures
Faculty of Mathematics
and Computer Science
University of Bucharest
mary.octavia@gmail.com
Abstract
In this paper we extend our work described
in (Dinu et al., 2011) by adding more con-
jugational rules to the labelling system in-
troduced there, in an attempt to capture
the entire dataset of Romanian verbs ex-
tracted from (Barbu, 2007), and we em-
ploy machine learning techniques to predict
a verb’s correct label (which says what con-
jugational pattern it follows) when only the
infinitive form is given.
1 Introduction
Using only a restricted group of verbs, in (Dinu
et al., 2011) we validated the hypothesis that pat-
terns can be identified in the conjugation of the
Romanian (partially irregular) verb and that these
patterns can be learnt automatically so that, given
the infinitive of a verb, its correct conjugation
for the indicative present tense can be produced.
In this paper, we extend our investigation to the
whole dataset described in (Barbu, 2008) and at-
tempt to capture, beside the general ending pat-
terns during conjugation, as much of the phono-
logical alternations occuring in the stem of verbs
(apophony) from the dataset as we can.
Traditionally, Romanian has received a Latin-
inspired classification of verbs into 4 (or some-
times 5) conjugational classes based on the ending
of their infinitival form alone (Costanzo, 2011).
However, this infinitive-based classification has
proved itself inadequate due to its inability to ac-
count for the behavior of partially irregular verbs
(whose stems have a smaller number of allo-
morphs than the completely irregular) during their
conjugation.
There have been, thus, numerous attempts
throughout the history of Romanian Linguistics
to give other conjugational classifications based
on the way the verb actually conjugates. Lom-
bard (1955), looking at a corpus of 667 verbs,
combined the traditional 4 classes with the way in
which the biggest two subgroups conjugate (one
using the suffix ”ez”, the other ”esc”) and ar-
rived at 6 classes. Ciompec (Ciompec et. al.,
1985 in Costanzo, 2011) proposed 10 conjuga-
tional classes, while Felix (1964) proposed 12,
both of them looking at the inflection of the verbs
and number of allomorphs of the stem. Romalo
(1968, p. 5-203) produced a list of 38 verb types,
which she eventually reduced to 10.
For the purpose of machine translation, Moisil
(1960) proposed 5 regrouped classes of verbs,
with numerous subgroups, and introduced the
method of letters with variable values, while Pa-
pastergiou et al. (2007) have recently developed
a classification from a (second) language acquisi-
tion point of view, dividing the 1st and 4th tradi-
tional classes into 3 and respectively 5 subclasses,
each with a different conjugational pattern, and
offering rules for alternations in the stem.
Of the more extensive classifications, Barbu
(2007) distinguished 41 conjugational classes for
all tenses and 30 for the indicative present alone,
covering a whole corpus of more that 7000 con-
temporary Romanian verbs, a corpus which was
also used in the present paper. However, her
classes were developed on the basis of the suf-
fixes each verb receives during conjugation, and
the classification system did not take into account
the alternations occuring in the stem of irregular
and partially irregular verbs. The system of rules
presented below took into account both the end-
ings pattern and the type of stem alternation for
each verb.
In what follows we describe our method for la-
beling the dataset and finding a model able to pre-
524
dict the labels.
2 Approach
The problem which we are aiming to solve is to
determine how to conjugate a verb, given its in-
finitive form. The traditional infinitive-based clas-
sification taught in school does not take one all the
way to solving this problem. Many conjugational
patterns exist within each of these four classes.
2.1 Labeling the dataset
Following our own observations, the alternations
identified in (Papastergiou et al., 2007) and the
classes of suffix patterns given in (Barbu, 2007),
we developed a number of conjugational rules
which were narrowed down to the 30 most pro-
ductive in relation to the dataset. Each of these
30 rules (or patterns) contains 6 regular expres-
sions through which the rule models how a (dif-
ferent) type of Romanian verb conjugates in the
indicative present. They each consist of 6 reg-
ular expressions because there are three persons
(first, second, and third) times two numbers (sin-
gular and plural).
Rule 10, for example, models, as stated in
the list that follows, how verbs of the type
”a caˆnta” (to sing) conjugate in the indicative
present, by having the first regular expression
model the first person singular form ”(eu) caˆnt”
(in regular expression format: ˆ(.+)$), the sec-
ond, model the second person singular form ”(tu)
caˆnt¸i” (ˆ(.+)t¸i$), the third, model the third per-
son singular form ”(ei) caˆnta?” (ˆ(.+)a?$), and so
forth. Thus, rule 10 catches the alternation t?t¸
for the 2nd person singular, while modelling a
particular type of verb class with a particular set
of suffixes. Note that the dot accepts any letter
in the Romanian alphabet and that, for each of
the six forms, the value of the capturing groups
(those between brackets) remains constant, in this
case caˆn. These groups correspond to all parts of
the stem that remain unchanged and ensure that,
given the infinitive and the regular expressions,
one can work backwards and produce the correct
conjugation.
For a clearer understanding of one such rule,
Table 1 shows an example of how the verb ”a
tresa?lta” is modeled by rule 14.
Below, we list all the rules used, with the stem
alternations they capture and an example of a verb
Person Regexp Example
1st singular ˆ(.+)a(.+)t$ tresalt
2nd singular ˆ(.+)a(.+)t¸i$ tresalt¸i
3rd singular ˆ(.+)a(.+)ta?$ tresalta?
1st plural ˆ(.+)a?(.+)ta?m$ tresa?lta?m
2nd plural ˆ(.+)a?(.+)tat¸i$ tresa?ltat¸i
3rd plural ˆ(.+)a(.+)ta?$ tresalta?
Table 1: Rule 14 modelling ”a tresa?lta”
that they model. Note that, when we say (no) al-
ternation, we mean (no) alternation in the stem.
So the difference between rules 1, 20, 22, and the
sort lies in the suffix that is added to the stem
for each verb form. They may share some suf-
fixes, but not all and/or not for the same person
and number.
1. no alternation; ”a spera” (to hope);
2. alternation: a??e for the 2nd person singular;
”a numa?ra” (to count);
3. no alternation; ”a intra” (to enter), stem ends
in ”tr”, ”pl”, ”bl” or ”fl” which determines
the addition of ”u” at the end of the 1st per-
son singular form;
4. alternation: it lacks t?t¸ for the 2nd person
singular, which otherwise normally occurs;
”a mis¸ca” (to move), stem ends in ”s¸ca”;
5. no alternation; ”a ta?ia” (to cut), ends in ”ia”
and has a vowel before;
6. no alternation; ”a speria” (to scare), ends in
”ia” and has a consonant before;
7. no alternation; ”a dansa” (to dance), conju-
gated with the suffix ”ez”;
8. no alternation; ”a copia” (to copy), conju-
gated with a modified ”ez” due to the stem
ending in ”ia”;
9. altenation c?ch(e) or g?gh(e); ”a parca”
(to park), conjugated with ”ez”, ending in
”ca” or ”ga”;
10. alternation: t?t¸ for the 2nd person singular;
”a caˆnta” (to sing);
11. alternation: s?s¸ which replaces the usual
t?t¸ for the 2nd person singular; ”a exista”
(to exist);
525
12. alternation: a?ea for the 3rd person singular
and plural, t?t¸ for the 2nd person singular;
”a des¸tepta” (to awake/arouse);
13. alternation: e?ea for the 3rd person singular
and plural, t?t¸ for the 2nd person singular;
”a des¸erta” (to empty);
14. alternation: a??a for all the forms except the
1st and 2nd person plural; ”a tresa?lta” (to
start, to take fright);
15. alternation: a??a in the 3rd person singular
and plural, a??e in the 2nd person singular;
”a desfa?ta” (to delight);
16. alternation: a??a for all the forms except for
the 1st and 2nd person plural; ”a pa?rea” (to
seem);
17. alternation: d?z for the 2nd person singu-
lar due to palatalization, along with a??e; ”a
vedea” (to see), stem ends in ”d”;
18. alternation: a??a for all forms except the 1st
and 2nd person plural, d?z for the 2nd per-
son singular due to palatalization; ”a ca?dea”
(to fall);
19. no alternation; ”a veghea” (to watch over),
conjugates with another type of ”ez” ending
pattern;
20. no alternations; ”a merge” (to walk), receives
the typical ending pattern for the third conju-
gational class;
21. alternation: t?t¸ for the 2nd person singular;
”a promite” (to promise);
22. no alternation; ”a scrie” (to write);
23. alternations: s¸t?sc for the 1st person singu-
lar and 3rd person plural; ”a nas¸te” (to give
birth), ends in ”s¸te”;
24. alternation: ”n” is deleted from the stem in
the 2nd person singular; ”a pune” (to put),
ends in ”ne”;
25. alternation: d?z in the 2nd person singular
due to palatalization; ”a crede” (to believe),
stem ends in ”d”;
26. no alternation; ”a sui” (to climb), ends in
”ui”, ”a?i”, or ”aˆi”;
27. no alternation; ”a citi” (to read), conjugates
with the suffix ”esc” ;
28. this type preserves the ”i” from the infinitive;
”a locui” (to reside), ends in ”a?i”, ”oi”, or ui”
and conjugates with ”esc”;
29. alternation: o?oa in the 3rd person singular
and plural; end in ”?ˆ”, ”a omor?ˆ” (to kill);
30. no alternation; ”a hota?r?ˆ” (to decide), ends in
”?ˆ” and conjugates with ”a?sc”, a variant of
”esc”
2.2 Classifiers and features
Each infinitive in the dataset received a label cor-
responding to the first rule that correctly produces
a conjugation for it. This was implemented in
order to reduce the ambiguity of the data, which
was due to some verbs having alternate conjuga-
tion patterns. The unlabeled verbs were thrown
out, while the labeled ones were used to train and
evaluate a classifier.
The context sensitive nature of the alternations
leads to the idea that n-gram character windows
are useful. In the preprocessing step, the list of in-
finitives is transformed to a sparse matrix whose
lines correspond to samples, and whose features
are the occurence or the frequency of a specific n-
gram. This feature extraction step has three free
parameters: the maximum n-gram length, the op-
tional binarization of the features (taking only bi-
nary occurences instead of counts), and the op-
tional appending of a terminator character. The
terminator character allows the classifier to iden-
tify and assign a different weight to the n-grams
that overlap with the suffix of the string.
For example, consider the English infinitive to
walk. We will assume the following illustrative
values for the parameters: n-gram size of 3 and
appending the terminator character. Firstly, a ter-
minator is appended to the end, yielding the string
walk$. Subsequently, the string is broken into 1, 2
and 3-grams: w, a, l, k, $, wa, al, lk, k$, wal, alk,
lk$. Next, this list is turned into a vector using a
standard process. We have first built a dictionary
of all the n-grams from the whole dataset. These,
in order, encode the features. The verb (to) walk
is therefore encoded as a row vector with ones in
the columns corresponding to the features w, a,
etc. and zeros in the rest. In this particular case,
there is no difference between binary and count
526
rule no. verbs
1 547
2 8
3 18
4 5
5 8
6 16
7 3330
8 273
9 89
10 4
11 5
12 4
13 106
14 13
15 5
rule no. verbs
16 13
17 6
18 4
19 14
20 124
21 25
22 15
23 7
24 41
25 51
26 185
27 1554
28 486
29 5
30 27
Table 2: Number of verbs captured by each of our rules
features because all of the n-grams of this short
verb occur only once. But for a verb such as (to)
tantalize, the feature corresponding to the 2-gram
ta would get a value of 2 in a count reprezentation,
but only a value of 1 in a binary one.
The system was put together using the scikit-
learn machine learning library for Python (Pe-
dregosa et al., 2011), which provides a fast, scal-
able implementation of linear support vector ma-
chines based on liblinear (Fan et al., 2008), along
with n-gram extraction and grid search function-
ality.
3 Results
Tabel 2 shows how well the rules fitted the dataset.
Out of 7,295 verbs in the dataset, 349 were uncap-
tured by our rules. As expected, the rule capturing
the most verbs (3,330) is the one modelling those
from the 1st conjugational class (whose infinitives
end in ”a”) which conjugate with the ”ez” suffix
and are regular, namely rule 7, created for verbs
like ”a dansa”. The second largest class, also as
expected, is the one belonging to verbs from the
4th conjugational group (whose infinitives end in
”i”), which are regular, meaning no alternation in
the stem, and conjugate with the ”esc” suffix. This
class is modeled by rule number 27.
The support vector classifier was evaluated
using a 10-fold cross-validation. The multi-
class problem is treated using the one-versus-all
scheme. The parameters chosen by grid search are
a maximum n-gram length of 5, with appended
terminator and with non-binarized (count) fea-
tures. The estimated correct classification rate is
90.64%, with a weighted averaged precision of
80.90%, recall of 90.64% andF1 score of 89.89%.
Appending the artificial terminator character ’$’
consistently improves accuracy by around 0.7%.
Because each word was represented as a bag of
character n-grams instead of a continuous string,
and because, by its nature, a SVM yields sparse
solutions, combined with the evaluation using
cross-validation, we can safely say that the model
does not overfit and indeed learns useful decision
boundaries.
4 Conclusions and Future Works
Our results show that the labelling system based
on the verb conjugation model we developed can
be learned with reasonable accuracy. In the future,
we plan to develop a multiple tiered labelling sys-
tem that will allow for general alternations, such
as the ones occuring as a result of palatalization,
to be defined only once for all verbs that have
them, taking cues from the idea of letters with
multiple values. This, we feel, will highly im-
prove the acuracy of the classifier.
5 Acknowledgements
The authors would like to thank the anonymous
reviewers for their helpful comments. All authors
contributed equally to this work. The research of
Liviu P. Dinu was supported by the CNCS, IDEI
- PCE project 311/2011, ”The Structure and In-
terpretation of the Romanian Nominal Phrase in
Discourse Representation Theory: the Determin-
ers.”
References
Ana-Maria Barbu. Conjugarea verbelor romaˆ-
nes¸ti. Dict¸ionar: 7500 de verbe romaˆnes¸ti gru-
pate pe clase de conjugare. Bucharest: Coresi,
2007. 4th edition, revised. (In Romanian.) (263
pp.).
Ana-Maria Barbu. Romanian lexical databases:
Inflected and syllabic forms dictionaries. In
Sixth International Language Resources and
Evaluation (LREC’08), 2008.
Angelo Roth Costanzo. Romance Conjugational
Classes: Learning from the Peripheries. PhD
thesis, Ohio State University, 2011.
527
Figure 1: 10-fold cross validation scores for various combination of parameters. Only the values corresponding
to the best C regularization parameters are shown.
Liviu P. Dinu, Emil Ionescu, Vlad Niculae, and
Octavia-Maria S¸ulea. Can alternations be
learned? a machine learning approach to verb
alternations. In Recent Advances in Natural
Language Processing 2011, September 2011.
Rong-En Fan, Kai-Wei Chang, Cho-Jui Hsieh,
Xiang-Rui Wang, and Chih-Jen Lin. Liblinear:
A library for large linear classification. Journal
of Machine Learning Research, 9:1871–1874,
June 2008. ISSN 1532-4435.
Jir?i Felix. Classification des verbes roumains, vol-
ume VII. Philosophica Pragensia, 1964.
Alf Lombard. Le verbe roumain. Etude mor-
phologique, volume 1. Lund, C. W. K. Gleerup,
1955.
Grigore C. Moisil. Probleme puse de traduc-
erea automata?. conjugarea verbelor ?ˆn limba
romaˆna?. Studii si cerceta?ri lingvistice, XI(1):
7–29, 1960.
I. Papastergiou, N. Papastergiou, and L. Man-
deki. Verbul romaˆnesc - reguli pentru ?ˆnlesnirea
?ˆnsus¸irii indicativului prezent. In Romanian
National Symposium ”Directions in Roma-
nian Philological Research”, 7th Edition, May
2007.
F. Pedregosa, G. Varoquaux, A. Gramfort,
V. Michel, B. Thirion, O. Grisel, M. Blon-
del, P. Prettenhofer, R. Weiss, V. Dubourg,
J. Vanderplas, A. Passos, D. Cournapeau,
M. Brucher, M. Perrot, and E. Duchesnay.
Scikit-learn: Machine learning in Python. Jour-
nal of Machine Learning Research, 12:2825–
2830, Oct 2011.
Valeria Gut¸u Romalo. Morfologie Structurala? a
limbii romaˆne. Editura Academiei Republicii
Socialiste Romaˆnia, 1968.
528
