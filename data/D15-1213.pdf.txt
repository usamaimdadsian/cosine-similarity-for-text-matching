Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 1857–1867,
Lisbon, Portugal, 17-21 September 2015.
c©2015 Association for Computational Linguistics.
Hierarchical Low-Rank Tensors for Multilingual Transfer Parsing
Yuan Zhang
CSAIL, MIT
yuanzh@csail.mit.edu
Regina Barzilay
CSAIL, MIT
regina@csail.mit.edu
Abstract
Accurate multilingual transfer parsing typ-
ically relies on careful feature engineer-
ing. In this paper, we propose a hierar-
chical tensor-based approach for this task.
This approach induces a compact feature
representation by combining atomic fea-
tures. However, unlike traditional tensor
models, it enables us to incorporate prior
knowledge about desired feature interac-
tions, eliminating invalid feature combi-
nations. To this end, we use a hierar-
chical structure that uses intermediate em-
beddings to capture desired feature com-
binations. Algebraically, this hierarchi-
cal tensor is equivalent to the sum of tra-
ditional tensors with shared components,
and thus can be effectively trained with
standard online algorithms. In both unsu-
pervised and semi-supervised transfer sce-
narios, our hierarchical tensor consistently
improves UAS and LAS over state-of-the-
art multilingual transfer parsers and the
traditional tensor model across 10 differ-
ent languages.
1
1 Introduction
The goal of multilingual syntactic transfer is to
parse a resource lean target language utilizing an-
notations available in other languages. Recent ap-
proaches have demonstrated that such transfer is
possible, even in the absence of parallel data. As
a main source of guidance, these methods rely on
the commonalities in dependency structures across
languages. These commonalities manifest them-
selves through a broad and diverse set of indi-
cators, ranging from standard arc features used
in monolingual parsers to typological properties
1
The source code is available at https://github.
com/yuanzh/TensorTransfer.
Verb-subject:
{head POS=VERB} ? {modifier POS=NOUN}
?{label=subj} ? {direction=LEFT}?
{82A=SV}
Noun-adjective:
{head POS=NOUN} ? {modifier POS=ADJ}?
{direction=LEFT} ? {87A=Adj-Noun}
Table 1: Example verb-subject and noun-adjective
typological features. 82A and 87A denote the
WALS (Dryer et al., 2005) feature codes for verb-
subject and noun-adjective ordering preferences.
needed to guide cross-lingual sharing (e.g., verb-
subject ordering preference). In fact, careful fea-
ture engineering has been shown to play a cru-
cial role in state-of-the-art multilingual transfer
parsers (T¨ackstr¨om et al., 2013).
Tensor-based models are an appealing alterna-
tive to manual feature design. These models auto-
matically induce a compact feature representation
by factorizing a tensor constructed from atomic
features (e.g., the head POS). No prior knowledge
about feature interactions is assumed. As a result,
the model considers all possible combinations of
atomic features, and addresses the parameter ex-
plosion problem via a low-rank assumption.
In the multilingual transfer setting, however, we
have some prior knowledge about legitimate fea-
ture combinations. Consider for instance a ty-
pological feature that encodes verb-subject pref-
erences. As Table 1 shows, it is expressed as a
conjunction of five atomic features. Ideally, we
would like to treat this composition as a single
non-decomposable feature. However, the tradi-
tional tensor model decomposes this feature into
multiple dimensions, and considers various com-
binations of these features as well as their indi-
vidual interactions with other features. Moreover,
we want to avoid invalid combinations that con-
1857
join the above feature with unrelated atomic fea-
tures. For instance, there is no point to construct-
ing features of the form {head POS=ADJ}?{head
POS=VERB} ? · · · ? {82A=SV} as the head POS
takes a single value. However, the traditional
tensor technique still considers these unobserved
feature combinations, and assigns them non-zero
weights (see Section 7). This inconsistency be-
tween prior knowledge and the low-rank assump-
tion results in a sub-optimal parameter estimation.
To address this issue, we introduce a hierarchi-
cal tensor model that constrains parameter repre-
sentation. The model encodes prior knowledge
by explicitly excluding undesired feature combi-
nations over the same atomic features. At the bot-
tom level of the hierarchy, the model constructs
combinations of atomic features, generating inter-
mediate embeddings that represent the legitimate
feature groupings. For instance, these groupings
will not combine the verb-subject ordering feature
and the POS head feature. At higher levels of
the hierarchy, the model combines these embed-
dings as well as the expert-defined typological fea-
tures over the same atomic features. The hierar-
chical tensor is thereby able to capture the interac-
tion between features at various subsets of atomic
features. Algebraically, the hierarchical tensor is
equivalent to the sum of traditional tensors with
shared components. Thus, we can use standard
online algorithms for optimizing the low-rank hi-
erarchical tensor.
We evaluate our model on labeled dependency
transfer parsing using the newly released multi-
lingual universal dependency treebank (McDonald
et al., 2013). We compare our model against the
state-of-the-art multilingual transfer dependency
parser (T¨ackstr¨om et al., 2013) and the direct
transfer model (McDonald et al., 2011). All the
parsers utilize the same training resources but with
different feature representations. When trained on
source languages alone, our model outperforms
the baselines for 7 out of 10 languages on both
unlabeled attachment score (UAS) and labeled at-
tachment score (LAS). On average, it achieves
1.1% UAS improvement over T¨ackstr¨om et al.
(2013)’s model and 4.8% UAS over the direct
transfer. We also consider a semi-supervised set-
ting where multilingual data is augmented with 50
annotated sentences in the target language. In this
case, our model achieves improvement of 1.7%
UAS over T¨ackstr¨om et al. (2013)’s model and
4.5% UAS over the direct transfer.
2 Related Work
Multilingual Parsing The lack of annotated
parsing resources for the vast majority of world
languages has kindled significant interest in multi-
source parsing transfer (Hwa et al., 2005; Dur-
rett et al., 2012; Zeman and Resnik, 2008; Yu
et al., 2013b; Cohen et al., 2011; Rasooli and
Collins, 2015). Recent research has focused on
the non-parallel setting, where transfer is driven
by cross-lingual commonalities in syntactic struc-
ture (Naseem et al., 2010; T¨ackstr¨om et al., 2013;
Berg-Kirkpatrick and Klein, 2010; Cohen and
Smith, 2009; Duong et al., 2015).
Our work is closely related to the selective-
sharing approaches (Naseem et al., 2012;
T¨ackstr¨om et al., 2013). The core of these
methods is the assumption that head-modifier
attachment preferences are universal across
different languages. However, the sharing of arc
direction is selective and is based on typological
features. While this selective sharing idea was
first realized in the generative model (Naseem et
al., 2012), higher performance was achieved in
a discriminative arc-factored model (T¨ackstr¨om
et al., 2013). These gains were obtained by a
careful construction of features templates that
combine standard dependency parsing features
and typological features. In contrast, we propose
an automated, tensor-based approach that can
effectively capture the interaction between these
features, yielding a richer representation for cross-
lingual transfer. Moreover, our model handles
labeled dependency parsing while previous work
only focused on the unlabeled dependency parsing
task.
Tensor-based Models Our approach also relates
to prior work on tensor-based modeling. Lei et
al. (2014) employ three-way tensors to obtain a
low-dimensional input representation optimized
for parsing performance. Srikumar and Manning
(2014) learn a multi-class label embedding tai-
lored for document classification and POS tag-
ging in the tensor framework. Yu and Dredze
(2015), Fried et al. (2015) apply low-rank ten-
sor decompositions to learn task-specific word and
phrase embeddings. Other applications of tensor
framework include low-rank regularization (Pri-
madhanty et al., 2015; Quattoni et al., 2014; Singh
et al., 2015) and neural tensor networks (Socher et
1858
?h,?hc ?m,?mc?d,?l(a) Three-way tensor ?mc?hc ?l ?h ?m ?d?tu+?tl+ Mc?mcHc?hcL?lH?h M?mD?d= e2= e3Figure 1: Visual representation for traditional mul-tiway tensor.al., 2013; Yu et al., 2013a). While these methodscan automatically combine atomic features into
a compact composite representation, they cannot
take into account constraints on feature combina-
tion. In contrast, our method can capture features
at different composition levels, and more gener-
ally can incorporate structural constraints based on
prior knowledge. As our experiments show, this
approach delivers higher transfer accuracy.
3 Hierarchical Low-rank Scoring for
Transfer Parsing
3.1 Background
We start by briefly reviewing the traditional three-
way tensor scoring function (Lei et al., 2014). The
three-way tensor characterizes each arc h ? m
using the tensor-product over three feature vec-
tors: the head vector (?
h
? R
n
), the modifier vec-
tor (?
m
? R
n
) and the arc vector (?
h?m
? R
l
).
?
h
captures atomic features associated with the
head, such as its POS tag and its word form. Simi-
larly, ?
m
and ?
h?m
capture atomic features asso-
ciated with the modifier and the arc respectively.
The tensor-product of these three vectors is a rank-
1 tensor:
?
h
? ?
m
? ?
h?m
? R
n×n×l
This rank-1 tensor captures all possible combina-
tions of the atomic features in each vector, and
therefore significantly expands the feature set. The
tensor score is the inner product between a three-
way parameter tensorA ? R
n×n×l
and this rank-1
feature tensor:
vec(A) · vec(?
h
? ?
m
? ?
h?m
)
where vec(·) denotes the vector representation of a
tensor. This tensor scoring method avoids the pa-
rameter explosion and overfitting problem by as-
suming a low-rank factorization of the parameters
Mc?mc L?l H?h M?m D?dTu?tu+Tl?tl+ e2e4Hc?hc = e1= e3
Figure 2: Visual representation for hierarchical
tensor, represented as a tree structure. The ten-
sor first captures the low-level interaction (H?
h
,
M?
m
and D?
d
) by an element-wise product, and
then combines the intermediate embedding with
other components higher in the hierarchy, e.g. e
2
and L?
l
. The equations show that we composite
two representations by an element-wise sum.
A. Specifically, A is decomposed into the sum of
r rank-1 components:
A =
r
?
i=1
U(i)? V (i)?W (i)
where r is the rank of the tensor, U, V ? R
r×n
and W ? R
r×l
are parameter matrices. U(i) de-
notes the i-th row of matrix U and similarly for
V (i) and W (i). Figure 1 shows the representation
of a more general multiway factorization. With
this factorization, the model effectively alleviates
the feature explosion problem by projecting sparse
feature vectors into dense r-dimensional embed-
dings via U , V and W . Subsequently, the score is
computed as follows:
S
tensor
(h? m) =
r
?
i=1
[U?
h
]
i
[V ?
m
]
i
[W?
h?m
]
i
where [·]
i
denotes the i-th element of the matrix.
In multilingual transfer, however, we want to
incorporate typological features that do not fit in
any of the components. For example, if we add
the verb-subject ordering preference into ?
h?m
,
the tensor will represent the concatenation of this
preference with a noun-adjective arc, even though
this feature should never trigger.
3.2 Hierarchical Low-rank Tensor
To address this issue, we propose the hierarchi-
cal factorization of tensor parameters.
2
The key
idea is to generate intermediate embeddings that
capture the interaction of the same set of atomic
2
In this section we focus on delexicalized transfer, and
describe the lexicalization process in Section 3.3.
1859
features as other expert-defined features. As Fig-
ure 2 shows, this design enables the model to han-
dle expert-defined features over various subsets of
the atomic features.
Now, we will illustrate this idea in the context of
multilingual parsing. Table 2 summarizes the no-
tations of the feature vectors and the correspond-
ing parameters. Specifically, for each arc h ? m
with label l, we first compute the intermediate fea-
ture embedding e
1
that captures the interaction be-
tween the head ?
h
, the modifier ?
m
and the arc
direction and length ?
d
, by an element-wise prod-
uct.
[e
1
]
i
= [H?
h
]
i
[M?
m
]
i
[D?
d
]
i
(1)
where [·]
i
denotes the i-th value of the feature em-
bedding, and H , M and D are the parameter ma-
trices as in Table 2. The embedding e
1
cap-
tures the unconstrained interaction over the head,
the modifier and the arc. Note that ?
t
u
includes
expert-defined typological features that rely on the
specific values of the head POS, the modifier POS
and the arc direction, such as the example noun-
adjective feature in Table 1. Therefore, the em-
bedding T
u
?
t
u
captures an expert-defined interac-
tion over the head, the modifier and the arc. Thus
e
1
and T
u
?
t
u
provide two different representations
of the same set of atomic features (e.g. the head)
and our prior knowledge motivates us to exclude
the interaction between them since the low-rank
assumption would not apply. Thus, we combine
e
1
and T
u
?
t
u
as e
2
using an element-wise sum
[e
2
]
i
= [e
1
]
i
+ [T
u
?
t
u
]
i
(2)
and thereby avoid such combinations. As Fig-
ure 2 shows, e
2
in turn is used to capture the higher
level interaction with arc label features ?
l
,
[e
3
]
i
= [L?
l
]
i
[e
2
]
i
(3)
Now e
3
captures the interaction between head,
modifier, arc direction, length and label. It is over
the same set of atomic features as the typological
features that depend on arc labels ?
t
l
, such as the
example verb-subject ordering feature in Table 1.
Therefore, we sum over these embeddings as
[e
4
]
i
= [e
3
]
i
+ [T
l
?
t
l
]
i
(4)
Finally, we capture the interaction between
e
4
and context feature embeddings H
c
?
h
c
and
Notation Description
H,?
h
Head/modifier POS tag
M,?
m
D,?
d
Arc length and direction
L, ?
l
Arc label
T
u
, ?
t
u
Typological features that depend on
head/modifier POS but not arc label
T
l
, ?
t
l
Typological features that depend
on arc label
H
c
, ?
h
c
POS tags of head/modifier
M
c
, ?
m
c
neighboring words
Table 2: Notations and descriptions of parame-
ter matrices and feature vectors in our hierarchical
tensor model.
M
c
?
m
c
and compute the tensor score as
S
tensor
(h
l
?? m) =
r
?
i=1
[H
c
?
h
c
]
i
[M
c
?
m
c
][e
4
]
i
(5)
By combining Equation 1 to 5, we observe
that our hierarchical tensor score decomposes into
three multiway tensor scoring functions.
S
tensor
(h
l
?? m) =
r
?
i=1
[H
c
?
h
c
]
i
[M
c
?
m
c
]
i
{
[T
l
?
t
l
]
i
+ [L?
l
]
i
(
[T
u
?
t
u
]
i
+ [H?
h
]
i
[M?
m
]
i
[D?
d
]
i
)}
=
r
?
i=1
{
[H
c
?
h
c
]
i
[M
c
?
m
c
]
i
[T
l
?
t
l
]
i
+[H
c
?
h
c
]
i
[M
c
?
m
c
]
i
[L?
l
]
i
[T
u
?
t
u
]
i
+[H
c
?
h
c
]
i
[M
c
?
m
c
]
i
[L?
l
]
i
[H?
h
]
i
[M?
m
]
i
[D?
d
]
i
}
(6)
This decomposition provides another view of
our tensor model. That is, our hierarchical tensor
is algebraically equivalent to the sum of three mul-
tiway tensors, where H
c
, M
c
and L are shared.
3
From this perspective, we can see that our tensor
model effectively captures the following three sets
of combinations over atomic features:
f
1
: ?
h
c
? ?
m
c
? ?
t
l
f
2
: ?
h
c
? ?
m
c
? ?
l
? ?
t
u
f
3
: ?
h
c
? ?
m
c
? ?
l
? ?
h
? ?
m
? ?
d
3
We could also associate each multiway tensor with a dif-
ferent weight. In our work, we keep them weighted equally.
1860
The last set of features f
3
captures the interac-
tion across standard atomic features. The other
two sets of features f
1
and f
2
focus on combin-
ing atomic typological features with atomic label
and context features. Consequently, we explicitly
assign zero weights for invalid assignments, by ex-
cluding the combination of ?
t
u
with ?
h
and ?
m
.
3.3 Lexicalization Components
In order to encode lexical information in our
tensor-based model, we add two additional com-
ponents, H
w
?
h
w
and M
w
?
m
w
, for head and mod-
ifier lexicalization respectively. We compute the
final score as the interaction between the delexi-
calized feature embedding in Equation 5 and the
lexical components. Specifically:
[e
5
]
i
= [H
c
?
h
c
]
i
[M
c
?
m
c
]
i
[e
4
]
i
S
tensor
(h
l
?? m) =
r
?
i=1
[H
w
?
h
w
]
i
[M
w
?
m
w
]
i
[e
5
]
i
(7)
where e
5
is the embedding that represents the
delexicalized transfer results. We describe the fea-
tures in ?
h
w
and ?
m
w
in Section 5.
3.4 Combined Scoring
Similar to previous work on low-rank tensor scor-
ing models (Lei et al., 2014; Lei et al., 2015), we
combine the traditional scoring and the low-rank
tensor scoring. More formally, for a sentence x
and a dependency tree y, our final scoring func-
tion has the form
S(x,y) = ?
?
h
l
??m?y
w · ?(h
l
?? m)
+ (1? ?)
?
h
l
??m?y
S
tensor
(h
l
?? m) (8)
where ?(h
l
?? m) is the traditional features for
arc h ? m with label l and w is the correspond-
ing parameter vector. ? ? [0, 1] is the balanc-
ing hyper-parameter and we tune the value on the
development set. The parameters in our model
are ? = (w, H,M,D,L, T
u
, T
l
, H
c
,M
c
), and our
goal is to optimize all parameters given the train-
ing set.
4 Learning
In this section, we describe our learning method.
4
Following standard practice, we optimize the pa-
rameters ? = (w, H,M,D,L, T
u
, T
l
, H
c
,M
c
) in
a maximum soft-margin framework, using online
passive-aggressive (PA) updates (Crammer et al.,
2006).
For tensor parameter update, we employ the
joint update method originally used by Lei et al.
(2015) in the context of four-way tensors. While
our tensor has a very high order (8 components for
the delexicalized parser and 10 for the lexicalized
parser) and is hierarchical, the gradient computa-
tion is nevertheless similar to that of traditional
tensors. As described in Section 3.2, we can view
our hierarchical tensor as the combination of three
multiway tensors with parameter sharing. There-
fore, we can compute the gradient of each mul-
tiway tensor and take the sum accordingly. For
example, the gradient of the label component is
?L =
?
h
l
??m?y
?
(
(H
c
?
h
c
) (M
c
?
m
c
) [(T
u
?
t
u
)
+ (H?
h
) (M?
m
) (D?
d
)]
)
? ?
l
?
?
h
l
??m?y˜
(
(H
c
?
h
c
) (M
c
?
m
c
) [(T
u
?
t
u
)
+ (H?
h
) (M?
m
) (D?
d
)]
)
? ?
l
(9)
where  is the element-wise product and + de-
notes the element-wise addition. y
?
and y˜ are the
gold tree and the maximum violated tree respec-
tively. For each sentence x, we find y˜ via cost-
augmented decoding.
Tensor Initialization Given the high tensor or-
der, initialization has a significant impact on the
learning quality. We extend the previous power
method for high-order tensor initialization (Lei et
al., 2015) to the hierarchical structure using the al-
gebraic view as in computing the gradient.
Briefly, the power method incrementally com-
putes the most important rank-1 component for
H(i), M(i) etc, for i = 1 . . . r. In each iteration,
the algorithm updates each component by taking
the multiplication between the tensor T and the
rest of the components. When we update the label
component l, we do the multiplication for different
4
Our description focuses on delexicalized transfer, and we
can easily extend the method to the lexicalized case.
1861
Feature Description
82A Order of Subject and Verb
83A Order of Object and Verb
85A Order of Adposition and Noun Phrase
86A Order of Genitive and Noun
87A Order of Adjective and Noun
Table 3: Typological features from WALS (Dryer
et al., 2005) used to build the feature tem-
plates in our work, inspired by Naseem et al.
(2012). Unlike previous work (Naseem et al.,
2012; T¨ackstr¨om et al., 2013), we use 82A and
83A instead of 81A (order of subject, object and
verb) because we can distinguish between subject
and object relations based on dependency labels.
multiway tensors and then take the sum.
l = ?T
0
, h
c
,m
c
,?, t
u
?+ ?T
1
, h
c
,m
c
,?, h,m, d?
where the operator ?T
0
, h
c
,m
c
,?, t
u
? returns a
vector in which the i-th element is computed as
?
uvw
T
0
(i, u, v, w)h
c
(u)m
c
(v)t
u
(w). The algo-
rithm updates other components in a similar fash-
ion until convergence.
5 Features
Linear Scoring Features Our traditional lin-
ear scoring features in ?(h
l
?? m) are mainly
drawn from previous work (T¨ackstr¨om et al.,
2013). Table 3 lists the typological features
from “The World Atlas of Language Structure
(WALS)” (Dryer et al., 2005) used to build the fea-
ture templates in our work. We use 82A and 83A
for verb-subject and verb-object order respectively
because we can distinguish between these two re-
lations based on dependency labels. Table 4 sum-
marizes the typological feature templates we use.
In addition, we expand features with dependency
labels to enable labeled dependency parsing.
Tensor Scoring Features For our tensor model,
feature vectors listed in Table 2 capture the five
types of atomic features as follows:
(a) ?
h
, ?
m
: POS tags of the head or the modifier.
(b) ?
h
c
, ?
m
c
: POS tags of the left/right neighbor-
ing words.
(c) ?
l
: dependency labels.
(d) ?
d
: dependency length conjoined with direc-
tion.
(e) ?
t
u
, ?
t
l
: selectively shared typological fea-
tures, as described in Table 4.
?
t
l
dir·82A·?(hp=VERB?mp=NOUN?subj? l)
dir·82A·?(hp=VERB?mp=PRON?subj? l)
dir·83A·?(hp=VERB?mp=NOUN?obj? l)
dir·83A·?(hp=VERB?mp=PRON?obj? l)
?
t
u
dir·85A·?(hp=ADP?mp=NOUN)
dir·85A·?(hp=ADP?mp=PRON)
dir·86A·?(hp=NOUN?mp=NOUN)
dir·87A·?(hp=ADJ?mp=NOUN)
Table 4: Typological feature templates used in our
work. hp/mp are POS tags of the head/modifier.
dir ? {LEFT,RIGHT} denotes the arc direction.
82A-87A denote the WALS typological feature
value. ?(·) is the indicator function. subj ? l
denotes that the arc label l indicates a subject rela-
tion, and similarly for obj ? l.
We further conjoin atomic features (b) and (d) with
the family and the typological class of the lan-
guage, because the arc direction and the word or-
der distribution depends on the typological prop-
erty of languages (T¨ackstr¨om et al., 2013). We
also add a bias term into each feature vector.
Partial Lexicalization We utilize multilingual
word embeddings to incorporate partial lexical
information in our model. We use the CCA
method (Faruqui and Dyer, 2014) to generate
multilingual word embeddings. Specifically, we
project word vectors in each non-English language
to the English embedding space. To reduce the
noise from the automatic projection process, we
only incorporate lexical information for the top-
100 most frequent words in the following closed
classes: pronoun, determiner, adposition, conjunc-
tion, particle and punctuation mark. Therefore, we
call this feature extension partial lexicalization.
5
We follow previous work (Lei et al., 2014) for
adding embedding features. For the linear scoring
model, we simply append the head and the modi-
fier word embeddings after the feature vector. For
the tensor-based model, we add each entry of the
word embedding as a feature value into ?
h
w
and
?
m
w
. In addition, we add indicator features for the
English translation of words because this improves
performance in preliminary experiments. For ex-
ample, for the German word und, we add the word
and as a feature.
5
In our preliminary experiments, we observe that our lexi-
calized model usually outperforms the unlexicalized counter-
parts by about 2%.
1862
6 Experimental Setup
Dataset We evaluate our model on the newly re-
leased multilingual universal dependency treebank
v2.0 (McDonald et al., 2013) that consists of 10
languages: English (EN), French (FR), German
(DE), Indonesian (ID), Italian (IT), Japanese (JA),
Korean (KO), Brazilian-Portuguese (PT), Spanish
(ES) and Swedish (SV). This multilingual tree-
bank is annotated with a universal POS tagset and
a universal dependency label set. Therefore, this
dataset is an excellent benchmark for cross-lingual
transfer evaluation. For POS tags, the gold uni-
versal annotation used the coarse tagset (Petrov et
al., 2011) that consists of 12 tags: noun, verb, ad-
jective, adverb, pronoun, determiner, adposition,
numeral, conjunction, particle, punctuation mark,
and a catch-all tag X. For dependency labels, the
universal annotation developed the Stanford de-
pendencies (De Marneffe and Manning, 2008) into
a rich set of 40 labels. This universal annota-
tion enables labeled dependency parsing in cross-
lingual transfer.
Evaluation Scenarios We first consider the un-
supervised transfer scenario, in which we assume
no target language annotations are available. Fol-
lowing the standard setup, for each target language
evaluated, we train our model on the concatenation
of the training data in all other source languages.
In addition, we consider the semi-supervised
transfer scenario, in which we assume 50 sen-
tences in the target language are available with an-
notation. However, we observe that random sen-
tence selection of the supervised sample results
in a big performance variance. Instead, we se-
lect sentences that contain patterns that are absent
or rare in source language treebanks. To this end,
each time we greedily select the sentence that min-
imizes the KL divergence between the trigram dis-
tribution of the target language and the trigram dis-
tribution of the training data after adding this sen-
tence. The training data includes both the target
and the source languages. The trigrams are based
on universal POS tags. Note that our method does
not require any dependency annotations. To incor-
porate the new supervision, we simply add the new
sentences into the original training set, weighing
their impact by a factor of 10.
Baselines We compare against different variants
of our model.
• Direct: a direct transfer baseline (McDonald et
al., 2011) that uses only delexicalized features
in the MSTParser (McDonald et al., 2005).
• NT-Select: our model without the tensor com-
ponent. This baseline corresponds to the prior
feature-based transfer method (T¨ackstr¨om et al.,
2013) with extensions to labeled parsing, lexi-
calization and semi-supervised parsing.
6
• Multiway: tensor-based model where typolog-
ical features are added as an additional compo-
nent and parameters are factorized in the multi-
way structure similarly as in Figure 1.
• Sup50: our model trained only on the 50
sentences in the target language in the semi-
supervised scenario.
In all the experiments we incorporate partial lexi-
calization for all variants of our model and we fo-
cus on labeled dependency parsing.
Supervised Upper Bound As a performance
upper bound, we train the RBGParser (Lei et al.,
2014), the state-of-the-art tensor-based parser, on
the full target language training set. We train the
first-order model
7
with default parameter settings,
using the current version of the code.
8
Evaluation Measures Following standard prac-
tices, we report unlabeled attachment score (UAS)
and labeled attachment score (LAS), excluding
punctuation. For all experiments, we report results
on the test set and omit the development results be-
cause of space.
Experimental Details For all experiments, we
use the arc-factored model and use Eisner’s algo-
rithm (Eisner, 1996) to infer the projective Viterbi
parse. We train our model and the baselines for 10
epochs. We set a strong regularization C = 0.001
during learning because cross-lingual transfer con-
tains noise and the models can easily overfit. Other
hyper-parameters are set as ? = 0.3 and r = 200
(rank of the tensor). For partial lexicalization, we
set the embedding dimension to 50.
7 Results
Table 5 and 7 summarize the results for the unsu-
pervised and the semi-supervised scenarios. Aver-
aged across languages, our model outperforms all
6
We use this as a re-implementation of T¨ackstr¨om et al.
(2013)’s model because their code is not publicly available.
7
All multilingual transfer models in our work and
in T¨ackstr¨om et al. (2013)’s work are first-order. Therefore,
we train first-order RBGParser for consistency.
8
https://github.com/taolei87/RBGParser
1863
Direct NT-Select Multiway Ours
UAS LAS UAS LAS UAS LAS UAS LAS
EN 65.7 56.7 67.6 55.3 69.8 56.3 70.5 59.8
FR 77.9 67.4 79.1 68.9 78.4 68.3 78.9 68.8
DE 62.1 53.1 62.1 53.3 62.1 54.0 62.5 54.1
ID 46.8 39.3 57.4 37.1 59.5 38.9 61.0 43.5
IT 77.9 67.9 79.4 69.4 79.0 69.0 79.3 69.4
JA 57.8 16.8 69.2 20.8 69.9 20.4 71.7 21.3
KO 59.9 34.3 70.4 29.1 70.5 28.1 70.7 30.5
PT 77.7 71.0 78.5 72.0 78.3 71.9 78.6 72.5
ES 76.8 65.9 77.2 67.7 77.6 68.0 78.0 68.3
SV 75.9 64.5 74.5 62.2 74.8 62.9 75.0 62.5
AVG 67.8 53.7 71.5 53.6 72.0 53.8 72.6 55.1
Table 5: Unsupervised: Unlabeled attachment scores (UAS) and Labeled attachment scores (LAS) of
different variants of our model with partial lexicalization in unsupervised scenario. “Direct” and “Multi-
way” indicate the direct transfer and the multiway variants of our model. “NT-Select” indicates our model
without tensor component, corresponding to a re-implementation of previous transfer model (T¨ackstr¨om
et al., 2013) with extensions to partial lexicalization and labeled parsing. The last column shows the
results by our hierarchical tensor-based model. Boldface numbers indicate the best UAS or LAS.
Feature Weight
87A?hp=NOUN?mp=ADJ 2.24× 10
?3
87A?hp=VERB?mp=NOUN 8.88× 10
?4
87A?hp=VERB?mp=PRON 1.21× 10
?4
87A?hp=NOUN?mp=NOUN 9.48× 10
?4
87A?hp=ADP?mp=NOUN 3.87× 10
?4
Table 6: Examples of weights for feature
combinations between the typological feature
87A=Adj-Noun and different types of arcs. The
first row shows the weight for the valid feature
(conjoined with noun?adjective arcs) and the rest
show weights for the invalid features (conjoined
with other types of arcs).
the baselines in both cases. Moreover, it achieves
best UAS and LAS on 7 out of 10 languages.
The difference is more pronounced in the semi-
supervised case. Below, we summarize our find-
ings when comparing the model with the base-
lines.
Impact of Hierarchical Tensors We first ana-
lyze the impact of using a hierarchical tensor by
comparing against the Multiway baseline that im-
plements traditional tensor model. As Table 6
shows, this model learns non-zero weights even
for invalid feature combinations.
This disregard to known constraints impacts the
resulting performance. In the unsupervised sce-
nario, our hierarchical tensor achieves an aver-
age improvement of 0.5% on UAS and 1.3% on
LAS. Moreover, our model obtains better UAS on
all languages and better LAS on 9 out of 10 lan-
guages. This observation shows that the multi-
lingual transfer consistently benefits more from a
hierarchical tensor structure. In addition, we ob-
serve a similar gain over this baseline in the semi-
supervised scenario.
Impact of Tensor Models To evaluate the effec-
tiveness of tensor modeling in multilingual trans-
fer, we compare our model against the NT-Select
baseline. In the unsupervised scenario, our ten-
sor model yields a 1.1% gain on UAS and a 1.5%
on LAS. In the semi-supervised scenario, the im-
provement is more pronounced, reaching 1.7% on
UAS and 1.9% on LAS. The relative error reduc-
tion almost doubles, e.g. 7.1% vs. 3.8% on UAS.
While both our model and NT-Select outper-
form Direct baseline by a large margin on UAS,
we observe that NT-Select achieves a slightly
worse LAS than Direct. By adding a tensor com-
ponent, our model outperforms both baselines on
LAS, demonstrating that tensor scoring function is
able to capture better labeled features for transfer
comparing to Direct and NT-Select baselines.
Transfer Performance in the Context of Super-
vised Results To assess the contribution of mul-
tilingual transfer, we compare against the Sup50
results in which we train our model only on 50
target language sentences. As Table 7 shows,
our model improves UAS by 2.3% and LAS by
2.7%. We also provide a performance upper bound
1864
Semi-supervised Transfer Supervised Parsing (RBGParser)
Direct Sup50 NT-Select Multiway Ours Partial Lex. Full Lex.
UAS LAS UAS LAS UAS LAS UAS LAS UAS LAS UAS LAS UAS LAS
EN 76.8 70.3 79.6 74.2 81.0 75.0 81.5 75.9 82.5 77.2 88.7 84.5 92.3 90.3
FR 78.8 70.2 76.9 66.8 79.4 71.0 79.0 71.1 79.6 71.8 83.3 76.5 83.3 76.5
DE 68.4 59.8 71.0 62.4 71.3 62.1 72.1 63.2 74.2 65.6 82.0 72.8 84.5 78.2
ID 63.7 56.1 78.2 68.9 76.9 68.2 77.8 69.3 79.1 70.4 85.0 77.1 85.8 79.8
IT 78.9 70.3 77.1 69.3 80.2 72.2 80.8 72.6 80.9 72.6 85.5 79.8 87.9 84.7
JA 68.2 42.1 76.6 61.0 73.0 58.8 75.6 60.9 76.4 61.3 79.0 64.0 82.1 70.3
KO 65.3 45.2 70.1 54.7 66.5 50.2 67.8 52.8 70.2 54.2 74.0 59.1 90.9 86.1
PT 78.6 72.9 76.0 70.0 78.7 73.1 79.3 73.9 79.3 73.5 85.2 80.8 88.5 86.5
ES 77.0 68.5 75.2 66.5 77.0 69.0 77.6 69.5 78.4 70.5 82.0 75.0 85.8 81.6
SV 77.7 67.2 74.9 64.7 77.6 66.8 77.8 67.5 78.3 67.9 84.4 75.4 87.3 82.3
AVG 73.4 62.3 75.6 65.8 76.2 66.6 76.9 67.7 77.9 68.5 82.9 74.5 87.3 83.5
Table 7: Semi-supervised and Supervised: UAS and LAS of different variants of our model when 50
annotated sentences in the target language are available. “Sup50” columns show the results of our model
when only supervised data in the target language is available. We also include in the last two columns
the supervised training results with partial or full lexicalization as the performance upper bound. Other
columns have the same meaning as in Table 5. Boldface numbers indicate the best UAS or LAS.
by training RBGParser on the full training set.
9
When trained with partial lexical information as
in our model, RBGParser gives 82.9% on UAS
and 74.5% on LAS with partial lexical informa-
tion. By utilizing source language annotations, our
model closes the performance gap between train-
ing on the 50 sentences and on the full training set
by about 30% on both UAS and LAS. We further
compare to the performance upper bound with full
lexical information (87.3% UAS and 83.5% LAS).
In this case, our model still closes the performance
gap by 21% on UAS and 15% on LAS.
Time Efficiency of Hierarchical Tensors We
observe that our hierarchical structure retains the
time efficiency of tensor models. On the English
test set, the decoding speed of our hierarchical ten-
sor is close to the multiway counterpart (58.6 vs.
61.2 sentences per second), and is lower than the
three-way tensor by a factor of 3.1 (184.4 sen-
tences per second). The time complexity of ten-
sors is linear to the number of low-rank com-
ponents, and is independent of the factorization
structure.
8 Conclusions
In this paper, we introduce a hierarchical tensor
based-model which enables us to constrain learned
representation based on desired feature interac-
tions. We demonstrate that our model outperforms
state-of-the-art multilingual transfer parsers and
9
On average, each language has more than 10,000 training
sentences.
traditional tensors. These observations, taken to-
gether with the fact that hierarchical tensors are
efficiently learnable, suggest that the approach can
be useful in a broader range of parsing applica-
tions; exploring the options is an appealing line of
future research.
Acknowledgments
This research is developed in a collaboration
of MIT with the Arabic Language Technologies
(ALT) group at Qatar Computing Research In-
stitute (QCRI) within the Interactive sYstems for
Answer Search (IYAS) project. The authors ac-
knowledge the support of the U.S. Army Research
Office under grant number W911NF-10-1-0533.
We thank the MIT NLP group and the EMNLP
reviewers for their comments. Any opinions, find-
ings, conclusions, or recommendations expressed
in this paper are those of the authors, and do not
necessarily reflect the views of the funding orga-
nizations.
References
Taylor Berg-Kirkpatrick and Dan Klein. 2010. Phy-
logenetic grammar induction. In Proceedings of the
48th Annual Meeting of the Association for Compu-
tational Linguistics, pages 1288–1297. Association
for Computational Linguistics.
Shay B Cohen and Noah A Smith. 2009. Shared lo-
gistic normal distributions for soft parameter tying
in unsupervised grammar induction. In Proceed-
ings of the Annual Conference of the North Amer-
ican Chapter of the Association for Computational
1865
Linguistics, pages 74–82. Association for Computa-
tional Linguistics.
Shay B Cohen, Dipanjan Das, and Noah A Smith.
2011. Unsupervised structure prediction with non-
parallel multilingual guidance. In Proceedings of
the Conference on Empirical Methods in Natural
Language Processing, pages 50–61. Association for
Computational Linguistics.
Koby Crammer, Ofer Dekel, Joseph Keshet, Shai
Shalev-Shwartz, and Yoram Singer. 2006. Online
passive-aggressive algorithms. The Journal of Ma-
chine Learning Research, 7:551–585.
Marie-Catherine De Marneffe and Christopher D Man-
ning. 2008. The stanford typed dependencies rep-
resentation. In Coling 2008: Proceedings of the
workshop on Cross-Framework and Cross-Domain
Parser Evaluation, pages 1–8. Association for Com-
putational Linguistics.
Matthew S Dryer, David Gil, Bernard Comrie, Hagen
Jung, Claudia Schmidt, et al. 2005. The world atlas
of language structures.
Long Duong, Trevor Cohn, Steven Bird, and Paul
Cook. 2015. Cross-lingual transfer for unsu-
pervised dependency parsing without parallel data.
Proceedings of the SIGNLL Conference on Compu-
tational Natural Language Learning, page 113.
Greg Durrett, Adam Pauls, and Dan Klein. 2012. Syn-
tactic transfer using a bilingual lexicon. In Pro-
ceedings of the 2012 Joint Conference on Empirical
Methods in Natural Language Processing and Com-
putational Natural Language Learning, pages 1–11.
Association for Computational Linguistics.
Jason M Eisner. 1996. Three new probabilistic models
for dependency parsing: An exploration. In Pro-
ceedings of the 16th conference on Computational
linguistics-Volume 1, pages 340–345. Association
for Computational Linguistics.
Manaal Faruqui and Chris Dyer. 2014. Improving
vector space word representations using multilingual
correlation. In Proceedings of the Annual Confer-
ence of the European Chapter of the Association for
Computational Linguistics., volume 2014.
Daniel Fried, Tamara Polajnar, and Stephen Clark.
2015. Low-rank tensors for verbs in compositional
distributional semantics. In Proceedings of the 53rd
Annual Meeting of the Association for Computa-
tional Linguistics.
Rebecca Hwa, Philip Resnik, Amy Weinberg, Clara
Cabezas, and Okan Kolak. 2005. Bootstrapping
parsers via syntactic projection across parallel texts.
Natural language engineering, 11(03):311–325.
Tao Lei, Yu Xin, Yuan Zhang, Regina Barzilay, and
Tommi Jaakkola. 2014. Low-rank tensors for scor-
ing dependency structures. In Proceedings of the
52nd Annual Meeting of the Association for Com-
putational Linguistics, volume 1, pages 1381–1391.
Tao Lei, Yuan Zhang, Regina Barzilay, Llu´?s M`arquez,
and Alessandro Moschitti. 2015. High-order low-
rank tensors for semantic role labeling. In Proceed-
ings of the Conference of the North American Chap-
ter of the Association for Computational Linguistics.
Ryan McDonald, Koby Crammer, and Fernando
Pereira. 2005. Online large-margin training of de-
pendency parsers. In Proceedings of the 43rd An-
nual Meeting of the Association for Computational
Linguistics, pages 91–98. Association for Computa-
tional Linguistics.
Ryan McDonald, Slav Petrov, and Keith Hall. 2011.
Multi-source transfer of delexicalized dependency
parsers. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing,
pages 62–72. Association for Computational Lin-
guistics.
Ryan T McDonald, Joakim Nivre, Yvonne Quirmbach-
Brundage, Yoav Goldberg, Dipanjan Das, Kuzman
Ganchev, Keith B Hall, Slav Petrov, Hao Zhang, Os-
car T¨ackstr¨om, et al. 2013. Universal dependency
annotation for multilingual parsing. In Proceedings
of the 51st Annual Meeting of the Association for
Computational Linguistics, pages 92–97.
Tahira Naseem, Harr Chen, Regina Barzilay, and Mark
Johnson. 2010. Using universal linguistic knowl-
edge to guide grammar induction. In Proceedings of
the 2010 Conference on Empirical Methods in Nat-
ural Language Processing, pages 1234–1244. Asso-
ciation for Computational Linguistics.
Tahira Naseem, Regina Barzilay, and Amir Globerson.
2012. Selective sharing for multilingual dependency
parsing. In Proceedings of the 50th Annual Meet-
ing of the Association for Computational Linguis-
tics: Long Papers-Volume 1, pages 629–637. Asso-
ciation for Computational Linguistics.
Slav Petrov, Dipanjan Das, and Ryan McDonald. 2011.
A universal part-of-speech tagset. arXiv preprint
arXiv:1104.2086.
Audi Primadhanty, Xavier Carreras, and Ariadna Quat-
toni. 2015. Low-rank regularization for sparse con-
junctive feature spaces: An application to named en-
tity classification. In Proceedings of the 53rd An-
nual Meeting of the Association for Computational
Linguistics.
Ariadna Quattoni, Borja Balle, Xavier Carreras, and
Amir Globerson. 2014. Spectral regularization
for max-margin sequence tagging. In Proceedings
of the 31st International Conference on Machine
Learning (ICML-14), pages 1710–1718.
Mohammad Sadegh Rasooli and Michael Collins.
2015. Density-driven cross-lingual transfer of de-
pendency parsers. In Proceedings of the Conference
on Empirical Methods in Natural Language Pro-
cessing. Association for Computational Linguistics.
1866
Sameer Singh, Tim Rocktaschel, and Sebastian Riedel.
2015. Towards combined matrix and tensor fac-
torization for universal schema relation extraction.
In NAACL Workshop on Vector Space Modeling for
NLP.
Richard Socher, Danqi Chen, Christopher D Manning,
and Andrew Ng. 2013. Reasoning with neural ten-
sor networks for knowledge base completion. In
Proceedings of the Advances in Neural Information
Processing Systems, pages 926–934.
Vivek Srikumar and Christopher D Manning. 2014.
Learning distributed representations for structured
output prediction. In Proceedings of the Advances
in Neural Information Processing Systems, pages
3266–3274.
Oscar T¨ackstr¨om, Ryan McDonald, and Joakim Nivre.
2013. Target language adaptation of discriminative
transfer parsers. In Proceedings of the Annual Con-
ference of the North American Chapter of the Asso-
ciation for Computational Linguistics.
Mo Yu and Mark Dredze. 2015. Learning composition
models for phrase embeddings. Transactions of the
Association for Computational Linguistics, 3:227–
242.
Dong Yu, Li Deng, and Frank Seide. 2013a. The
deep tensor neural network with applications to
large vocabulary speech recognition. Audio, Speech,
and Language Processing, IEEE Transactions on,
21(2):388–396.
Mo Yu, Tiejun Zhao, Yalong Bai, Hao Tian, and Di-
anhai Yu. 2013b. Cross-lingual projections between
languages from different families. In Proceedings of
the 51st Annual Meeting of the Association for Com-
putational Linguistics, pages 312–317.
Daniel Zeman and Philip Resnik. 2008. Cross-
language parser adaptation between related lan-
guages. In Proceedings of the International Joint
Conference on Natural Language Processing, pages
35–42.
1867
