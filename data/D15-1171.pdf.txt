Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 1466–1476,
Lisbon, Portugal, 17-21 September 2015.
c
©2015 Association for Computational Linguistics.
Solving Geometry Problems:
Combining Text and Diagram Interpretation
Minjoon Seo, Hannaneh Hajishirzi, Ali Farhadi, Oren Etzioni, Clint Malcolm
University of Washington, Allen Institute for Artificial Intelligence
{minjoon,hannaneh,clintm}@washington.edu,{alif,orene}@allenai.org
Abstract
This paper introduces GEOS, the first au-
tomated system to solve unaltered SAT ge-
ometry questions by combining text un-
derstanding and diagram interpretation.
We model the problem of understanding
geometry questions as submodular opti-
mization, and identify a formal problem
description likely to be compatible with
both the question text and diagram. GEOS
then feeds the description to a geometric
solver that attempts to determine the cor-
rect answer. In our experiments, GEOS
achieves a 49% score on official SAT ques-
tions, and a score of 61% on practice ques-
tions.
1
Finally, we show that by integrat-
ing textual and visual information, GEOS
boosts the accuracy of dependency and se-
mantic parsing of the question text.
1 Introduction
This paper introduces the first fully-automated
system for solving unaletered SAT-level geomet-
ric word problems, each of which consists of text
and the corresponding diagram (Figure 1). The ge-
ometry domain has a long history in AI, but previ-
ous work has focused on geometric theorem prov-
ing (Feigenbaum and Feldman, 1963) or geomet-
ric analogies (Evans, 1964). Arithmetic and alge-
braic word problems have attracted several NLP
researchers (Kushman et al., 2014; Hosseini et al.,
2014; Roy et al., 2015), but geometric word prob-
lems were first explored only last year by Seo et al.
(2014). Still, this system merely aligned diagram
elements with their textual mentions (e.g., “Circle
O”)—it did not attempt to fully represent geome-
try problems or solve them. Answering geometry
questions requires a method that interpert question
text and diagrams in concert.
1
The source code, the dataset and the annotations are pub-
licly available at geometry.allenai.org.
In	  the	  diagram	  at	  
the	  le?,	  circle	  O	  
has	  a	  radius	  of	  5,	  
and	  CE	  =	  2.	  
Diameter	  AC	  is	  
perpendicular	  to	  
chord	  BD.	  What	  is	  
the	  length	  of	  BD?	  
In	  isosceles	  
triangle	  ABC	  at	  
the	  le?,	  lines	  AM	  
and	  CM	  are	  the	  
angle	  bisectors	  of	  
angles	  BAC	  and	  
BCA.	  What	  is	  the	  
measure	  of	  angle	  
AMC?	  
In	  the	  figure	  at	  le?,	  
The	  bisector	  of	  
angle	  BAC	  is	  
perpendicular	  to	  BC	  
at	  point	  D.	  If	  AB	  =	  6	  
and	  BD	  =	  3,	  what	  is	  
the	  measure	  of	  
angle	  BAC?	  
Equals(RadiusOf(O), 5) IsCircle(O) Equals(LengthOf(CE), 2) 
IsDiameter(AC) IsChord(BD) 
Perpendicular(AC), BD) Equals(what, Length(BD))   
IsIsoscelesTriangle(ABC) BisectsAngle(AM, BAC) IsLine(AM) 
CC(AM, CM) CC(BAC, BCA) 
IsAngle(BAC) IsAngle(AMC) Equals(what, MeasureOf(AMC)) 
  
a)	  110	  	  	  	  b)	  115	  	  	  c)	  120	  	  	  d)	  125	  	  	  e)	  130	   
IsAngle(BAC) BisectsAngle(line, BAC) Perpendicular (line, BC) 
Equals(LengthOf(AB), 6) Equals(LengthOf(BD), 3) 
IsAngle(BAC) Equals(what, MeasureOf(BAC))  
a)	  15	  	  	  	  b)	  30	  	  	  c)	  45	  	  	  d)	  60	  	  	  	  e)	  75	    
correct	  
correct	  
correct	  
(a)	  
(b)	  
(c)	  
Ques?ons	  
a)	  12	  	  	  	  	  b)	  10	  	  	  	  	  	  c)	  8	  	  	  	  	  	  d)	  6	  	  	  	  	  	  e)	  4	  
Interpreta?ons	  
Figure 1: Questions (left column) and interpretations (right
column) derived by GEOS.
The geometry genre has several distinctive char-
acteristics. First, diagrams provide essential in-
formation absent from question text. In Figure 1
problem (a), for example, the unstated fact that
lines BD and AC intersect at E is necessary to
solve the problem. Second, the text often includes
difficult references to diagram elements. For ex-
ample, in the sentence “In the diagram, the longer
line is tangent to the circle”, resolving the ref-
erent of the phrase “longer line” is challenging.
Third, the text often contains implicit relations.
For example, in the sentence “AB is 5”, the rela-
tions IsLine(AB) and length(AB)=5 are implicit.
Fourth, geometric terms can be ambiguous as well.
For instance, radius can be a type identifier in “the
length of radius AO is 5”, or a predicate in “AO
is the radius of circle O”. Fifth, identifying the
correct arguments for each relation is challeng-
ing. For example, in sentence “Lines AB and CD
are perpendicular to EF”, the parser has to deter-
mine what is perpendicular to EF—line AB? line
1466
CD? Or both AB and CD? Finally, it is hard to
obtain large number of SAT-level geometry ques-
tions; Learning from a few examples makes this a
particularly challenging NLP problem.
This paper introduces GEOS, a system that
maps geometry word problems into a logical rep-
resentation that is compatible with both the prob-
lem text and the accompanying diagram (Fig-
ure 1). We cast the mapping problem as the prob-
lem of selecting the subset of relations that is most
likely to correspond to each question.
We compute the mapping in three main steps
(Figure 2). First, GEOS uses text- and diagram-
parsing to overgenerate a set of relations that po-
tentially correspond to the question text, and asso-
ciates a score with each. Second, GEOS generates
a set of relations (with scores) that corresponds to
the diagram. Third, GEOS selects a subset of the
relations that maximizes the joint text and diagram
scores. We cast this maximization as a submodu-
lar optimization problem, which enables GEOS to
use a close-to-optimal greedy algorithm. Finally,
we feed the derived formal model of the problem
to a geometric solver, which computes the answer
to the question.
GEOS is able to solve unseen and unaltered
multiple-choice geometry questions. We report on
experiments where GEOS achieves a 49% score
on official SAT questions, and a score of 61% on
practice questions, providing the first results of
this kind. Our contributions include: (1) designing
and implementing the first end-to-end system that
solves SAT plane geometry problems; (2) formal-
izing the problem of interpreting geometry ques-
tions as a submodular optimization problem; and
(3) providing the first empirical results on the ge-
ometry genre, making the data and software avail-
able for future work.
2 Related Work
Semantic parsing is an important area of NLP re-
search (Zettlemoyer and Collins, 2005; Ge and
Mooney, 2006; Flanigan et al., 2014; Eisenstein
et al., 2009; Kate and Mooney, 2007; Goldwasser
and Roth, 2011; Poon and Domingos, 2009; Be-
rant and Liang, 2014; Kwiatkowski et al., 2013;
Reddy et al., 2014). However, semantic parsers do
not tackle diagrams—a critical element of the ge-
ometry genre. In addition, the overall number of
available geometry questions is quite small com-
pared to the size of typical NLP corpora, making it
challenging to learn semantic parsers directly from
geometry questions. Relation extraction is another
area of NLP that is related to our task (Cowie
and Lehnert, 1996; Culotta and Sorensen, 2004).
Again, both diagrams and small corpora are prob-
lematic for this body of work.
Our work is part of grounded language acqui-
sition research (Branavan et al., 2012; Vogel and
Jurafsky, 2010; Chen et al., 2010; Hajishirzi et
al., 2011; Liang et al., 2009; Koncel-Kedziorski et
al., 2014; Bordes et al., 2010; Kim and Mooney,
2013; Angeli and Manning, 2014; Hixon et al.,
2015; Koncel-Kedziorski et al., 2014; Artzi and
Zettlemoyer, 2013) that involves mapping text
to a restricted formalism (instead of a full, do-
main independent representation). In the geom-
etry domain, we recover the entities (e.g., circles)
from diagrams, derive relations compatible with
both text and diagram, and re-score relations de-
rived from text parsing using diagram information.
Casting the interpretation problem as selecting the
most likely subset of literals can be generalized to
grounded semantic parsing domains such as navi-
gational instructions.
Coupling images and the corresponding text has
attracted attention in both vision and NLP (Farhadi
et al., 2010; Kulkarni et al., 2011; Gupta and
Mooney, 2010; Gong et al., 2014; Fang et al.,
2014). We build on this powerful paradigm, but
instead of generating captions we show how pro-
cessing multimodal information help improve tex-
tual or visual interpretations for solving geometry
questions.
Diagram understanding has been explored since
early days in AI (Lin et al., 1985; Hegarty and Just,
1989; Novak, 1995; O’Gorman and Kasturi, 1995;
Bulko, 1988; Srihari, 1994; Lovett and Forbus,
2012). Most previous approaches differ from our
method because they address the twin problems of
diagram understanding and text understanding in
isolation. Often, previous work relies on manual
identification of visual primitives, or on rule-based
system for text analysis. The closest work to ours
is the recent work of Seo et al. (2014) that aligns
geometric shapes with their textual mentions, but
does not identify geometric relations or solve ge-
ometry problems.
3 Problem Formulation
A geometry question is a tuple (t, d, c) consist-
ing of a text t in natural language, a diagram d
1467
In	  triangle	  ABC,	  line	  DE	  is	  parallel	  
with	  line	  AC,	  DB	  equals	  4,	  AD	  is	  8,	  
and	  DE	  is	  5.	  Find	  AC.
IsTriangle(ABC) 0.96
Parallel(AC,  DE) 0.91
Parallel(AC,  DB) 0.74
Equals(LengthOf(DB),  4) 0.97
Equals(LengthOf(AD),  8) 0.94
Equals(LengthOf(DE),  5) 0.94
Equals(4,  LengthOf(AD)) 0.31
…
Text	  Parsing Diagram	  Parsing
Answer:	  (d)
Sec.	  4
Sec.	  6
Colinear(A,D,B) 1.0
Colinear(B,E,C) 1.0
Parallel(AC,  DE) 0.99
Parallel(AC,  DB) 0.02
…
L, AtextL* ? L L?, Adiagram
IsTriangle(ABC) Parallel(AC,  DE)
Equals(LengthOf(DB),  4) Equals(LengthOf(AD),  8)
Equals(LengthOf(DE),  5) Find(LengthOf(AC))
...
Sec.	  7
Ge
oS
inp
ut
Int
erp
ret
ati
on
Sol
ver
Sec.	  5
B
D E
A C(a)	  9	  	  	  (b)	  10	  	  (c)	  12.5	  	  	  (d)	  15	  	  	  (e)	  17
Figure 2: Overview of our method for solving geometry
questions.
in raster graphics, and multiple choice answers
c = {c
1
, . . . , c
M
} (M = 5 in SAT). Answering
a geometry question is to find a correct choice c
i
.
Our method, GEOS, consists of two steps (Fig-
ure 2): (1) interpreting a geometry question by
deriving a logical expression that represents the
meaning of the text and the diagram, and (2) solv-
ing the geometry question by checking the satis-
fiablity of the derived logical expression. In this
paper we mainly focus on interpreting geometry
questions and use a standard algebraic solver (see
section 7 for a brief description of the solver).
Definitions: We formally represent logical ex-
pressions in the geometry domain with the lan-
guage ?, a subset of typed first-order logic that
includes:
• constants, corresponding to known numbers
(e.g., 5 and 2 in Figure 1) or entities with known
geometric coordinates.
• variables, corresponding to unknown numbers
or geometrical entities in the question (e.g., O
and CE in Figure 1).
• predicates, corresponding to geometric or arith-
metic relations (e.g., Equals, IsDiameter,
IsTangent).
• functions, corresponding to properties of geo-
metrical entities (e.g., LengthOf, AreaOf) or
arithmetic operations (e.g., SumOf, RatioOf).
Each element in the geometry language has either
boolean (e.g., true), numeric (e.g., 4), or entity
(e.g., line, circle) type. We refer to all symbols
in the language ? as concepts.
We use the term literal to refer to the application
of a predicate to a sequence of arguments (e.g.,
IsTriangle(ABC)). Literals are possibly negated
atomic formulas in the language ?. Logical for-
mulas contain constants, variables, functions, ex-
istential quantifiers and conjunctions over literals
(e.g., ?x, IsTriangle(x)?IsIsosceles(x)).
Interpretation is the task of mapping a new ge-
ometry question with each choice, (t, d, c
m
), into
a logical formula ? in ?. More formally, the
goal is to find ?
?
= arg max
???
score(?; t, d, c
m
)
where ? is the set of all logical formulas in ? and
score measures the interpretation score of the for-
mula according to both text and diagram. The
problem of deriving the best formula ?
?
can be
modeled as a combinatorial search in the space of
literals L (note that each logical formula ? is rep-
resented as a conjunction over literals l
i
).
GEOS efficiently searches this combinatorial
space taking advantage of a submodular set func-
tion that scores a subset of literals using both text
and diagram. The best subset of literals is the one
that has a high affinity with both text and diagram
and is coherent i.e., does not suffer from redun-
dancy (see Section 6). More formally,
2
L
?
= arg max
L
?
?L
?A(L
?
, t, d)
? ?? ?
Affinity
+H(L
?
, t, d)
? ?? ?
Coherence
, (1)
where A(L
?
, t, d) measures the affinity of the lit-
erals in L
?
with both the text and the diagram,
H(L
?
, t, d) measures the coverage of the literals
in L
?
compared to the text and discourages redun-
dancies, and ? is a trade-off parameter between A
andH.
The affinity A is decomposed into text-
based affinity, A
text
, and diagram-based affinity,
A
diagram
. The text-based affinity closely mirrors
the linguistic structure of the sentences as well as
type matches in the geometry language ?. For
modeling the text score for each literal, we learn
a log-linear model. The diagram-based affinity
A
diagram
grounds literals into the diagram, and
scores literals according to the diagram parse. We
describe the details on how to compute A
text
in
section 4 and A
diagram
in section 5.
4 Text Parser
The text-based scoring function A
text
(L, t) com-
putes the affinity score between the set of liter-
2
We omit the argument c
m
for the ease of notation.
1468
1. {l
j
},A
text
? TEXT PARSING(language ?, text-choice pair (t, c
i
)) (Section 4)
(i) concept identification: initialize a hypergraph G with concept nodes.
(ii) relation identification: add a hyperedge (relation) r
j
between two or three related concept nodes and assign a
weight A
text
(r
j
, t; ?) based on the learned classifier.
(iii) literals parsing: obtain all subtrees of G, which are equivalent to all possible literals, {l
?
j
}. LetA
text
(l
j
, t) =?
j
A
text
(r
j
, t; ?) for all r
j
in the literal l
i
.
(iv) relation completion: obtain a complete literal l
j
for each (under-specified) l
?
j
, dealing with implication and
coordinating conjunctions.
2. L
?
,A
diagram
? DIAGRAM PARSING(diagram image d, literals {l
j
}) (Section 5)
3. L
?
? GREEDY MAXIMIZATION(literals L = {l
j
}, score functions A
text
and A
diagram
) (Section 6)
(i) initialization: L
?
? {}
(ii) greedy addition: add(L
?
, l
j
) s.t. l
j
= argmax
l
j
?L\L
?
F(L
?
? {l
j
})?F(L
?
), where F = ?A+H
(iii) iteration: repeat step (ii) while the gain is positive.
4. Answer c
?
? one of choices s.t. L
?
? L
?
are simultaneously satisfiable according to SOLVER (Section 7)
Figure 3: Solving geometry questions with GEOS.
IsTangentTo
RadiusOf
O
Equals
5
Predicates	  
Func?ns	  
Constants,	  Variables	  
“A	  tangent	  line	  is	  drawn	  to	  circle	  O	  with	  radius	  of	  5”	  
line
IsCircle
Figure 4: Hypergraph representation of the sentence “A
tangent line is drawn to circle O with radius of 5”.
als L and the question text t. This score is the
sum of the affinity scores of individual literals
l
j
? L i.e., A
text
(L, t) =
?
j
A
text
(l
j
, t) where
A
text
(l
j
, t) 7? [??, 0].
3
GEOS learns a discrim-
inative model A
text
(l
j
, t; ?) that scores the affin-
ity of every literal l
j
? L and the question text t
through supervised learning from training data.
We represent literals using a hypergraph (Fig-
ure 4) (Klein and Manning, 2005; Flanigan et al.,
2014). Each node in the graph corresponds to a
concept in the geometry language (i.e. constants,
variables, functions, or predicates). The edges
capture the relations between concepts; concept
nodes are connected if one concept is the argument
of the other in the geometry language. In order to
interpret the question text (Figure 3 step 1), GEOS
first identifies concepts evoked by the words or
phrases in the input text. Then, it learns the affin-
ity scores which are the weights of edges in the
hypergraph. It finally completes relations so that
type matches are satistfied in the formal language.
4.1 Concept Identification
Concepts are defined as symbols in the geometry
language ?. The concept identification stage maps
words or phrases to their corresponding concepts
3
For the ease of notation, we use A
text
as a function tak-
ing sets of literals or a literal.
in the geometry language. Note that a phrase can
be mapped to several concepts. For instance, in
the sentence “ABCD is a square with an area of
1”, the word “square” is a noun referring to some
object, so it maps to a variable square. In a similar
sentence “square ABCD has an area 1”, the word
“square” describes the variable ABCD, so it maps to
a predicate IsSquare.
GEOS builds a lexicon from training data that
maps stemmed words and phrases to the con-
cepts in the geometry language ?. The lexicon
is derived from all correspondences between ge-
ometry keywords and concepts in the geometry
language as well as phrases and concepts from
manual annotations in the training data. For in-
stance, the lexicon contains (“square”, {square,
IsSquare}) including all possible concepts for the
phrase “square”. Note that GEOS does not make
any hard decision on which identification is cor-
rect in this stage, and defers it to the relation iden-
tification stage (Section 4.2). To identify num-
bers and explicit variables (e.g. “5”, “AB”, “O”),
GEOS uses regular expressions. For an input text
t, GEOS assigns one node in the graph (Figure 4)
for each concept identified by the lexicon.
4.2 Relation Identification
A relation is a directed hyperedge between
concept nodes. A hyperedge connects two
nodes (for unary relations such as the edge be-
tween RadiusOf and O in Figure 4) or three nodes
(for binary relations such as the hyperedge be-
tween Equals and its two arguments RadiusOf
and 5 in Figure 4).
We use a discriminative model (logistic re-
gression) to predict the probability of a rela-
tion r
i
being correct in text t: P
?
(y
i
|r
i
, t) =
1
1+exp (f
text
(r
i
,t)·?)
, where y
i
? {0, 1} is the label
1469
Dependency tree distance Shortest distance between the words of the concept nodes in the dependency tree. We use
indicator features for distances of -3 to 3. Positive distance shows if the child word is at the
right of the parent’s in the sentence, and negative otherwise.
Word distance Distance between the words of the concept nodes in the sentence.
Dependency tree edge label Indicator functions for the outgoing edges of the parent and child for the shortest path
between them.
Part of speech tag Indicator functions for the POS tags of the parent and the child.
Relation type Indicator functions for unary / binary parent and child nodes.
Return type Indicator functions for the return types of the parent and the child nodes. For example,
return type of Equals is boolean, and that of LengthOf is numeric.
Table 1: The features of the unary relations. The features of the binary relations is computed in a similar way.
(a) sentence: “What is the perimeter of ABCE?”
intermediate: ? what, ABCE: Bridged(what, PerimeterOf(ABCE))
final: ? what, ABCE: Equals(what, PerimeterOf(ABCE))
(b) sentence: “AM and CM bisect BAC and BCA.”
intermediate: ? AM, CM, BAC, BCA: BisectsAngle(AM, BAC) ? CC(AM, CM) ? CC(BAC, BCA)
final: ? AM, CM, BAC, BCA: BisectsAngle(AM, BAC) ? BisectsAngle(CM, BCA)
Figure 5: Showing the two-stage learning with the intermediate representation that demonstrates implication.
for r
i
being correct in t, f
text
(r
i
, t) is a feature
vector of t and r
i
, and ? is a vector of parameters
to be learned. We define the affinity score of r
i
by A
text
(r
i
, t; ?) = logP
?
(y
i
|r
i
, t). The weight
of the corresponding hyperedge is the relation’s
affinity score. We learn ? using the maximum like-
lihood estimation of the training data (details in
Section 8), with L2 regularization.
We train two separate models for learning unary
and binary relations. The training data consists
of sentence-relation-label tuples (t, r, y); for in-
stance, (“A tangent line is drawn to circle O”,
IsTangent(line, O), 1) is a positive training
example. All incorrect relations in the sen-
tences of the training data are negative exam-
ples (e.g. (“A tangent line is drawn to circle O”,
IsCircle(line), 0)).
The features for the unary and binary models
are shown in Table 1 for the text t and the relation
r
i
. We use two main feature categories. Structural
features: these features capture the syntactic cues
of the text in the form of text distance, dependency
tree labels, and part of speech tags for the words
associated with the concepts in the relation. Ge-
ometry language features: these features capture
the cues available in the geometry language ? in
the form of the types and the truth values of the
corresponding concepts in the relation.
At inference, GEOS uses the learned models
to calculate the affinity scores of all the literals
derived from the text t. The affinity score of
each literal l
j
is calculated from the edge (rela-
tion) weights in the corresponding subgraph, i.e.
A
text
(l
j
, t) =
?
i
A
text
(r
i
, t; ?) for all r
i
in the
literal l
j
.
4.3 Relation Completion
So far, we have explained how to score the affini-
ties between explicit relations and the question
text. Geometry questions usually include implicit
concepts. For instance, “Circle O has a radius of
5” implies the Equals relationship between “Ra-
dius of circle O” and “5”. In addition, geometry
questions include coordinating conjunctions be-
tween entities. In “AM and CM bisect BAC and
BCA”, “bisect” is shared by two lines and two an-
gles (Figure 5 (b)). Also, consider two sentences:
“AB and CD are perpendicular” and “AB is per-
pendicular to CD”. Both have the same semantic
annotation but very different syntactic structures.
It is difficult to directly fit the syntactic struc-
ture of question sentences into the formal language
? for implications and coordinating conjunctions,
especially due to small training data. We, instead,
adopt a two-stage learning inspired by recent work
in semantic parsing (Kwiatkowski et al., 2013).
Our solution assumes an intermediate representa-
tion that is syntactically sound but possibly under-
specified. The intermediate representation closely
mirrors the linguistic structure of the sentences. In
addition, it can easily be transferred to the formal
representation in the geometry language ?.
Figure 5 shows how implications and coordinat-
ing conjunctions are modeled in the intermediate
representation. Bridged in Figure 5 (a) indicates
that there is a special relation (edge) between the
two concepts (e.g., what and PerimeterOf), but
the alignment to the geometry language L is not
clear. CC in Figure 5 (b) indicates that there is a
special relation between two concepts that are con-
nected by “and” in the sentence. GEOS completes
1470
the under-specified relations by mapping them to
the corresponding well-defined relations in the for-
mal language.
Implication: We train a log-linear classifier to
identify if a Bridged relation (implied concept)
exists between two concepts. Intuitively, the clas-
sification score indicates the likelihood that certain
two concepts (e.g., What and PerimeterOf) are
bridged. For training, positive examples are pairs
of concepts whose underlying relation is under-
specified, and negative examples are all other pairs
of concepts that are not bridged. For instance,
(what, PerimeterOf) is a positive training exam-
ple for the bridged relation. We use the same fea-
tures in Table 1 for the classifier.
We then use a deterministic rule to map bridged
relations in the intermediate representation to the
correct completed relations in the final represen-
tation. In particular, we map bridged to Equals
if the two children concepts are of type number,
and to IsA if the concepts are of type entity (e.g.
point, line, circle).
Coordinating Conjunctions: CC relations model
coordinating conjunctions in the intermediate rep-
resentation. For example, Figure 5 (b) shows the
conjunction between the two angles BAC and BCA.
We train a log-linear classifier for the CC relations,
where the setup of the model is identical to that of
the binary relation model in Section 4.2.
After we obtain a list of CC(x,y) in the interme-
diate representation, we use deterministic rules to
coordinate the entities x and y in each CC relation
(Figure 5 (b)). First, GEOS forms a set {x, y} for
every two concepts x and y that appear in CC(x,y)
and transforms every x and y in other literals to
{x, y}. Second, GEOS transforms the relations
with expansion and distribution rules (Figure 3
Step 1 (iv)). For instance, Perpendicular({x,y})
will be transferred to Perpendicular(x, y) (ex-
pansion rule), and LengthOf{x,y}) will be trans-
ferred to LengthOf(x) ? LengthOf(y) (distribu-
tion rule).
5 Diagram Parser
We use the publicly available diagram parser (Seo
et al., 2014) to obtain the set of all visual elements
(points, lines, circles, etc.), their coordinates, their
relationships in the diagram, and their alignment
with entity references in the text (e.g. “line AB”,
“circle O”). The diagram parser serves two pur-
poses: (a) computing the diagram score as a mea-
sure of the affinity of each literal with the diagram;
(b) obtaining high-confidence visual literals which
cannot be obtained from the text.
Diagram score: For each literal l
j
from
the text parsing, we obtain its diagram score
A
diagram
(l
j
, d) 7? [??, 0]. GEOS grounds each
literal derived from the text by replacing every
variable (entity or numerical variable) in the re-
lation to the corresponding variable from the dia-
gram parse. The score function is the relaxed in-
dicator function of whether a literal is true accord-
ing to the diagram. For instance, in Figure 1 (a),
consider the literal l = Perpendicular(AC, BD).
In order to obtain its diagram score, we compute
the angle between the lines AC and BD in the di-
agram and compare it with pi/2. The closer the
two values, the higher the score (closer to 0), and
the farther they are, the lower the score. Note that
the variables AC and BD are grounded into the dia-
gram before we obtain the score; that is, they are
matched with the actual corresponding lines AC
and BD in the diagram.
The diagram parser is not able to evaluate
the correctness of some literals, in which case
their diagram scores are undefined. For instance,
Equals(LengthOf(AB), 5) cannot be evaluated
in the diagram because the scales in the diagram
(pixel) and the text are different. For another ex-
ample, Equals(what, RadiusOf(circle)) can-
not be evaluated because it contains an un-
grounded (query) variable, what. When the dia-
gram score of a literal l
j
is undefined, GEOS lets
A
diagram
(l
j
) = A
text
(l
j
).
If the diagram score of a literal is very low,
then it is highly likely that the literal is false. For
example, in Figure 2, Parallel(AC, DB) has a
very low diagram score, 0.02, and is apparently
false in the diagram. Concretely, if for some lit-
eral l
j
, A
diagram
(l
i
) < , then GEOS disregards
the text score of l
i
by replacing A
text
(l
j
) with
A
diagram
(l
j
). On the other hand, even if the dia-
gram score of a literal is very high, it is still possi-
ble that the literal is false, because many diagrams
are not drawn to scale. Hence, GEOS adds both
text and diagram scores in order to score literals
(Section 6).
High-confidence visual literals: Diagrams often
contain critical information that is not present in
the text. For instance, to solve the question in Fig-
ure 1, one has to know that the points A, E, and C
are colinear. In addition, diagrams include numer-
1471
ical labels (e.g. one of the labels in Figure 1(b) in-
dicates the measure of the angle ABC = 40 degrees).
This kind of information is confidently parsed with
the diagram parser by Seo et al. (2014). We denote
the set of the high-confidence literals by L
?
that
are passed to the solver (Section 7).
6 Optimization
Here, we describe the details of the objective func-
tion (Equation 1) and how to efficiently maximize
it. The integrated affinity score of a set of literals
L
?
(the first term in Equation 1) is defined as:
A(L
?
, t, d) =
?
l
?
j
?L
?
[
A
text
(l
?
j
, t) +A
diagram
(l
?
j
, d)
]
where A
text
and A
diagram
are the text and dia-
gram affinities of l
?
j
, respectively.
To encourage GEOS to pick a subset of literals
that cover the concepts in the question text and, at
the same time, avoid redundancies, we define the
coherence function as:
H(L
?
, t, d) = N
covered
(L
?
)?R
redundant
(L
?
)
where N
covered
is the number of the concept nodes
used by the literals inL
?
, andN
redundant
is the num-
ber of redundancies among the concept nodes of
the literals. To account for the different scales be-
tween A and H, we use the trade-off parameter ?
in Equation 1 learned on the validation dataset.
Maximizing the objective function in Equation
1 is an NP-hard combinatorial optimization prob-
lem. However, we show that our objective func-
tion is submodular (see Appendix (Section 11) for
the proof of submodularity). This means that there
exists a greedy method that can provide a reliable
approximation. GEOS greedily maximizes Equa-
tion 1 by starting from an empty set of literals and
adding the next literal l
j
that maximizes the gain of
the objective function until the gain becomes nega-
tive (details of the algorithm and the gain function
are explained in Figure 3 step 3).
7 Solver
We now have the best set of literals L
?
from the
optimization, and the high-confidence visual lit-
erals L
?
from the diagram parser. In this step,
GEOS determines if an assignment exists to the
variables X in L
?
? L
?
that simultaneously satis-
fies all of the literals. This is known as the problem
of automated geometry theorem proving in com-
putational geometry (Alvin et al., 2014).
We use a numerical method to check the satis-
fiablity of literals. For each literal l
j
in L
?
? L
?
,
we define a relaxed indicator function g
j
: S 7?
z
j
? [??, 0]. The function z
j
= g
j
(S) indi-
cates the relaxed satisfiability of l
j
given an as-
signment S to the variables X . The literal l
j
is completely satisfied if g
j
(S) = 0. We for-
mulate the problem of satisfiability of literals as
the task of finding the assignment S
?
to X such
that sum of all indicator functions g
j
(S
?
) is maxi-
mized, i.e. S
?
= arg max
S
?
j
g
j
(S). We use the
basing-hopping algorithm (Wales and Doye, 1997)
with sequential least squares programming (Kraft,
1988) to globally maximize the sum of the indica-
tor functions. If there exists an assignment such
that
?
j
g
j
(S) = 0, then GEOS finds an assign-
ment to X that satisfies all literals. If such assign-
ment does not exist, then GEOS concludes that the
literals are not satisfiable simultaneously. GEOS
chooses to answer a geometry question if the lit-
erals of exactly one answer choice are simultane-
ously satisfiable.
8 Experimental Setup
Logical Language ?: ? consists of 13 types of
entities and 94 function and predicates observed
in our development set of geometry questions.
Implementation details: Sentences in geometry
questions often contain in-line mathematical ex-
pressions, such as “If AB=x+5, what is x?”. These
mathematical expressions cause general purpose
parsers to fail. GEOS uses an equation analyzer
and pre-processes question text by replacing “=”
with “equals”, and replacing mathematical terms
(e.g., “x+5”) with a dummy noun so that the de-
pendency parser does not fail.
GEOS uses Stanford dependency parser (Chen
and Manning, 2014) to obtain syntactic informa-
tion, which is used to compute features for rela-
tion identification (Table 1). For diagram parsing,
similar to Seo et al. (2014), we assume that GEOS
has access to ground truth optical character recog-
nition for labels in the diagrams. For optimization,
we tune the parameters ? to 0.5, based on the train-
ing examples.
4
Dataset: We built a dataset of SAT plane ge-
ometry questions where every question has a tex-
4
In our dataset, the number of all possible literals for each
sentence is at most 1000.
1472
Total Training Practice Official
Questions 186 67 64 55
Sentences 336 121 110 105
Words 4343 1435 1310 1598
Literals 577 176 189 212
Binary relations 337 110 108 119
Unary relations 437 141 150 146
Table 2: Data and annotation statistics
tual description in English accompanied by a dia-
gram and multiple choices. Questions and answers
are compiled from previous official SAT exams
and practice exams offered by the College Board
(Board, 2014). In addition, we use a portion of
the publicly available high-school plane geometry
questions (Seo et al., 2014) as our training set.
We annotate ground-truth logical forms for all
questions in the dataset. Table 2 shows details
of the data and annotation statistics. For evaluat-
ing dependency parsing, we annotate 50 questions
with the ground truth dependency tree structures
of all sentences in the questions.
5
Baselines: Rule-based text parsing + GEOS dia-
gram solves geometry questions using literals ex-
tracted from a manually defined set of rules over
the textual dependency parser, and scored by dia-
gram. For this baseline, we manually designed 12
high-precision rules based on the development set.
Each rule compares the dependency tree of each
sentence to pre-defined templates, and if a tem-
plate pattern is matched, the rule outputs the re-
lation or function structure corresponding to that
template. For example, a rule assigns a relation
parent(child-1, child-2) for a triplet of (parent,
child-1, child-2) where child-1 is the subject of
parent and child-2 is the object of the parent.
GEOS without text parsing solves geometry
questions using a simple heuristic. With simple
textual processing, this baseline extracts numeri-
cal relations from the question text and then com-
putes the scale between the units in the question
and the pixels in the diagram. This baseline rounds
the number to the closest choice available in the
multiple choices.
GEOS without diagram parsing solves geom-
etry questions only relying on the literals inter-
preted from the text. It outputs all literals whose
text scores are higher than a tuned threshold, 0.6
on the training set.
GEOS without relation completion solves ge-
5
The source code, the dataset and the annotations are pub-
licly available at geometry.allenai.org.
ometry questions when text parsing does not use
the intermediate representation and does not in-
clude the relation completion step.
9 Experiments
We evaluate our method on three tasks: solving
geometry question, interpreting geometry ques-
tions, and dependency parsing.
Solving Geometry Questions: Table 3 compares
the score of GEOS in solving geometry questions
in practice and official SAT questions with that
of baselines. SAT’s grading scheme penalizes a
wrong answer with a negative score of 0.25. We
report the SAT score as the percentage of correctly
answered questions penalized by the wrong an-
swers. For official questions, GEOS answers 27
questions correctly, 1 questions incorrectly, and
leaves 27 un-answered, which gives it a score of
26.75 out of 55, or 49%. Thus, GEOS’s preci-
sion exceeds 96% on the 51% of questions that
it chooses to answer. For practice SAT questions,
GEOS scores 61%.
6
In order to understand the effect of individ-
ual components of GEOS, we compare the full
method with a few ablations. GEOS signifi-
cantly outperforms the two baselines GEOS with-
out text parsing and GEOS without diagram pars-
ing, demonstrating that GEOS benefits from both
text and diagram parsing. In order to understand
the text parsing component, we compare GEOS
with Rule-based text parsing + GEOS Diagram
and GEOS without relation completion. The re-
sults show that our method of learning to interpret
literals from the text is substantially better than the
rule-based baseline. In addition, the relation com-
pletion step, which relies on the intermediate rep-
resentation, helps to improve text interpretation.
Error Analysis: In order to understand the errors
made by GEOS, we use oracle text parsing and or-
acle diagram parsing (Table 3). Roughly 38% of
the errors are due to failures in text parsing, and
about 46% of errors are due to failures in diagram
parsing. Among them, about 15% of errors were
due to failures in both diagram and text parsing.
For an example of text parsing failure, the liter-
als in Figure 6 (a) are not scored accurately due
to missing coreference relations (Hajishirzi et al.,
2013). The rest of errors are due to problems that
require more complex reasoning (Figure 6 (b)).
6
Typically, 50
th
percentile (penalized) score in SAT math
section is 27 out of 54 (50%).
1473
SAT score (%)
Method Practice Official
GEOS w/o diagram parsing 7 5
GEOS w/o text parsing 10 10
Rule-based text parsing + GEOS diagram 31 24
GEOS w/o relation completion 42 33
GEOS 61 49
Oracle text parsing + GEOS diagram parsing 78 75
GEOS text parsing + oracle diagram parsing 81 79
Oracle text parsing + oracle diagram parsing 88 84
Table 3: SAT scores of solving geometry questions.
P R F1
Rule-based text parsing 0.99 0.23 0.37
GEOS w/o diagram 0.57 0.82 0.67
GEOS 0.92 0.76 0.83
Table 4: Precision and recall of text interpretation.
Interpreting Question Texts: Table 4 details
the precision and recall of GEOS in deriving lit-
erals for geometry question texts for official SAT
questions. The rule-based text parsing baseline
achieves a high precision, but at the cost of lower
recall. On the other hand, the baseline GEOS with-
out diagram achieves a high recall, but at the cost
of lower precision. Nevertheless, GEOS attains
substantially higher F1 score compared to both
baselines, which is the key factor in solving the
questions. Direct application of a generic seman-
tic parser (Berant et al., 2013) with full supervi-
sion does not perform well in the geometry do-
main, mainly due to lack of enough training data.
Our initial investigations show the performance of
33% F1 in the official set.
Improving Dependency Parsing: Table 5 shows
the results of different methods in dependency
parsing. GEOS returns a dependency parse tree by
selecting the dependency tree that maximizes the
text score in the objective function from the top
50 trees produced by a generic dependency parser,
Stanford parser (Chen and Manning, 2014). Note
that Stanford parser cannot handle mathematical
symbols and equations. We report the results of
a baseline that extends the Stanford dependency
parser by adding a pre-processing step to separate
the mathematical expressions from the plain sen-
tences (Section 8).
We evaluate the performance of GEOS against
the best tree returned by Stanford parser by re-
porting the fraction of the questions whose depen-
dency parse structures match the ground truth an-
notations. Our results show an improvement of
16% over the Stanford dependency parser when
equipped with the equation analyzer. For exam-
ple, in “AB is perpendicular to CD at E”, the Stan-
Accuracy
Stanford dep parse 0.05
Stanford dep parse + eq. analyzer 0.64
GEOS 0.78
Table 5: Accuracy of dependency parsing.
In	  the	  figure	  at	  the	  le?,	  the	  smaller	  circles	  
each	  have	  radius	  3.	  They	  are	  tangent	  to	  the	  
larger	  circle	  at	  points	  A	  and	  C,	  and	  are	  tangent	  
to	  each	  other	  at	  point	  B,	  which	  is	  the	  center	  of	  
the	  larger	  circle.	  What	  is	  the	  perimeter	  of	  the	  
shaded	  region?	  
In	  the	  figure	  at	  the	  le?,	  a	  shaded	  
polygon	  which	  has	  equal	  angles	  is	  
par?ally	  covered	  with	  a	  sheet	  of	  
blank	  paper.	  If	  x+y=80,	  how	  many	  
sides	  does	  the	  polygon	  have?	  	  
  
(a)	  6*pi	  	  	  (b)	  8*pi	  	  	  (c)	  9*pi	  	  	  (d)	  8*pi	  	  	  (e)	  15*pi	  
(a)	  10	  	  	  (b)	  9	  	  	  	  (c)	  8	  	  	  	  (d)	  7	  	  	  (e)	  6	   
(a)	  
(b)	  
Fails	  to	  resolve	  “they”	  to	  “each	  other”	  
Requires	  complex	  reasoning:	  	  Cannot	  understand	  that	  the	  polygon	  
is	  “hidden”	  
Figure 6: Examples of Failure: reasons are in red.
ford dependency parser predicts that “E” depends
on “CD”, while GEOS predicts the correct parse
in which “E” depends on “perpendicular”.
10 Conclusion
This paper introduced GEOS, an automated sys-
tem that combines diagram and text interpretation
to solve geometry problems. Solving geometry
questions was inspired by two important trends in
the current NLP literature. The first is in designing
methods for grounded language acquisition to map
text to a restricted formalism (instead of a full,
domain independent representation). We demon-
strate a new algorithm for learning to map text to
a geometry language with a small amount of train-
ing data. The second is designing methods in cou-
pling language and vision and show how process-
ing multimodal information help improve textual
or visual interpretations.
Our experiments on unseen SAT geometry
problems achieve a score of 49% of official ques-
tions and a score of 61% on practice questions,
providing a baseline for future work. Future work
includes expanding the geometry language and
the reasoning to address a broader set of geom-
etry questions, reducing the amount of supervi-
sion, learning the relevant geometry knowledge,
and scaling up the dataset.
Acknowledgements. The research was sup-
ported by the Allen Institute for AI, Allen Dis-
tinguished Investigator Award, and NSF (IIS-
1352249). We thank Dan Weld, Luke Zettlemoyer,
Aria Haghighi, Mark Hopkins, Eunsol Choi, and
the anonymous reviewers for helpful comments.
1474
References
Chris Alvin, Sumit Gulwani, Rupak Majumdar, and
Supratik Mukhopadhyay. 2014. Synthesis of ge-
ometry proof problems. In AAAI.
Gabor Angeli and Christopher D. Manning. 2014.
Naturalli: Natural logic inference for common sense
reasoning. In EMNLP.
Yoav Artzi and Luke Zettlemoyer. 2013. Weakly su-
pervised learning of semantic parsers for mapping
instructions to actions. TACL, 1.
J. Berant and P. Liang. 2014. Semantic parsing via
paraphrasing. In ACL.
Jonathan Berant, Andrew Chou, Roy Frostig, and Percy
Liang. 2013. Semantic parsing on freebase from
question-answer pairs. In EMNLP.
College Board. 2014. The college board.
Antoine Bordes, Nicolas Usunier, and Jason Weston.
2010. Label ranking under ambiguous supervision
for learning semantic correspondences. In ICML.
SRK Branavan, Nate Kushman, Tao Lei, and Regina
Barzilay. 2012. Learning high-level planning from
text. In ACL.
William C. Bulko. 1988. Understanding text with an
accompanying diagram. In IEA/AIE.
Danqi Chen and Christopher D Manning. 2014. A fast
and accurate dependency parser using neural net-
works. In EMNLP.
David Chen, Joohyun Kim, and Raymond Mooney.
2010. Training a multilingual sportscaster: Using
perceptual context to learn language. JAIR, 37.
Jim Cowie and Wendy Lehnert. 1996. Information
extraction. Communications of the ACM, 39(1).
Aron Culotta and Jeffrey Sorensen. 2004. Dependency
tree kernels for relation extraction. In ACL.
Jacob Eisenstein, James Clarke, Dan Goldwasser, and
Dan Roth. 2009. Reading to learn: Constructing
features from semantic abstracts. In EMNLP.
Thomas G Evans. 1964. A heuristic program to solve
geometric-analogy problems. In Proceedings of the
April 21-23, 1964, spring joint computer confer-
ence.
Hao Fang, Saurabh Gupta, Forrest Iandola, Rupesh Sri-
vastava, Li Deng, Piotr Doll´ar, Jianfeng Gao, Xi-
aodong He, Margaret Mitchell, John Platt, et al.
2014. From captions to visual concepts and back.
In CVPR.
Ali Farhadi, Mohsen Hejrati, Mohammad Amin
Sadeghi, Peter Young, Cyrus Rashtchian, Julia
Hockenmaier, and David Forsyth. 2010. Every pic-
ture tells a story: Generating sentences from images.
In ECCV.
E.A. Feigenbaum and J. Feldman, editors. 1963. Com-
puters and Thought. McGraw Hill, New York.
Jeffrey Flanigan, Sam Thomson, Jaime Carbonell,
Chris Dyer, and Noah A. Smith. 2014. A discrim-
inative graph-based parser for the abstract meaning
representation. In ACL.
Ruifang Ge and Raymond J. Mooney. 2006. Discrimi-
native reranking for semantic parsing. In ACL.
Dan Goldwasser and Dan Roth. 2011. Learning from
natural instructions. In IJCAI.
Yunchao Gong, Liwei Wang, Micah Hodosh, Ju-
lia Hockenmaier, and Svetlana Lazebnik. 2014.
Improving image-sentence embeddings using large
weakly annotated photo collections. In ECCV.
Sonal Gupta and Raymond J. Mooney. 2010. Us-
ing closed captions as supervision for video activity
recognition. In AAAI.
Hannaneh Hajishirzi, Julia Hockenmaier, Erik T.
Mueller, and Eyal Amir. 2011. Reasoning about
robocup soccer narratives. In UAI.
Hannaneh Hajishirzi, Leila Zilles, Daniel S Weld, and
Luke S Zettlemoyer. 2013. Joint coreference res-
olution and named-entity linking with multi-pass
sieves. In EMNLP.
Mary Hegarty and Marcel Adam Just. 1989. 10 under-
standing machines from text and diagrams. Knowl-
edge acquisition from text and pictures.
Ben Hixon, Peter Clark, and Hannaneh Hajishirzi.
2015. Learning knowledge graphs for question an-
swering through conversational dialog. In NAACL.
Mohammad Javad Hosseini, Hannaneh Hajishirzi,
Oren Etzioni, and Nate Kushman. 2014. Learning
to solve arithmetic word problems with verb catego-
rization. In EMNLP.
Rohit J. Kate and Raymond J. Mooney. 2007. Learn-
ing language semantics from ambiguous supervi-
sion. In AAAI.
Joohyun Kim and Raymond J. Mooney. 2013. Adapt-
ing discriminative reranking to grounded language
learning. In ACL.
Dan Klein and Christopher D Manning. 2005. Parsing
and hypergraphs. In New developments in parsing
technology. Springer.
R Koncel-Kedziorski, Hannaneh Hajishirzi, and Ali
Farhadi. 2014. Multi-resolution language ground-
ing with weak supervision. In EMNLP.
Dieter et. al. Kraft. 1988. A software package for se-
quential quadratic programming. DFVLR Obers-
faffeuhofen, Germany.
1475
Girish Kulkarni, Visruth Premraj, Sagnik Dhar, Sim-
ing Li, Yejin Choi, Alexander C Berg, and Tamara L
Berg. 2011. Baby talk: Understanding and generat-
ing image descriptions. In CVPR.
Nate Kushman, Yoav Artzi, Luke Zettlemoyer, and
Regina Barzilay. 2014. Learning to automatically
solve algebra word problems. In ACL.
T Kwiatkowski, E Choi, Y Artzi, and L Zettlemoyer.
2013. Scaling semantic parsers with on-the-fly on-
tology matching. In EMNLP.
Percy Liang, Michael I. Jordan, and Dan Klein. 2009.
Learning semantic correspondences with less super-
vision. In ACLAFNLP.
Xinggang Lin, Shigeyoshi Shimotsuji, Michihiko Mi-
noh, and Toshiyuki Sakai. 1985. Efficient diagram
understanding with characteristic pattern detection.
CVGIP, 30(1).
A. Lovett and K. Forbus. 2012. Modeling multiple
strategies for solving geometric analogy problems.
In CCS.
Gordon Novak. 1995. Diagrams for solving physical
problems. Diagrammatic reasoning: Cognitive and
computational perspectives.
Lawrence O’Gorman and Rangachar Kasturi. 1995.
Document image analysis, volume 39. Citeseer.
Hoifung Poon and Pedro Domingos. 2009. Unsuper-
vised semantic parsing. In EMNLP.
Siva Reddy, Mirella Lapata, and Mark Steedman.
2014. Large-scale semantic parsing without
question-answer pairs. TACL, 2(Oct).
S. Roy, T. Vieira, and D. Roth. 2015. Reasoning about
quantities in natural language.
Min Joon Seo, Hannaneh Hajishirzi, Ali Farhadi, and
Oren Etzioni. 2014. Diagram understanding in ge-
ometry questions. In AAAI.
Rohini K Srihari. 1994. Computational models for
integrating linguistic and visual information: A sur-
vey. Artificial Intelligence Review, 8(5-6).
Adam Vogel and Daniel Jurafsky. 2010. Learning to
follow navigational directions. In ACL.
David J Wales and Jonathan PK Doye. 1997. Global
optimization by basin-hopping and the lowest en-
ergy structures of lennard-jones clusters containing
up to 110 atoms. The Journal of Physical Chemistry
A, 101(28).
Luke S. Zettlemoyer and Michael Collins. 2005.
Learning to map sentences to logical form: Struc-
tured classification with probabilistic categorial
grammars. In UAI.
11 Appendix: Proof of Submodularity of
Equation 1
We prove that the objective function in equation
(1), ?A(L
?
) + H(L
?
) is submodular by showing
that A(L
?
) andH(L
?
) are submodular functions.
Submodularity of A. Consider L
?
? L, and
a new literal to be added, l
i
? L \ L
?
. By the
definition of A, it is clear that A(L
?
? {l
j
}) =
A(L
?
) +A({l
j
}). Hence, for all L
??
? L
?
? L,
A(L
??
? {l
j
})?A(L
??
) = A(L
?
? {l
j
})?A(L
?
)
. Thus A is submodular.
Submodularity of H. We prove that the cover-
age function, H
cov
, and the negation of the redun-
dancy function, ?H
red
are submodular indepen-
dently, and thus derive that their sum is submodu-
lar. For both, consider we are given L
??
? L
?
? L,
and a new literal l
j
? L \ L
?
. Also, let K
??
and
K
?
denote the the sets of concepts covered by L
??
and L
?
, respectively, and let K
j
denote the set of
concepts covered by l
j
.
Coverage: Since K
??
? K
?
, |K
??
?K
j
| ? |K
??
| ?
|K
?
?K
j
| ? |K
?
|, which is equivalent to
H
cov
(L
??
? {l
j
})?H
cov
(L
??
)
? H
cov
(L
?
? {l
j
})?H
cov
(L
?
)
Redundancy: Note that H
red
(L
??
? {l
j
}) ?
H
red
(L
??
) = |K
??
?K
j
|, and similarly, H
red
(L
?
?
{l
j
}) ? H
red
(L
?
) = |K
?
?K
j
|. Since K
??
? K
?
,
thus |K
??
?K
j
| ? |K
?
?K
j
|. Hence,
H
red
(L
??
? {l
j
})?H
red
(L
??
)
? H
red
(L
?
? {l
j
})?H
red
(L
?
),
By negating both sides, we derive that the negation
of the redundancy function is submodular.
1476
