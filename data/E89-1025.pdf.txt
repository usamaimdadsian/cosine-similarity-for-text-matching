A rich environment for exper imentat ion with 
uni f icat ion grammars 
R. Johnson  & M. Rosner 
IDSIA, Lugano 
ABSTRACT 
This paper descr ibes some of 
the features of a sophist i -  
cated language and environment 
designed for exper imentat ion 
with un i f i cat ion-or iented 
l inguist ic descr ipt ions.  The 
system, which is cal led ud, 
has to date been used success- 
ful ly as a development and 
prototyping tool in a research 
project on the appl icat ion of 
s i tuat ion schemata to the 
representat ion of real text, 
and in extensive exper imenta-  
tion in machine translat ion.  
Whi le the ud language bears 
close resemblances to all the 
wel l -known uni f icat ion grammar 
formalisms, it offers a wider 
range of features than any 
single alternative, plus 
powerful  fac i l i t ies for nota- 
t ional abstract ion which al low 
users to s imulate di f ferent  
theoret ical  approaches in a 
natural way. 
After a brief d iscuss ion of 
the mot ivat ion for implement-  
ing yet another uni f icat ion 
device, the main body of the 
paper is devoted to a descr ip-  
t ion of the most important 
novel features of ud. 
The paper concludes with a 
d iscuss ion of some quest ions 
of implementat ion and com- 
pleteness.  
several languages: pr inc ipa l ly  
a demanding machine transla-  
t ion exercise and a substan- 
tial invest igat ion into some 
pract ical  appl icat ions of 
s i tuat ion semantics (Johnson, 
Rosner and Rupp, forthcoming).  
The interact ion between users 
and implementers has f igured 
largely in the development  of 
the system, and a major reason 
for the r ichness of its 
language and environment has 
been the pressure to accommo- 
date the needs of a group of 
l inguists working on three or 
four languages s imul taneous ly  
and import ing ideas from a 
var iety of d i f ferent  theoret i -  
cal backgrounds. 
H istor ica l ly  ud evolved out of 
a near relat ive of PATR-I I  
(Shieber, 1984), and its ori-  
gins are still apparent,  not 
least in the notation. In the 
course of development,  how- 
ever, ud has  been enr iched 
with ideas from many other 
sources, most notably from LFG 
(Bresnan, 1982) and HPSG (Sag 
and Pollard, 1987). 
Among the language features 
ment ioned in the paper are 
a wide range of data 
types, including lists, 
trees and user - rest r ic ted 
types, in addit ion to the 
normal feature structures 
i. Introduction. 
The development of ud arose 
out of the need to have avai l -  
able a full set of prototyping 
and development tools for a 
number of d i f ferent  research 
projects in computat ional  
l inguistics, all involving 
extensive text coverage in 
comprehens ive t reatment 
of d is junct ion 
dynamic binding of 
name segments 
path- 
A part icu lar  art ic le of faith 
which has been very inf luen- 
tial in our work has been the 
convict ion that we l l -des igned 
programming languages (includ- 
ing ones used pr imar i ly  by 
- 182-  
l inguists) ,  should not only  
supply  a set of p r imi t ives  
which are appropr ia te  for the 
app l i ca t ion  domain  but should 
also conta in  w i th in  themse lves  
su f f i c ient  apparatus  to enable  
the user to create new 
abst ract ions  which can be 
tuned to a par t i cu la r  v iew of 
the data. 
We have there fore  paid part ic -  
u lar  a t tent ion  to a const ruct  
wh ich  in ud we call a rela-  
t ional  abst ract ion ,  a genera l -  
i sat ion of PATR- I I  templates  
which can take arguments  and 
which a l low mult ip le ,  recur-  
sive def in i t ion .  In many 
respects  re lat iona l  abst rac-  
t ions resemble  Pro log pro-  
cedures,  but wi th  a dec lara-  
t ive semant ics  imp lemented  in 
terms of a typical  feature-  
s t ructure  uni f ier .  
are in tended to be read as 
subscr ipts .  
Three other  special  symbols  
are used: 
+ stands for the un i f i ca -  
t ion operator  
* stands for top, the 
underdef ined  element.  
# stands for bottom, the 
overdef ined  e lement  that  
cor responds  to fai lure.  
The semant ics  of un i f i ca t ion  
proper  are summar ised in f ig- 
ures 2 - 4. C lauses \[i\] - \[3\] 
def ine  its a lgebra ic  proper -  
ties; c lauses  \[4\] - \[6\] def ine  
un i f i ca t ion  over constants ,  
l ists and trees in a manner  
ana lagous  to that found in 
Prolog. 
i.i. S t ructure  of the paper 
Sect ion  2 gives a conc ise  sum- 
mary of the semant ics  of the 
bas ic  ud uni f ier .  This serves 
as a basis  for an informal  
d iscuss ion ,  in Sect ion 3, of 
our imp lementat ion  of rela- 
t ional  abst rac t ions  in terms 
of 'lazy' un i f i cat ion .  The 
f inal sect ion conta ins  a few 
remarks on the issue of com- 
p leteness ,  and a br ief  survey 
of some other  language 
features.  
2. Bas ic  Uni f ier  Semant ics  
In add i t ion  to the usual atoms 
and feature  st ructures ,  the ud 
un i f ie r  a lso deals  wi th  l ists, 
trees, feature  st ructures ,  
typed instances,  and pos i t ive  
and negat ive  d i s junct ions  of 
atoms. This sect ion conta ins  
the de f in i t ion  of un i f i ca t ion  
over these const ructs  and 
employs cer ta in  notat iona l  
convent ions  to represent  these 
pr imi t ive  ud data types, as 
shown in f igure I. 
Throughout  the descr ipt ion ,  
the metavar iab les  U and V 
stand for ob jects  of a rb i t ra ry  
type, and juxtaposed integers  
C~--N 
In f igure 4, c lause \[7\] t reats  
pos i t ive  and negat ive  d is junc-  
t ions wi th  respect  to sets of 
atomic  values.  C lause \[8\] 
deals  wi th  feature  s t ructures  
and typed instances.  Intu i -  
t ively, type ass ignment  is a 
method of s t r ic t ly  const ra in -  
ing the set of a t t r ibutes  
admiss ib le  in a feature  struc-  
ture. 
Any case not covered by \[i\] to 
\[8\] y ie lds  #. Moreover ,  all 
the complex type const ructors  
are str ict,  y ie ld ing  # if 
app l ied  to any argument  that  
is i tsel f  #. 
The extens ions  to a conven-  
t ional  feature  s t ructure  
un i f ie r  descr ibed  in this sec- 
t, ion are l i t t le  more than 
cosmet ic  fr i l ls ,  most  of which 
cou ld  be s imulated  in a stan- 
dard PATR env i ronment ,  even if 
w i th  some loss of descr ip t ive  
c lar i ty .  
In the rest of the paper, we 
d iscuss  a fur ther  enhancement  
which  dramat ica l ly  and perhaps  
cont rovers ia l l y  extends  the 
express ive  power  of the 
language.  
183 - 
:Type name 
:constant  
l i s t  
n -ary  t ree  
+ve d is junct ion  
-ve  d i s junct ion  
feature  s t ructure  
typed ins tance  
Notat ion  
A B C 
\[U : V\] 
V0(V I  .... Vn) 
/el  .... Cr /  
" /C l , . . ,C r /  
{<AI ,V I> .... <Ar ,Vr>} 
<C,{<AI ,V I> .... <An,Vn>}> 
f igure  1 : Notat iona l  Convent ions  
\[i\] ÷ is commutat ive :  
U + V 
\[2\] * is the  ident i ty :  
V + * 
\[3\] + is #-preserv ing :  
V÷# 
f igure  2 : A lgebra ic  P roper t ies  
= V + U 
= V 
-- # 
\[4\] un i f i ca t ion  of  constants :  
Cl + C2 = Cl,  i f  C1 = C2 
\[5\] un i f i ca t ion  of  l i s t s :  
\ [U I :U2\ ]  + \ [V I :V2 \ ]  = \ [U I+VI :U2+V2\ ]  
\[6\] un i f i ca t ion  of  t rees :  
U0(U I , . . ,Un)  + V0(V I , . . ,Vn)  = UO+VO(UI+VI , . . ,Un+Vn)  
f igure  3 : Constants ,  L i s ts  and  Trees  
- 184  - 
\[7\] d is junct ion:  
/C I , . . ,Cn/  + C = C, if C in {Cl ..... Cn} 
/AI .... Ap/ + /B I , . . ,Bq /  
= /C l , . . ,C r / ,  if Ci in {AI, . . ,Ap} 
and Ci in {BI , . . ,Bq},  
l<=i<=r,  r > 0 
~/C l , . . ,Cn /  + C = C, if C ~= Ci, l<=i<=n 
~/A I , . . ,Ap/  + ~/BI , . . ,Bq/  
= ~/Cl , . . ,Cr / ,  where  Ci in {AI, . . ,Ap} 
or Ci in {BI , . . ,Bq}, 
l<=i<=r 
/A I , . . ,Ap/  + ~/B I , . . ,Bq/  
= ~/C l , . . ,C r / ,  where  Ci in {AI, . . ,Ap} 
and Ci not in {BI , . . ,Bq}, 
l<=i<=r 
\[8\] feature  structures:  
{<AI ,U I>, . . ,<Ap,Up>} + {<BI ,V I>, . . ,<Bq,Vq>} 
= {<Ai,Ui> : Ai not in {BI, . . ,Bq}} union 
{<Bj,Uj> : Bj not in {AI .... Ap}} un ion 
{<Ai ,Ui+Vj> : Ai = Bj}, 
l<=i<=p, l<=j<=q} 
<C,{<AI ,U I>, . . ,<Ap,Up>}> + <C,{<AI ,V I> .... <Ap,Vp>}> 
= <C,{<AI ,U I+VI>, . . ,<Ap,Up+Vp>}~ 
<C,{<AI ,U I> .... <Ap,Up>}> + {<BI,VI> .... <Bq,Vq>} 
= <C,{<Ai ,U i> : Ai not in {BI , . . ,Bq}} 
un ion  {<Ai ,Ui+Vj> : Ai = Bj}>, 
if all Bj in {AI , . . ,Ap}, 
where l<=i<=p, l<=j<=q 
f igure 4 : Atomic  Va lue D is junct ions  and Feature  S t ructures  
3. Extend ing  the Uni f ier  
One of the major  shor tcomings  
of typical  PATR-s ty le  
languages is their  lack of 
fac i l i t i es  for def in ing  new 
abst ract ions  and express ing  
l ingu is t ic  genera l i sa t ions  not 
fo reseen (or even foreseeable)  
by the language des igner .  This 
becomes a ser ious issue when, 
as in our own case, qu i te  
large teams of l ingu is ts  need 
to deve lop  several  large 
descr ip t ions  s imul taneous ly .  
To meet  this need, ud prov ides  
a powerfu l  abst rac t ion  mechan-  
ism which is notat iona l ly  
s imi lar  to a Pro log procedure,  
but hav ing a s t r i c t ly  dec la ra -  
t ive in terpretat ion .  We use 
the term re lat iona l  abst rac -  
t ion to emphas ise  the non- 
p rocedura l  nature of the con- 
struct.  
~'!" Some Examples  of Re la-  
t ional  Abst ract ion  
The examples  in this sect ion  
are all adapted  f rom a 
- 185  - 
descr ipt ion of a large subset 
of German writ ten in u_dd by 
C.J. Rupp. As well as rela- 
tional abstract ions•  two other 
ud features are introduced 
here: a bui l t - in list concate-  
nation operator '÷+' and gen- 
eral ised disjunction, notated 
by curly brackets (e.g. 
{X,Y}). These are discussed 
br ief ly in Section 4. 
The first example i l lustrates 
a relat ion Merge, used to col- 
lect together the semantics of 
an arbitrary number of modif-  
iers in some list X into the 
semantics of their head Y. 
Its def in i t ion in the external 
syntax of the current ud ver- 
sion is 
Merge(X,Y) : 
!Merge-all(X, 
<Y desc cond>, 
<Y desc ind>) 
(The invocat ion operator '!' 
is an artefact of the LALR(1) 
compi ler  used to compi le the 
external notat ion - one day it 
will go away. X and Y should• 
in this context, be var iables 
over feature structures. The 
desc, cond and ind attr ibutes 
are intended to be mnemonics 
for, respectively•  'descrip- 
tion' (a list of) 'condi- 
tions' and ' indeterminate' .)  
Merge  is def ined in terms of a 
second relation, Merge-al l ,  
whose def in i t ion is 
c lear ly indebted for the nota- 
tion, the important di f fer-  
ence, which we already 
referred to above• is that the 
interpretat ion of Merge and 
Merge-al l  is str ict ly declara-  
tive. 
The best examples of the prac- 
tical advantages of this kind 
of abstract ion tend to be in 
the lexicon• typical ly  used to 
decouple the great complexity 
of lexical ly or iented descr ip-  
t ions from the intuit ive 
def in i t ions often expected 
from dict ionary coders. As 
i l lustrat ion•  without enter ing 
into d iscuss ion of the under- 
lying complexity,  for which we 
unfortunate ly  do not have 
space here, we give an exter-  
nal form of a lexical entry 
for some of the senses of the 
German verb traeumen. 
This is a real entry taken 
from an HPSG- inspi red analysis  
mapping into a quite sophist i -  
cated s ituat ion semantics 
representat ion.  All of the 
necessary information is 
encoded into the four lines of 
the entry; the expansions of 
Pref, Loctype and Subcat are 
all themselves wr i t ten in ud. 
The feature -prefix is merely 
a flag interpreted by a 
separate morphological  com- 
ponent to mean that t raeumen 
has no unstressed pref ix and 
can take 'ge-' in its past 
part ic ip le form. 
Merge-al l ( \ [HdlT l \ ] ,  
<Hd desc cond> ++ L, 
Ind) : 
Ind = <Hd desc ind> 
' !Merge-al l (TI ,L, Ind) 
Merge-a l l ( \ [ \ ] , \ [ \ ] , Ind)  
traeumen -prefix 
!Pref(none) 
!Loctype(\[project\])  
!Subcat(np(nom), 
{vp(inf,squi),  
pp(von,dat)})  
Merge-al l  does all the hard 
work, making sure that all the 
indeterminates are consistent 
and recurs ively combining 
together the condit ion lists. 
A l though these def in i t ions 
look suspic iously like pieces 
of Prolog, to which we are 
Pref is a 
tion used 
syntax of 
pref ixes 
syntact ic abstrac-  
in unravel ing the 
German separable 
Loctype is a rudimentary 
encoding of Act ionsart .  
Subcat contains all the infor- 
mat ion necessary for mapping 
- 186-  
ins tances  of verbs wi th  vp or 
pp complements  to a s i tuat ion  
schema (Fenstad, Ha lvorsen,  
Langho lm and van Benthem, 
1987). 
Here, for completeness  but 
w i thout  fur ther  d iscuss ion ,  
are the re levant  f ragments  of 
the de f in i t ion  of Subcat.  
Subcat (np(nom) ,pp(P ,C) )  : 
!Normal 
!Obl (Pobj ,P ,C,X)  
~Arg(X,2) 
<* subcat> = \[PobjlT\] 
!Assign(T,_)  
Subcat (np(nom) ,vp(F ,squ i ) )  
!Contro lVerb  
!Vcomp(VP,F ,NP,S i t )  
!Arg(Sit ,2)  
<* subcat> = \[VP:T\] 
!Ass ign(T,X)  
F = inf /bse 
!Contro l (X,NP)  
is that  some un i f i ca t ions  
which  would  u l t imate ly  con- 
verge may not converge  loca l ly  
(i.e. at some g iven in termed i -  
ate stage in a der ivat ion)  if 
insu f f i c ient  in fo rmat ion  is 
ava i lab le  at the t ime when the 
un i f i ca t ion  is a t tempted  (of 
course  some patho log ica l  cases 
may not converge  at all - we 
return to this quest ion  
below).  
We cope wi th  this by de f in ing  
an argument  to the un i f ie r  as 
a pair  <I,K>, cons is t ing  of an 
in fo rmat ion  s t ructure  I 
be long ing  to one of the types 
l is ted in sect ion 2, p lus an 
agenda which holds the set of 
as yet unreso lved  const ra in ts  
K which  potent ia l l y  hold over 
I. Un i f i ca t ion  of two 
objects ,  
<I I ,KI> + <I2,K2> 
Ass ign( \ [X \ ] ,X )  
<* voice> = act ive  
!Subj(X) 
!Arg(X,l)  
Ass ign({ \ [Y \ ] , \ [ \ ]} ,Z)  
<* voice> = pass ive  
<* vform> = psp 
!Takes(none) 
!Obl (Y ,von,dat ,Z)  
!Arg(Z, l)  
4. Imp lementat ion  o_ff the 
Extens ions  
In this sect ion we descr ibe  
br ie f ly  the a lgor i thm used to 
implement  a dec la rat ive  seman- 
t ics for re la t iona l  abst rac -  
t ions, conc lud ing  with some 
remarks on fur ther  in teres t ing  
extens ions  which can be imple-  
mented  natura l ly  once the 
basic  a lgor i thm is in place. 
For the moment,  we have only  
an informal  character !sat !on ,  
but a more formal  t reatment  is 
in preparat ion .  
4.1. The so lu t iona lgor i thm 
The main prob lem which  ar ises  
when we in t roduce  re la t iona l  
abst rac t ions  into the language 
involves the at tempt  to 
reso lve the poo led  set of con-  
s t ra ints  
K1 un ion K2 = K0 
with respect  to the newly uni -  
f ied in fo rmat ion  s t ructure  I0 
= Ii + I2, if it exists.  
The quest ion  of dec id ing  
whether  or not some given con- 
s t ra int  set wil l  converge  
loca l ly  is so lved by a very 
s imple heur is t ic .  F i rst  we 
observe  that app l i ca t ion  of 
the const ra in t  pool K0 to I0 
is l ikely to be non- 
determin is t i c ,  leading to a 
set of poss ib le  so lut ions.  
Growth  of this so lut ion  set 
can be conta ined  loca l ly  in a 
s imple way, by const ra in ing  
each potent ia l l y  t roub lesome 
(i.e. recurs ive ly  def in ined)  
member  of K0 to apply  only 
once for each of its poss ib le  
expans ions ,  and f reez ing  pos-  
s ib le cont inuat ions  in a new 
const ra in t  set. 
A f ter  one i te ra t ion  of this 
p rocess  we are then left wi th 
a set of pa i rs  
{<J i , L l> , . . . ,< J r , L r>},  where 
- 187  - 
the Li are the 
st ra int  sets 
cor respond ing  Ji. 
cur rent  con-  
for the 
If this resul t  set is empty, 
the un i f i ca t ion  fa i ls  immedi-  
ately,  i.e. I0 is incons is tent  
wi th  K0. Otherwise ,  we a l low 
the process  to cont inue,  
breadth  f irst,  only  wi th  those 
<J i ,L i> pai rs  such that the 
card ina l i ty  of Li is s t r i c t ly  
less than at the prev ious  
i terat ion.  The other  members  
are left unchanged in the 
f inal  result ,  where  they are 
in terpreted  as prov is iona l  
so lut ions  pend ing  arr iva l  of 
fu r ther  in format ion,  for exam- 
ple at the next step in a 
der ivat ion .  
4.2. Dec idab i l i ty  
It is ev ident  that, when all 
steps in a der ivat ion  have 
been completed,  the process  
descr ibed  above wil l  in gen- 
eral y ie ld  a set of 
in fo rmat ion /const ra in t  pa i rs  
{<I i ,K l>. . .< InKn>} where some 
so lu t ions  are st i l l  i ncomplete  
- i.e. some of the Ki are not 
empty. In very many c ir -  
cumstances  it may well  be leg- 
i t imate to take no fur ther  
ac t ion  - for example  where the 
output  f rom a l ingu is t ic  pro-  
cessor  wi l l  be passed  to some 
other  dev ice  for fur ther  
t reatment ,  or where one solu-  
t ion is adequate  and at least 
one of the Ki is empty. Gen- 
eral ly,  however,  the result  
set wi l l  have to be processed  
further.  
The obv ious  move, of re lax ing  
the requ i rement  on immediate  
local convergence  and a l lowing  
the i te rat ion  to proceed 
wi thout  bound, is of course  
not guaranteed  to converge  at 
all in patho log ica l  cases. 
Even so, if there ex ist  some 
f in i te  number  of complete  
so lu t ions  our depth f i rst  
s t rategy is guaranteed  to f ind 
them eventua l ly .  If even this 
exped ient  fai ls,  or is unac-  
ceptab le  for some reason, the 
user is a l lowed to change the 
env i ronment  dynamica l ly  so as 
to set an arb i t ra ry  depth 
bound on the number  of f inal  
d ivergent  i terat ions.  In 
these latter  cases, the resul t  
is p resented  in the form of a 
feature  s t ructure  annotated  
wi th  deta i l s  of any con- 
s t ra ints  wh ich  are st i l l  
unreso lved.  
4.2.1. D iscuss ion  
Des igners  of un i f i ca t ion  gram- 
mar fo rmal i sms typ ica l ly  avo id  
inc lud ing  const ructs  wi th  the 
power  of re lat iona l  abst rac -  
t ion, p resumably  th rough con-  
cern about issues of complete -  
ness and dec idab i l i ty .  We 
feel that this is an unfor -  
tunate  dec is ion  in v iew of the 
t remendous  increase in expres -  
s iveness  which  these con- 
s t ructs  can give. ( Inc iden-  
tal ly,  they can be int roduced,  
as in ud, w i thout  compromis ing  
dec la ra t iveness  and monoton i -  
city, wh ich  are arguably ,  f rom 
a pract ica l  po int  of view, 
more important  cons idera -  
t ions.)  On a more pragmat ic  
note, ud has been runn ing now 
wi thout  observab le  error  for 
a lmost  a year on descr ip t ions  
of substant ia l  subsets  of 
French and German, and we have 
only  once had to in tervene  on 
the depth bound, wh ich  
de fau l ts  to zero (this was 
when someone t r ied to use it 
to run Pro log programs) .  
In pract ice ,  users  seem to 
need the extra  power  very 
spar ing ly ,  perhaps  in one or 
two abst rac t ions  in their  
ent i re  descr ip t ion ,  but then 
it seems to be c ruc ia l l y  
important  to the c la r i ty  and 
e legance  of the whole  descr ip -  
t ive s t ruc ture  (l ist append ing  
operat ions ,  as in HPSG, for 
example,  may be a typica l  
case).  
4.3. Other  extens ions  
Once we have a mechan ism for 
'lazy' un i f i ca t ion ,  it becomes 
natura l  to use the same 
apparatus  to implement  a 
- 188  - 
var ie ty  of features  which  
improve the hab i tab i l i ty  and 
express iveness  of the system 
as a whole.  Most  obv ious ly  we 
can exp lo i t  the same f ramework  
of local convergence  or 
suspens ion  to support  hand-  
coded vers ions  of some basic 
p r imi t ives  l ike l ist concate-  
nat ion and non-determin is t i c  
ext rac t ion  of e lements  f rom 
arb i t ra ry  l ist pos i t ions .  
This has been done to advan-  
tage in our case, for example,  
to fac i l i ta te  impor ta t ion  of 
useful  ideas from, inter al ia 
HPSG and JPSG (Gunji, 1987). 
We have also imp lemented  a 
fu l ly  genera l i sed  d is junct ion  
(as oppposed to the atomic 
va lue d i s junct ion  descr ibed  in 
sect ion 2) us ing the same lazy 
s t rategy to avoid  exp lod ing  
a l te rnat ives  unnecessar i l y .  
S imi lar ly ,  it was qu i te  s imple 
to add a t reatment  of under -  
spec i f ied  pathnames  to a l low 
s imulat ion  of some recent  
ideas f rom LFG (Kaplan, 
Maxwel l  and Zaenen, 1987). 
. Current  state 
to other  
t ions.  
l i sp /un ix  combina-  
References  
Bresnan J (ed) (1982). The 
Mental  Representat ion  of Gram- 
mat ica l  Re lat ions .  MIT Press. 
Fenstad J-E, P-K Halvorsen,  T 
Langho lm and J van Benthem 
(1987). S i tuat ions ,  Lanquage 
and Logic.  Reidel .  
Gunj i  T (1987). Japanese  
Phrase St ructure  Grammar.  
Reidel .  
Johnson  R, M Rosner  and C J 
Rupp ( forthcoming) .  'Situa- 
t ion schemata  and l ingu is t i c  
representat ion ' .  In M Rosner  
and R Johnson (eds). Computa-  
t ional  L ingu is t i cs  and Formal 
Semant ics .  Cambr idge  Univer -  
s ity Press (to appear  in 
1989). 
Kaplan R, J Maxwel l  and A 
Zaenen (1987). 'Funct ional  
Uncer ta inty ' .  In CSLI 
Monthly ,  January  1987. 
The system is sti l l  under  
deve lopment ,  wi th a complete  
parser  and rud imentary  syn- 
thes iser ,  p lus a full, rever-  
sible, morpho log ica l  com- 
ponent.  We are now work ing  on 
a more sat i s fac tory  generat ion  
component ,  as wel l  as tools  - 
such as b i /mul t i - l ingua l  lexi-  
cal access  and t rans fer  - 
spec i f i ca l ly  c ra f ted  for use 
in mach ine  t rans la t ion  
research.  Substant ia l  f rag-  
ments  of German and French 
deve loped in ud are a l ready 
operat iona l .  
There is a lso a r ich user 
env i ronment ,  of which space 
l im i ta t ions  prec lude  d iscus-  
sion here, inc lud ing t rac ing  
and debugg ing  tools  and a 
var ie ty  of in teract ive  
parameter i sa t ions  for modi fy -  
ing run- t ime behav iour  and 
per formance.  The whole  pack-  
age runs on Suns, and we have 
begun to work  on por tab i l i ty  
Sag I and C Po l lard  (1987). 
Head-Dr iven  Phrase St ructure  
Grammar:  an Informal  Synops is .  
CSLI Report  ~ CSL I -87-79.  
Sh ieber  S (1984). 'The 
des ign of a computer  language 
for l ingu is t ic  in format ion ' .  
P roceed ings  of Col ing 84. 
Acknowledgements  
We thank the Fondaz ione  Dal le  
Mol le,  Su isset ra  and the 
Un ivers i ty  of Geneva for sup- 
por t ing  the work  repor ted  in 
this paper.  We are gratefu l  
to all our former co l leagues  
in ISSCO, and to all ud users  
for their  he lp  and encourage-  
ment. Special  thanks are due 
to C.J. Rupp for being a wi l -  
l ing and const ruct ive  gu inea-  
pig, as well  as for a l low ing  
us to p lunder  his work  for 
German examples.  
- 189  - 
