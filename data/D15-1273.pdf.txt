Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 2275–2280,
Lisbon, Portugal, 17-21 September 2015.
c
©2015 Association for Computational Linguistics.
Transducer Disambiguation with Sparse Topological Features
Gonzalo Iglesias
†
Adri
`
a de Gispert
†‡
Bill Byrne
†‡
†
SDL Research, Cambridge, U.K.
{giglesias|agispert|bbyrne}@sdl.com
‡
Department of Engineering, University of Cambridge, U.K.
Abstract
We describe a simple and efficient al-
gorithm to disambiguate non-functional
weighted finite state transducers (WFSTs),
i.e. to generate a new WFST that con-
tains a unique, best-scoring path for each
hypothesis in the input labels along with
the best output labels. The algorithm uses
topological features combined with a trop-
ical sparse tuple vector semiring. We em-
pirically show that our algorithm is more
efficient than previous work in a PoS-
tagging disambiguation task. We use our
method to rescore very large translation
lattices with a bilingual neural network
language model, obtaining gains in line
with the literature.
1 Introduction
Weighted finite-state transducers (WFSTs), or lat-
tices, are used in speech and language process-
ing to compactly represent and manipulate a large
number of strings. Applying a finite-state opera-
tion (eg. PoS tagging) to a lattice via composition
produces a WFST that maps input (eg. words)
onto output strings (eg. PoS tags) and preserves
the arc-level alignment between each input and
output symbol (eg. each arc is labeled with a
word-tag pair and has a weight). Typically, the
result of such operation is a WFST that is am-
biguous because it contains multiple paths with the
same input string, and non-functional because it
contains multiple output strings for a given input
string (Mohri, 2009).
Disambiguating such WFSTs is the task of cre-
ating a WFST that encodes only the best-scoring
path of each input string, while still maintaining
the arc-level mapping between input and output
symbols. This is a non-trivial task
1
, and so far only
1
Unless one enumerates all the possible input strings in
one algorithm has been described (Shafran et al.,
2011); the main steps are:
(a) Map the WFST into an equivalent weighted
finite-state automata (WFSA) using weights
that contain both the WFST weight and out-
put symbols (using a special semiring)
(b) Apply WFSA determinization under this
semiring to ensure that only one unique path
per input string survives
(c) Expand the result back to an WFST that pre-
serves arc-level alignments
We present a new disambiguation algorithm
that can efficiently accomplish this. In Section 2
we describe how the tropical sparse tuple vec-
tor semiring can keep track of individual arcs in
the original WFST as topological features during
the mapping step (a). This allows us to describe
in Section 3 an efficient expansion algorithm for
step (c). We show in Section 4 empirical evidence
that our algorithm is more efficient than Shafran et
al. (2011) in their same PoS-tagging task. We also
show how our method can be applied in rescor-
ing translation lattices under a bilingual neural-
network model (Devlin et al., 2014), obtaining
BLEU score gains consistent with the literature.
Section 5 reviews related work and concludes.
2 Semiring Definitions
A WFST T = (?,?, Q, I, F,E, ?) over a semir-
ing (K,?,?, 0, 1) has input and output alphabets
? and ?, a set of states Q, the initial state I ? Q,
a set of final states F ? Q, a set of transitions
(edges) E ? (Q × ? ×? × K × Q), and a final
state function ? : F ? K. We focus on extensions
to the tropical semiring (R±?,min,+,?, 0).
the lattice, searches for the best output string for each in-
put string, and converts the resulting sequences back into a
WFST, which is clearly inefficient.
2275
Let e = (p[e], i[e], o[e], w[e], n[e]) be an edge
in E. A path pi = e
1
...e
n
is a sequence of edges
such that n[e
j
] = p[e
j+1
], 1 ? j < n. w[pi] =
?
e
j
?pi
w[e
j
] ; p[pi] = p[e
1
], n[pi] = n[e
n
]. A path
is accepting if p[pi] = I and n[pi] ? F . The weight
associated by T to a set of paths ? is T (?) =
?
pi??
w[pi]? ?(n[pi]).
2.1 Tropical Sparse Vector Semiring
Let
¯
f [e
i
] = f
i
? R
N
be the unweighted feature
vector associated with edge e
i
, and let ?¯ ? R
N
be
a global feature weight vector. The tropical weight
is then found as w
i
= w[e
i
] = ?¯ ·
¯
f
i
=
?
k
?
k
f
i,k
.
Given a fixed ?¯, we define the operators for the
tropical vector semiring as:
¯
f
i
?
?
¯
f
j
= min(?¯ ·
¯
f
i
, ?¯ ·
¯
f
j
) and
¯
f
i
?
?
¯
f
j
=
?
k
?
k
(f
i,k
+ f
j,k
). The
tropical weights are maintained correctly by the
vector semiring as
¯
f
i
?
?
¯
f
j
= w
i
? w
j
and
¯
f
i
?
?
¯
f
j
= w
i
?w
j
. Finally, we define the element-wise
times operator as:
¯
f
i
?
¯
f
j
=
¯
f
m
, where f
m,k
=
f
i,k
+f
j,k
, ?k. It follows thatw
i
?w
j
= ?·(
¯
f
i
?
¯
f
j
).
When dealing with high-dimensional feature
vectors which have few non-zero elements, it
is convenient in practice (for computational effi-
ciency) to use a sparse representation for vectors:
¯
f = [(i, f
i
), i : f
i
6= 0]. That is,
¯
f is comprised
of a sparse set of tuples (i, f
i
), where i is a feature
index and f
i
is its value; e.g. [(2, f
2
)] is short for
[0, f
2
, 0, 0] if N = 4.
The semiring that operates on sparse feature
vectors, which we call tropical sparse tuple vec-
tor semiring
2
, uses conceptually identical opera-
tors as the non-sparse version defined above, so it
also maintains the tropical weights w correctly.
3 A Disambiguation Algorithm
We now describe how we use the semiring de-
scribed in Section 2 for steps (a) and (b), and de-
scribe an expansion algorithm for step (c) that effi-
ciently converts the output of determinization into
an unambiguous WFST with arc-level alignments.
WFSA with Sparse Topological Features
Let T be a tropical-weight WFST with K edges.
T is topologically sorted so that if an edge e
k
pre-
ceeds an edge e
k
?
on a path, then k < k
?
. We now
use tropical sparse tuple vector weights to create
a WFSA A that maintains (in its weights) pointers
to specific edges in T . These ’pointers’ are sparse
topological features.
2
We implement this semiring as an extension to the sparse
tuple weights of the OpenFst library (Allauzen et al., 2007).
For each edge e
k
= (p
k
, i
k
, o
k
, w
k
, n
k
) of T ,
we create an edge e
?
k
= (p
k
, i
k
, i
k
,
¯
f
k
, n
k
) in A,
where
¯
f
k
= [w
k
, 0, . . . , 0, 1, 0, . . . , 0]; the 1 is in
the k
th
position. In other words, f
k,0
is the tropical
weight of the k
th
edge in T and f
k,k
= 1 indicates
that this tropical weight belongs to edge k in T . In
sparse notation,
¯
f
k
= [(0, w
k
), (k, 1)].
For example, this non-deterministic transducer T :
a : A/2
1
b : B/1
3
b : V/5
4
a : Z/3
2
5
c : D/4
is mapped to acceptorA with topological features:
a/[(0, 2), (1, 1)]
b/[(0, 1), (3, 1)]
b/[(0, 5), (4, 1)]
a/[(0, 3), (2, 1)]
c/[(0, 4), (5, 1)]
Given ? = [1, 0, . . . , 0], operations on A yield the
same path weights as in the usual tropical semir-
ing.
WFSA determinization
We now apply the standard determinization algo-
rithm to A, which yields A
D
:
a/[(0, 2), (1, 1)]
b/[(0, 1), (3, 1)]
c/[(0, 5), (1,?1), (2, 1), (5, 1)]
This now accepts only one best-scoring path
for each input string, and the weights ’point’ to
the sequence of arcs traversed by the relevant
path in T . In turn, this reveals the best output
string for the given input string. For example,
the path-level features associated with ‘a b’ are
[(0, 3), (1, 1), (3, 1)], indicating a path pi = e
1
e
3
with tropical weight 3 through T (and hence out-
put string ‘AB’).
The topology of A
D
is compact because multi-
ple input strings may share arcs while still encod-
ing different output strings in their weights. This
is achieved by ‘cancelling’ topological features in
subsequent arcs and ‘replacing’ them by new ones
as one traverses the path. For example, the string
‘a c’ initially has feature (1, 1), but this gets can-
celled later in the path by (1,?1), and replaced by
[(2, 1), (5, 1)], indicating a path pi = e
2
e
5
through
T with output string ‘ZD’.
2276
EXPANDTFEA(A
r
= (?,?, Q, I, F,E))
1 I
?
? (I,0)
2 ENQUEUE(S, I
?
)
3 while |S| do
4 (q,
¯
f)? HEAD(S)
5 DEQUEUE(S)
6 if q ? F then
7 F
?
? F
?
? {(q,
¯
f))}
8 for each e ? E(q) do
9 (w
?
, t
?
,
¯
f
?
)? POPTFEA(
¯
f, e)
10 q
?
? (n[e],
¯
f
?
)
11 e
?
? ((q,
¯
f), i[e], i[e], [(0, w
?
), (t
?
, 1)], q
?
)
12 Q
?
? Q
?
? {q
?
}
13 E
?
? E
?
? {e
?
}
14 ENQUEUE(S, (n[e],
¯
f
?
))
15 return B
r
= (?,?, Q
?
, I
?
, F
?
, E
?
)
Figure 1: Expansion and topological feature repo-
sitioning algorithm for step (c).
Expansion Algorithm
We now describe an expansion algorithm to con-
vertA
D
into an unambiguous WFST T
?
that main-
tains the arc-level input-output alignments of the
original transducer T . In our example, T
?
should
be identical to T except for edge 4, which is re-
moved.
Due to the WFSA determinization algorithm,
we observe empirically that the cancelling features
in A
D
tend to appear in a path after the feature it-
self. This allows us to define an algorithm that tra-
versesA
D
in reverse (from its final states to its ini-
tial state) and creates an equivalent acceptor with
the topology of T
?
.
The algorithm is described in Figure 1. It per-
forms a forward pass through A
r
(the reverse of
A
D
). The intuition is that, for each arc, we cre-
ate a new arc where we ‘pop’ the highest topo-
logical feature (as it will not be cancelled later)
and its tropical weight. The new states encode the
original state q and the residual features that have
not been ‘popped’ yet. For each edge E(q), the
auxiliary POPTFEA(
¯
f, e) returns a (w
?
, t
?
,
¯
f
?
) tu-
ple, where w
?
is the tropical weight obtained as
¯
f ?
?
¯
f [e] (which is equivalent to f
0
+ f [e]
0
given
our ?¯); t
?
is the index of the highest topological
feature of
¯
f ?
¯
f [e]; and
¯
f
?
is the vector of resid-
ual topological features after excluding f
0
and f
t
?
,
that is,
¯
f ?
¯
f [e] ? [(0,?w
?
), (t
?
,?1)]. For exam-
ple, POPTFEA([(0, 5), (1,?1), (2, 1), (6, 1)]) re-
turns (5, 6, [(1,?1), (2, 1)]); if w has only one
topological feature, the residual is 0. The residual
in all final states of B
r
will be 0 (no topological
features still to be popped).
Graphically, in our running example A
r
is:
1 2 3
a/[(0, 2), (1, 1)]
b/[(0, 1), (3, 1)]
c/[(0, 5), (1,?1), (2, 1), (5, 1)]
and the output is B
r
:
(1,0)
(2,0)
(3,0)
(2, [(1,?1), (2, 1)])
b/[(0, 1), (3, 1)] a/[(0, 2), (1, 1)]
c/[(0, 5), (5, 1)] a/[(0, 2), (2, 1)]
Reversing B
r
yields an acceptor B (still in
the sparse tuple vector semiring) which has the
same topology as our goal T
?
and can be trivially
mapped to T
?
in linear time: each arc takes the
tropical weight via ?¯ and has only one topological
feature which points to the arc in T containing the
required output symbol.
Two-pass Expansion
As mentioned earlier, our algorithm relies on ‘can-
celling’ topological features appearing after the
feature they cancel in a given path. In general,
consider T a weighted transducer andA it’s equiv-
alent automaton with sparse topological features,
as described here. A
p
is the result of applying
standard WFST operations, such as determiniza-
tion, minimization or shortest path. Assume as a
final step that the weights have been pushed to-
wards the final states. It is worth noting the prop-
erty that: two topological features in a path ac-
cepted by A will never get reordered in A
p
, al-
though they can appear together on the same edge,
as shown in our running example. Indeed, if A
p
contains only one single path, all the topological
features would appear on the final state.
Let us define a function d
A
(e) as the minimum
number of edges on any path in A from the start
state to n[e] through edge e.
Consider all edges e
i
in A and e
p
in A
p
, with
f [e
i
]
i
= 1 and f [e
p
]
i
6= 0, i.e. we are interested
in the topological feature contribution on e
p
due
to the edge e
i
in A. If d
A
(e
i
) ? d
A
p
(e
p
) is al-
ways satisfied, then EXPANDTFEA will yield the
correct answer because the residual at each state,
together with the the weight of the current edge,
contains all the necessary information to pop the
next correct topological feature.
However, many deterministic WFSAs will not
exhibit this behaviour (eg. minimised WFSAs),
even after pushing the weights towards the final
states. For example see this acceptor A:
2277
Figure 2: Number of succesfully disambiguated transducers over time for PoS tagged lattices (left) and
HiFST lattices (right).
0
1
3
2
e
1
= y/[(0, 1), (1, 1)]
e
3
= x/[(0, 2), (3, 1)]
e
2
= z/[(0, 3), (2, 1)]
e
4
= x/[(0, 4), (4, 1)]
And A
p
is a minimised version of A:
0 1 2
e
p
3
= x/[(0, 3), (1, 1)(3, 1)]
e
p
1
= y
e
p
2
= z/[(0, 4), (1,?1), (3,?1), (2, 1), (4, 1)]
As d
A
(e
3
) = d
A
(e
4
) = 2 and d
A
p
(e
p
2
) = 1,
the distance test fails for both topo-
logical features (3,?1)(4, 1). Running
B
r
=EXPANDTFEA((A
p
)
r
) will not cancel
feature (3, 1) along the path ‘z x’ and will pop
(4, 1) instead, storing the remaining none-0
residual in a final state of B
r
.
As mentioned before, two topological features
along the same path in A will not reorder in A
p
.
In this example, as (4, 1) appears in edge e
p
2
, fea-
ture (2, 1) must also appear in this edge (or on an
earlier edge, in a more complicated machine). In
general, any remaining topological features along
the path back to the start state of A
p
will all be
popped after their correct edges in B
r
. All edges
inB
r
pass the distance test compared toA
r
, the re-
versed form of A: for all edges e
i
with f [e
i
]
i
= 1
inA
r
and e
q
inB
r
such that f [e
q
]
i
6= 0, d
A
r
(e
i
) ?
d
B
r
(e
q
). Edges in these machines are now reverse
sorted, i.e. if an edge e
k
precedes an edge e
k
?
on a
path, then k
?
< k.
We can perform a second pass with the same al-
gorithm over B, with the only minor modification
that t
?
is now the index of the lowest topological
feature of
¯
f ?
¯
f [e]. This expands the acceptor cor-
rectly. Because correct expansions yield 0 residu-
als on the final states, the algorithm can be trivially
modified to trigger the second pass automatically
if the residual on any final state is not 0.
4 Experiments
We evaluate our algorithm, henceforth called topo-
logical, in two ways: we empirically contrast
disambiguation times against previous work, and
then apply it to rescore translation lattices with
bilingual neural network models.
4.1 PoS Transducer Disambiguation
We apply our algorithm to the 4,664 NIST English
CTS RT Dev04 set PoS tagged lattices used by
Sproat el al. (2014); these were generated with a
speech recognizer similar to (Soltau et al., 2005)
and tagged with a WFST-based HMM tagger. The
average number of states is 493. We contrast with
the lexicographic tropical categorial semiring im-
plementation of Shafran et al. (2011), henceforth
referred to as the categorial method.
Figure 2 (left) shows the number of disam-
biguated WFSTs as processing time increases.
The topological algorithm proves much faster (and
we observe no memory footprint differences). In
50ms it disambiguates 3540 transducers, as op-
posed to the 2771 completed by the categorial pro-
cedure; the slowest WFST to disambiguate takes
230 seconds in the categorial procedure and 60
seconds in our method. Using sparse topological
features with our semiring disambiguates all WF-
2278
STs faster in 99.8% of cases.
4.2 Neural Network Bilingual Rescoring
We use the disambiguation algorithm to apply the
bilingual neural network language model (BiLM)
of Devlin et al. (2014) to the output lattices of the
CUED OpenMT12 Arabic-English hierarchical
phrase-based translation system
3
using HiFST (de
Gispert et al., 2010). We use a development set
mt0205tune (2075 sentences) and a validation set
mt0205test (2040 sentences) from the NIST MT02
through MT05 evaluation sets.
The edges in these WFSTs are of the form
t:i/w, where t is the target word, i is the source
sentence position t aligns to, and w contains the
translation and language model score. HiFST
outputs these WFSTs by using a standard hi-
ero grammar (Chiang, 2007) augmented with tar-
get side heuristic alignments or affiliations to the
source (Devlin et al., 2014).
In a rule over source and target words
X ?< s
1
X s
2
s
3
, t
1
X t
2
> / 2, 1
the feature ‘2, 1’ indicates that the target word t
1
is aligned to source word s
2
and that t
2
aligns to
s
1
. As rules are applied in translation, this infor-
mation can be used to link target words to absolute
positions within the source sentence.
Allowing for admissible pruning, all possible
affiliation sequences under the grammar for ev-
ery translation are available in the WFSTs; dis-
ambiguation keeps the best affiliation sequence
for each translation hypothesis, which allows the
rescoring of very large lattices with the BiLM
model.
This disambiguation task involves much bigger
lattices than the POS-tagging task: the average
number of states of the HiFST lattices is 38,200.
Figure 2 (right) shows the number of mt0205tune
disambiguated WFSTs over time compared to the
categorial method. As with the PoS disambigua-
tion task, the topological method is always much
faster than the categorial one. After 10 seconds,
our method has disambiguated 1953 lattices out of
2075, whereas the categorial method has only fin-
ished 1405. The slowest WFST to disambiguate
takes 6700 seconds with the categorial procedure,
which compares to 1000 seconds in our case.
The BiLM model is trained with
NPLM (Vaswani et al., 2013) with a context
3
See http://www.nist.gov/itl/iad/mig/openmt12results.cfm.
system mt0205tune mt0205test
baseline 52.2 51.9
+BiLM 53.0 52.9
Table 1: Translation scores in lower-case BLEU.
of 3 source and 4 target words. Lattice rescoring
with this model requires a special variation of the
standard WFST composition which looks at both
input and output labels on a transducer arc; we use
KenLM (Heafield, 2011) to retrieve neural net-
work scores for on-the-fly composition. We retune
the parameters with Lattice MERT (Macherey
et al., 2008) . Results are shown in Table 1.
Acknowledging the task differences with respect
to (Devlin et al., 2014), we find BLEU gains
consistent with rescoring results reported in their
Table 5.
5 Conclusions and Related Work
We have described a tagging disambiguation algo-
rithm that supports non-functional WFSTs, which
cannot be handled directly by neither WFST deter-
minization (Mohri, 1997) nor WFST disambigua-
tion (Mohri, 2012). We show it is faster than
the implementation with a lexicographic-tropical-
categorial semiring described by Shafran et al.
(2011) and describe a use case in a practical
rescoring task of an MT system with bilingual
neural networks that yield 1.0 BLEU gain.
Povey et al. (2012) also use a special semir-
ing that allows to map non-functional WFSTs into
WFSAs by inserting the tag into a string weight.
However, in contrast to our implementation and
that of Shafran et al (2011), no expansion into an
WFST with aligned input/output is described.
Lexicographic semirings, used for PoS tagging
disambiguation (Shafran et al., 2011), have been
also shown to be useful in other tasks (Sproat et
al., 2014), such as optimized epsilon encoding for
backoff language models (Roark et al., 2011), and
hierarchical phrase-based decoding with Push-
down Automata (Allauzen et al., 2014).
The tools for disambiguation and WFST com-
position with bilingual models, along with a tu-
torial to replicate Section 4.2, are all available at
http://ucam-smt.github.io.
Acknowledgments
We thank the authors of (Sproat et al., 2014) for
generously sharing their PoS-tagging experiments.
2279
References
Cyril Allauzen, Michael Riley, Johan Schalkwyk, Wo-
jciech Skut, and Mehryar Mohri. 2007. OpenFst: A
General and Efficient Weighted Finite-State Trans-
ducer Library. In Proceedings of CIAA.
Cyril Allauzen, Bill Byrne, Adri`a de Gispert, Gonzalo
Iglesias, and Michael Riley. 2014. Pushdown Au-
tomata in Statistical Machine Translation. Compu-
tational Linguistics, 40(3):687–723.
David Chiang. 2007. Hierarchical phrase-based trans-
lation. Computational Linguistics, 33(2):201–228.
Adri`a de Gispert, Gonzalo Iglesias, Graeme Black-
wood, Eduardo R. Banga, and William Byrne. 2010.
Hierarchical phrase-based translation with weighted
finite-state transducers and shallow-n grammars.
Computational Linguistics, 36(3):505–533.
Jacob Devlin, Rabih Zbib, Zhongqiang Huang, Thomas
Lamar, Richard Schwartz, and John Makhoul. 2014.
Fast and Robust Neural Network Joint Models for
Statistical Machine Translation. In Proceedings of
ACL.
Kenneth Heafield. 2011. KenLM: Faster and Smaller
Language Model Queries. In Proceedings of
EMNLP.
Wolfgang Macherey, Franz Och, Ignacio Thayer, and
Jakob Uszkoreit. 2008. Lattice-based Minimum
Error Rate Training for Statistical Machine Trans-
lation. In Proceedings of EMNLP.
Mehryar Mohri. 1997. Finite-state transducers in lan-
guage and speech processing. Computational Lin-
guistics, 23:269–311.
Mehryar Mohri. 2009. Weighted automata algo-
rithms. In Manfred Droste, Werner Kuich, and
Heiko Vogler, editors, Handbook of Weighted Au-
tomata, Monographs in Theoretical Computer Sci-
ence. An EATCS Series, pages 213–254. Springer
Berlin Heidelberg.
Mehryar Mohri. 2012. A Disambiguation Algorithm
for Finite Automata and Functional Transducers. In
Proceedings of CIAA, volume 7381, pages 265–277.
Daniel Povey, Mirko Hannemann, Gilles Boulianne,
Lukas Burget, Arnab Ghoshal, Milos Janda, Mar-
tin Karafiat, Stefan Kombrink, Petr Motl?cek, Yan-
min Qian, Korbinian Riedhammer, Karel Vesely,
and Ngoc Thang Vu. 2012. Generating Exact Lat-
tices in the WFST Framework. In Proceedings of
ICASSP.
Brian Roark, Richard Sproat, and Izhak Shafran. 2011.
Lexicographic Semirings for Exact Automata En-
coding of Sequence Models. In Proceedings of
ACL-HLT.
Izhak Shafran, Richard Sproat, Mahsa Yarmohammadi,
and Brian Roark. 2011. Efficient Determinization
of Tagged Word Lattices using Categorial and Lexi-
cographic Semirings. In Proceedings of ASRU.
Hagen Soltau, Brian Kingsbury, Lidia Mangu, Daniel
Povey, George Saon, and Geoffrey Zweig. 2005.
The IBM 2004 Conversational Telephony System
for Rich Transcription. In Proceedings of ICASSP.
Richard Sproat, Mahsa Yarmohammadi, Izhak Shafran,
and Brian Roark. 2014. Applications of Lex-
icographic Semirings to Problems in Speech and
Language Processing. Computational Linguistics,
40(4):733–761.
Ashish Vaswani, Yinggong Zhao, Victoria Fossum, and
David Chiang. 2013. Decoding with Large-Scale
Neural Language Models Improves Translation. In
Proceedings of EMNLP.
2280
