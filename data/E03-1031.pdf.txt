Describing Syntax with Star-Free Regular Expressions
Anssi Yli-Jyrã
Department of General Linguistics, P.O. Box 9, FIN-00014 Univ. of Helsinki, Finland
anssi .yli — jyra@helsinki fi
Abstract
Syntactic constraints in Koskenniemi's
Finite-State Intersection Grammar
(FSIG) are logically less complex than
their formalism (Koskenniemi et al.,
1992) would suggest: It turns out that
although the constraints in Voutilainen's
(1994) FSIG description of English
make use of several extensions to
regular expressions, the description as a
whole reduces to a finite combination of
union, complement and concatenation.
This is an essential improvement to the
descriptive complexity of ENGFSIG.
The result opens a door for further anal-
ysis of logical properties and possible
optimizations in the FSIG descriptions.
The proof contains a new formula for
compiling Koskenniemi's restriction
operation without any marker symbols.
1 Introduction
For many years, various finite-state models of
language (Roche and Schabes, 1997) have been
used in surface-syntactic parsing. These mod-
els can process local syntactic ambiguity effi-
ciently. However, because the formalism of Finite-
State Intersection Grammar (Koskenniemi, 1990;
Koskenniemi et al., 1992) allows full regular
expressions, its parsing is sometimes inefficient
(Tapanainen, 1997); many FSIG constraint au-
tomata can reduce ambiguity only after they have
scanned the whole sentence.
Regular expressions in FSIG can be viewed as
a grammar-writing tool that should be as flexible
as possible. This viewpoint has led to introduction
of new features into the formalism (Koskenniemi
et al., 1992). It is, however, very difficult to make
any a priori generalizations of the structural prop-
erties of automata as long as we allow unrestricted
use of regular expressions.
A complementary view is to analyze the prop-
erties of languages described by FSIG regular
expressions. We can carry out the analysis by
checking whether the languages can be described
with a restricted class of regular expressions. For
many such classes of expressions, there also ex-
ists a group-theoretic characterization (Pin, 1986).
Moreover, if the analyzed regular language has
favorable properties, some problems, e.g. the
string membership problem, can be solved faster
by means of specialized algorithms.
A language can be described with a star-free
regular expression if it can be constructed from
alphabet symbols by application of union (A U
B), complementation (A) and finite concatena-
tion (AB), that is, without the Kleene closure
(A*). The theoretical importance of this class
of languages is supported by its characterization
in terms of finite aperiodic syntactic monoids
(Schtitzenberger, 1965) and by its definability in
first-order logic over strings (McNaughton and Pa-
pert, 1971). The class has also a lot of practical
importance, because many languages in it admit
extremely simple implementations (ibid.).
The question of the star-freeness restriction on
FSIG constraints has not been studied before, pos-
sibly because of the following observations:
(i) An acyclic automaton representing readings
of the sentence has a central role in FSIG
parsing (Tapanainen, 1997). Star-freeness of
the constraints is a minor restriction when
compared to the finiteness of this language.
379
(ii) If automata states are encoded as "traces"
into strings, any regular language can be rep-
resented as a homomorphic image of a (local)
star-free language (Medvedev, 1964). Such
an encoding is possible in a two-level view
of the FSIG framework (Koskenniemi, 1997),
where the morphological reading of the sen-
tence is a homomorphic image of a level rep-
resenting syntactically annotated readings.
(iii) Given a finite automaton or a regular expres-
sion, checking star-freeness of the described
language is an intractable (see 2.2) problem.
(iv) Automatical methods to derive star-free reg-
ular expressions from another representa-
tions procuce long and unintuitive expres-
sions (Matz et al., 1995).
From my point of view, these observations miss
some important perspectives: Firstly (i), it is im-
portant to understand that a finite-state intersection
grammar is also a description of a language with
a structure of its own, independent of the acyclic
sentence automaton. Secondly (ii), a realistic
FSIG description is linguistically motivated and
leaves little room for encoding of traces that could
technically make the grammar star-free. Thirdly
(iii), heuristic methods can be used to solve many
large star-freeness problems in practice. Fourthly
(iv), it is often possible to find star-free regular ex-
pressions that are short and illustrative, as it turns
out in this paper.
Any automaton recognizing a non-star-free lan-
guage has a factor that induces a nontrivial per-
mutation of the state space. For example, the par-
ity language 0* (10*10*)* contains strings with an
even number of occurrences of the factor "1". In-
tuitively, it seems improbable that similar counting
constraints occur in natural language grammars
However, many regular expressions in Vouti-
lainen's ENGFSIG (1994) involve the Kleene star.
If we can explain why this does not affect the star-
freeness of the language, we probably know more
about the grammar itself.
A significant contribution of this paper is the
human-readable construction that rephrases ENG-
FSIG (Voutilainen, 1994) constraints without the
Kleene star. To make the construction more sys-
tematic I first outline the framework of FSIG and
define its star-freeness problem. After this I ex-
plore stars in the ENGFSIG description and reduce
regular expressions in the description into their
star-free equivalents. This approach extends to a
closure property of the star-free regular languages
under the restriction operator (of FSIG).
2 Finite-State Intersection Grammar
In this section I define a class of finite-state in-
tersection grammars and explain the star-freeness
problem specific to them. The FSIG framework
developed here is based on the work of Kosken-
niemi, Tapanainen and Voutilainen (1992).
2.1 Definitions
I start by making my terminology on the strings
described precise. In FSIG, a sentence is seen as
a syntactically annotated string that is exemplified
in the following string:
II @@ time
fly
like
an
arrow
N NOM SG
3 PRES SG3
PREP
NET ART SG
N NOM SG
@SUBJ @
@MV @
@ADVL @
@>N @
@P« @@"
This string of tags represents a possible syntac-
tic structure for the sentence 'time flies like an ar-
row'. In the example, all the tags that start with an
-sign contribute to the syntactic analysis. In this
example, the tags @@ and @ denote sentence and
word boundaries, respectively. They delimit word
analyses. For each word, the morphological anal-
ysis like "time N NOM SG" precedes the tags that
denote the syntactic function of the word. Syn-
tactic tags specify, in this example, that the word
'time' functions as the subject (@suBJ), and the
word 'arrow' is the complement for a preposition
on the left (@p«).
An (unweighted) finite-state intersection gram-
mar is a tuple G = (EB, w, F, B, W, F, C.
d), in which
• EB, Ew EF c E are disjoint alphabets,
• B C EB is a set of delimiters that can appear
before and after word analyses,
• W C EiFv, is a finite lexicon of morphologi-
cal analyses,
• F C EIEF, is a finite set of tag strings that
denote syntactic functions, and,
380
• C = fefi,	 is a set of finite-state
constraints (regular languages) with the al-
phabet E, where
• d C N is a finite bound for the maximum
center-embedding depth in the constraints.
The regular set D B(W F B)± is the domain of
annotated strings. The language described by the
grammar G is defined by the set L(C) = D n
Cd n C d •• •n C d Cd • • •1-1 C d The first k con-1 2 k lc+) 71
straints apply locally to each word, matching mor-
phological analyses with potential syntactic func-
tions. I call them local lexical constraints. All the
constraints are expressed by means of FSIG regu-
lar expressions.
Any symbol a E E, as well as any symbol set
{al, a2, , arn }, al, a2.... , e E, are valid
FSIG regular expressions. The language consist-
ing of the empty string is denoted with E (or [] in
the FSIG notation). In addition to the simple op-
erators (Table 1) that combine expressions A and
B, FSIG regular expressions make use of the re-
striction operator (Koskenniemi, 1983). It has the
following syntax:
X LC i _ RCA , LC2 _ RC2. • • • , LCn _ RCn
The operands X, LCi, , RC, are FSIG regular
expressions. The semantics of the whole expres-
sion is as follows: Whenever a substring x C X oc-
curs in the string w, its context must match at least
one of the patterns LC, _ RC,, i = 1..n. When
there are overlapping occurrences of the center X,
the string w is rejected if any of the occurrences
infringes the restriction (this is the strict interpre-
tation of the operator).
A center-embedded clause is an embedded
clause that is not the leftmost neither the rightmost
constituent in its matrix clause. In the ENGFSIG
The FS1G The current Preced- Semantics of
notation notation ence the expression
[A[ [A] (6) A
(A) A (6) A U E
—A A or —A 5 {,xxEE*Axi}
A+ 4 AA*	 i
A* A* 4 AA...A
\A SA or —SA 3 — [E*AE*]
AB AB 2 {xylxEAAyEB}
AB A U B 1 {xhreAVxeB}
A & B AnB I TA u —B]
N/A A — B 1 A n713
Table 1: Combinations of expressions A and B.
representation, a finite center-embedded clause is
separated from its matrix clause with a pair of
delimiters @<c B and @>E B. Sequential clause
boundaries are denoted (ambiguously) with the
delimiter @/ CB. Special constants (Koskenniemi
et al., 1992) are used to facilitate description of
complex patterns involving the delimiter symbols
EB, Eg B, B = fe, @<, @>, @, @el. The in-
tuitive meaning of the constants in Table 2 is as
follows: The dot H accepts tag sequences of EH-
and EF inside word analyses, the expression > • • <
accepts tag sequences of Ew , EF and @, and the
constant @<> accepts a center-embedded clause
with possible nested center-embeddings. The dot-
dot l •• I differs from the expression >••< by ac-
cepting anything within the same clause, includ-
ing center-embedded clauses. Finally, the dots
I••• accepts anything at the same level of center-
embedding.
FS1G Current Semantics
Eg
[H ]-] {@}]*
(explained in the text)
[H U {@} U @<>1*
[E u {@, @/} u @<›[*
Table 2: The special constant expressions.
The parameter d specifying the maximum
depth of center-embedding is an essential element
of the FSIG regular expressions. The bound is
needed to compile constraints that contain the
constant @ <>, because the idealized language
described by the constant @<> is context-
free, in fact, a counter language in terms of
Schtitzenberger (1962). In a practical implemen-
tation (Koskenniemi et al., 1992), the language
1<> is approximated with a regular language. I
denote the approximation using the parameterized
expression @ <> d (Figure 1). The generic expres-
sions @<>', i C 1, 2, 3, ... , as well as the con-
stants I •• I d and i• • •  d are defined as follows:
=6
. @ < [ [ H U {@, @/}1* @<>
[	 u {e, @/}]* @>
[H u {@} u @<›dr
= [El U {@,@/} U e<> dr
Finally, FSIG regular expressions may contain
user-defined macros as subexpressions. They can
have a constant value or take other expressions as
arguments.
>..<
	 I>•-<
e<>
	 @<>
I	 I
•••1
e<> 0
@<>
••	 I
I•••
381
 0],
Figure 1: A finite automaton (? = E— {@<, @>})
that visualizes the semantics of <> d .
2.2 Star-freeness problem for an FSIG
The problem I want to solve for an FSIG is the
star-freeness problem. It is, given a grammar G, to
determine whether the language L(G) is star-free
i.e. whether it can be constructed from alphabet
symbols by application of the boolean operators
(U, and concatenation.
Proposition 1. For a regular language L, the fol-
lowing properties are equivalent:
• the language L is star-free,
• there is a starfree regular expression, based
on concatenation and the boolean operators,
that describes the language L,
• the syntactic monoid (McNaughton and Pa-
pert, 1968) that is canonically assigned to
the language L is aperiodic (Schiitzenberger,
1965),
• the language L is definable in propositional
linear temporal logic (Kamp, 1968), and,
• the language L is definable in a first-order
logic that is interpreted over finite strings
(McNaughton and Papert, 1971).
Sometimes star-freeness of a language can be
shown by means of closure properties of star-free
languages. To start with, finite regular languages
are star-free (especially 0, 6, a, and F, where 0 de-
notes the empty set of strings, a C E, and F C E)
The Kleene closure of any subset F C E is also
star-free, because I' = 0[E — F10. If A and
B are star-free languages, then we know that at
least the following languages are star-free (Mc-
Naughton and Papert, 1971):
AB A $A AuB AnB A- B
It is also possible that the language of a regu-
lar expression is star-free although the expression
contains the Kleene star operator. Therefore, the
method based on the properties of the syntactic
monoid of the language is important. The syntac-
tic monoid is usually difficult to compute manu-
ally, and some programs, e.g. AMoRe (Matz et
al., 1995) are designed to facilitate these compu-
tations and aperiodicity testing. The aperiodicity
problem is, however, computationally intractable
(PSPACE-complete) both for regular expressions
(Bernatsky, 1997) and for deterministic automata
(Cho and Huynh, 1991).
It is often possible to heuristically prove the
star-freeness property by inventing an equivalent
star-free expression.
Proposition 2. In order to show that a finite-state
intersection grammar G is star-free, it is sufficient
to show that:
• the domain B(WFB)± is star-free,
• the local lexical constraints c , 	 .
are star-free,
• the constants El , .• I ,    , >••<1 , 8<> and
other subexpressions in the constraints are
star-free, and,
• the star-free languages are closed under the
operators that combine the subexpressions
into the constraints c 4d,±1 ,	 .. . , cmd .
3 The reduction of ENGFSIG into
star-free expressions
3.1 The domain of annotated strings
Because the alphabets EB, Ew and EF are dis-
joint and the sets B, W and F do not contain
an empty string, the set S = E -MEiFv EIF ,*+
can be expressed as [ w *] [E*EF EL] n
-$[EB[E-EB n -$[Ew[E-Ew —EF1] n
-$[EF[ - EF —E B ]] . The remaining question
is, whether the sets B, W and F are star-free
languages. In the case of ENGFSIG they are
finite, and therefore, each of them is express-
ible with a star-free regular expression. Hence
the iteration in B(WFB)± translates to S n
[B 7 *] [E*EFB] n—S[EB[Ei'v —WlEF] n
— F] EB] n $[F[ -B]7]
3.2 The local lexical constraints
The relation between the morphological analyses
and the allowed syntactic functions can be im-
plemented either with one or two levels (Kosken-
niemi, 1997) in a practical FSIG parser. In the
grammar G, this relation corresponds to a set of
lexical constraints efi,d,. ,
382
In the case of ENGFSIG, the local lexical con-
straints reduce to a boolean combination of lan-
guages of the form St, t CEw U EF , because the
tag positions in the strings of W and F are fixed
by a convention that partly reflects the simple mor-
pheme structure of English words. Let the lexi-
cal constraints in conjunction with the domain D
describe the set B (LwFB) ± , LITT, C W F. The
conformance to this property is enforced by the
following star-free constraint:
D fl E*EB	
— LwF] EBE*
3.3 The constant expressions
It is pretty easy to see that the expressions @ <>°
and @<> 1 are star-free. I managed to find an
inductive derivation for general case @<>z. i E
1.2  3  The following defines the dependent
constants @<>    and I • • 1 1 , as well as the
constant >• • < with star-free operators:
=• •	 ° ${ @<, e>, @e}
e<>0 c
i-1[	 @<] [ [0 6 <1
> i [1 _	 @>I
= $@@ n $[e< @<i] n $[@> 6>
• • 	 I
@<> Ii = @<
— 1 @>E* n E* e<
@>
• • • I - 1
I •• I	 • •	 n 	 e/
1> ..< 
= "1[Es —
3.4 The subexpressions with the Kleene star
The version of ENGFSIG studied contains 983
subexpressions (of 221 types) containing the
Kleene star operator. Each iterated subexpression
seems to have two components: (i) a domain of
iteration which specifies what kind of unit is iter-
ated, and (ii) a condition which specifies the neces-
sary property for each unit. By unifying every left-
oriented domain of iteration (e.g. H @) with the
corresponding right-oriented domain (e.g. @ H ), I
identified four variants of domains (Table 3).
Domain Freq. Iterated unit (R) Conditions
R/Lword 938 @H 196
R/Lclause 42 @/	 I • •	 I 22
R/Lafter 2 {@/,@<}	 I 2
R/Lornbedded @<	 I - • I 1
Table 3: The four domains of iteration.
The domain and the condition are seldom sepa-
rated in a ENGFSIG regular expression. Instead,
the condition is usually inside the Kleene closure
that specifies the domain. For example in the
subexpression [@ @>AE [*, the domain is a word
preceded by a word boundary (@ 13 and the con-
dition is that each word must be an adjective-pre-
modifier.
Iteration of the right-oriented domains corre-
sponds to the following star-free regular expres-
sions:
RLrd = u [@ ,[[< d ]
R 'clause	 U [@ 	  di
= u [{@/ , @<1 [ • I d @> 	n
$@@ n $[@> @> d ] ]]
Re*robedded = 1.1 [
	
@< [ I • • • d @ , E* n
E @/ •••I d @>E* n $@@ n $[e> @>d] n
$e< @/ E* n E' @/ $@> 11
ENGFSIG associates typically very simple con-
ditions with the domain of iteration. In the star-
free form of a starred expression, the domain of
iteration and the associated condition are defined
separately and then combined under the intersec-
tion operator. In the following, I give some exam-
ples of possible conditions and how they are rep-
resented in separation from the domain:
• The phrase "every @>N 6, 000 @>N miles N
@ADVL" satisfies the constraint "N H @ADVL
every IE @>N @ [IE @>NIE @]x E 9.
In [ @>N @1*, the domain of iteration
is Lword, a reverse counterpart to Rword.
The corresponding condition is as follows:
${@, e>N} e ] n —$[e $ @>N @].
• Conditions often specify the absence of
a word (or a tag).	 The closure [[H n
$DET] @>N[H n $DET ] @]* can be simplified as
follows: [ @>N @]* n SDET.
• If the domain of iteration is the clause
//clause, then the condition may require that
each clause contains a main verb (@mv).
Such a condition translates as follows:
— [E* e/ ${@/,mv}] n --$[@/ $mv @/].
• Sometimes the iterated clause Rclause is not
allowed to contain center-embeddings. This
condition reads: —${@<, @>}.
383
ENGFSIG contains only 12 examples of nested
Kleene stars. One example is in the following:
[@/ [IH [@commalcc]H @]* H @cc ]- 1]*
In all these cases, the inner application of
Kleene star can be expressed as a condition ap-
plying to the domain of the outer iteration level.
3.5 The restriction operator
In Section 3.2, I have described how the lo-
cal lexical constraints can be represented with-
out the Kleene star operator. In addition to these,
there are 2657 more complicated constraints. The
schematic equivalences presented in Sections 3.3
— 3.4 can transform 1554 of these into a star-free
form. However, there still remain 1103 constraints
that use the restriction operator To complete
the proof of the star-freeness of ENGFSIG, I show
that star-free languages are closed under the re-
striction operation (as in FSIG).
Compilation of the restriction operator (as
in Two-Level Morphology) has been solved by
means of marker symbols and transducers (Kart-
tunen et al., 1987; Kaplan and Kay, 1994). To
compile the restriction as in FSIG, Tapanainen
(1992) used also a method that is perhaps most
easily described with transducers. When there is
only one context LC 1 _ RCi , the restriction oper-
ator (as in TWOL and in FSIG) reduces to the fol-
lowing star-free formula (Karttunen et al., 1987):
E*LCi X 0 n 0 X Rci E*
I generalize this special case in the following
new formula for n contexts LC i
 _ RC , i = 1..n:
S 	 Ii 	 71n 	 LCi ] X n RCi .F)
.F={}
0(i, .F) =
The above formula does not use markers, trans-
ducers, nor the Kleene star. Intuitively, it says that
the string is rejected on the basis of the match of
X, if each of the n contexts around a match of X
fails at least on one side (0(i. S — ,F) ... 05(i, Jr)).
There are 2n different ways (.T = 	 {1}, {2},
{1, 2}, ..{1, 2,	 , n}) to choose a failing side for
every member in the set of contexts LCi, _ RC
i = 1..n.
4 Experiments
I initially extracted the starry subexpressions from
the ENGFSIG grammar and classified them using
a Perl script. At a later stage, I developed a reg-
ular expression preprocessor that automated many
tasks. The results were compared across different
formulas in order to find possible differences.
The preprocessor could output a script where
operands for each restriction operator were de-
fined (and compiled into automata) before the op-
erator was applied. Every bunch of operand defini-
tions was followed by a formula that implemented
the restriction operator with a required number of
contexts. In order to reduce the number of con-
texts, I gathered unilateral contexts with the pre-
processor.
I developed and tested the presented equiva-
lences using the Xerox Finite-State Tool (v.7.4.0).
My new formula for the restriction operator pro-
duced automata that were equivalent to the output
of Tapanainen's rule compiler (Koskenniemi et al.,
1992), which was actually used during the devel-
opment of ENGFSIG.
I also compared these automata to the ones that
would result from using Kaplan and Kay's (1994)
method and some variants of it. Some differences
in the results suggest that they use another inter-
pretation for the (compound) restriction operator.
According to that interpretation, overlapping cen-
ters are not restricted conjunctively, sometimes re-
sulting in a bigger language.
Simple optimizations in the formula for an n-
context restriction made a notable difference in
compilation time. When I compiled a 7-context
restriction (this was a striking exception in ENG-
FSIG), an unoptimized version of my formula was
very slow (9 min.) compared to a transducer-based
method (34.8 sec.), while an optimized version
was roughly as efficient (35.5 sec.). In this exam-
ple, the number of (outer) conjuncts in my formula
was quite high (2 7). The new formula is at its best
in the typical case when the number of contexts is
smaller than seven.
I did not make experiments with starry subex-
pressions because they are relatively small and fast
to compile anyway.
1= 1 
where S = {1 ; 2, ... n} and
{E* if i c .F;
0 otherwise;
384
5 Discussion
The schematic equivalences presented suggest al-
ternative ways to compile some special cases of
Kleene star. The compilation of Kleene closures
into deterministic automata involves determiniza-
tion that is based on the subset construction. On
the basis of the equivalences presented here it may
be possible to identify more cases for which we
can find specialized determinization algorithms
(Mohri, 1995).
The new formula for the restriction operator
has one extra advantage over compilation meth-
ods that are based on marker symbols and trans-
ducers (Kaplan and Kay, 1994). In these meth-
ods, the markers have to be eliminated from the
final language. Usually this requires determiniza-
tion using the costly subset construction. The new
formula does not involve markers and it there-
fore only needs to apply determinization at smaller
sub-formulas.
Methods that reduce the size of constraint au-
tomata can contribute to an efficient solution for
the FSIG parsing problem (Koskenniemi, 1997)
by producing a smaller representation for the
grammar. Tapanainen (1992) has developed spe-
cial optimizations that apply to automata during
their construction. The current paper suggests ma-
nipulation of FSIG regular expressions before they
are compiled into deterministic automata. The
value of this approach is based on the fact that the
construction of a deterministic automaton from a
regular expression is, in the worst-case, exponen-
tial.
The current paper provides the FSIG frame-
work with a grammar semantics that is completely
based on regular languages and a one-level rep-
resentation. Our new formula for an n-context
restriction operator does not make use of trans-
ducers (Tapanainen, 1992) nor markers. In the
absence of such complications, axioms for regu-
lar expressions (Antimirov and Mosses, 1994) be-
come much more usable and may lead to essential
simplifications in the individual constraints (see
Section 4) and in the grammar altogether.
The new formula for the restriction operator en-
ables us to split an n-context restriction into 2"
separate constraints (under intersection), each of
which can be simplified, compiled and applied
separately. It is also possible to compile the FSIG
regular expressions directly into a single alternat-
ing finite automaton where intersection and com-
plementation can occur inside the grammar au-
tomaton. Manipulation of alternating automata
(Vardi, 1995) may help us to avoid the state explo-
sion that is the main problem with deterministic
automata in FSIG parsing (Tapanainen, 1997).
Finally, the main contribution of this paper is
to show that ENGFSIG describes a star-free set
of strings. It seems probable that this narrowing
could be added to the FSIG framework in general.
The computational complexity of many impor-
tant decision problems for the FSIG grammars
remains intractable in spite of the star-freeness
property (Sistla and Clarke, 1985). Neverthe-
less, the improved descriptive complexity allows
us to simplify some algorithms; we can, for ex-
ample, implement the grammar with the class of
loop-free alternating automata (Salomaa and Yu,
2000). Moreover, the restriction also means that
the grammar is definable in a first-order logic
that is interpreted over finite strings (McNaughton
and Papert, 1971). This simplification is relevant
to reconstruction of FSIG and similar finite-state
models with logical specifications (Vaillette, 2001;
Lager and Nivre, 2001).
6 Conclusion
In this paper, the ENGFSIG description as a whole
is shown to be a regular expression that reduces
to a combination of union, complementation and
finite concatenation. The current work has the-
oretical and practical consequences in process-
ing of ENGFSIG (or similar) descriptions, context
restrictions in the Two-Level Morphology, and
Kleene closures in wider domains.
Acknowledgments
This work was supported by NorFA Ph.D. pro-
gramme I am grateful to Atro Voutilainen (and
Connexor) for putting to my disposal the ENG-
FSIG description. I would also like to thank es-
pecially Lauri Carlson, as well as Voutilainen,
Kimmo Koskenniemi, and the referees for useful
comments on this paper.
385
References
Valentin M. Antimirov and Peter D. Mosses. 1994.
Rewriting extended regular expressions. In
G. Rozenberg and A. Salomaa, editors, Develop-
ments in Language Theory, - at the Crossroads of-
Mathematics, Computer Science and Biology, pages
195-209. World Scientific.
Lasz16 Bernatsky. 1997. Regular expression star-
freeness is PSPACE-complete. Acta Cybemetica,
13(1):1-21.
Sang Cho and Dung T. Huynh. 1991. Finite-
automaton aperiodicity is PSPACE-complete. The-
oretical Computer Science, 88:99-116.
Johan A.W. Kamp. 1968. Tense Logic and the Theory
of Linear Order. Ph.D. thesis, Univ. of California,
Los Angeles.
Ronald M. Kaplan and Martin Kay. 1994. Regu-
lar models of phonological rule systems. Compu-
tational Linguistics, 20(3):331-378.
Lauri Karttunen, Kimmo Koskenniemi, and Ronald M.
Kaplan. 1987. A compiler for two-level phono-
logical rules. Technical Report CSLI-87-108, CSLI,
Stanford University.
Kimmo Koskenniemi, Pasi Tapanainen, and Atro
Voutilainen. 1992. Compiling and using finite-state
syntactic rules. In Proc. COLING'92, volume I,
pages 156-162. Nantes, France.
Kimmo Koskenniemi. 1983. Two-level morphology: a
general computational model for word-form recog-
nition and production. Nr. 11 in Publications of the
Dept. of General Linguistics. University of Helsinki.
Kimmo Koskenniemi. 1990. Finite-state parsing and
disambiguation. In Proc. COLING'90, volume 2,
pages 229-232, Helsinki.
Kimmo Koskenniemi. 1997. Representations and
finite-state components in natural language. In
(Roche and Schabes, 1997), pages 99-116.
TorbjOrn Lager and Joakim Nivre. 2001. Part of
speech tagging from a logical point of view. In
P. de Groote, G. Morrill, and C. Retore, editors, Log-
ical Aspects of Cotnput. Linguistics, volume 2099 of
Lecture Notes in Artificial Intelligence, pages 212-
227. Springer-Verlag.
0. Matz, A. Miller, A. Potthoff, W. Thomas, and
E. Valkema. 1995. Report on the program AMo RE.
Bericht Nr. 9507, Institut fiir Informatik und Prac-
tische Mathematik, Christian-Albrects-Universitt,
Kiel.
Robert McNaughton and Seymour Papert. 1968. The
syntactic monoid of a regular event. In M.A. Arbib,
editor, Algebraic Theory of Machines, Languages,
and Semi groups, pages 297-312. Academic Press.
Robert McNaughton and Seymour Papert. 1971.
Counter-free Automata. Research Monograph No.
65. MIT Press.
Yu. T. Medvedev. 1964. On the class of events repre-
sentable in a finite automaton. In E.F. Moore, editor,
Sequential Machines, pages 215-227. Addison Wes-
ley.
Mehryar Mohri. 1995. Matching patterns of an au-
tomaton. In Proc. Combinatorial Pattern Matching
(CPM'95), volume 937 of LNCS, pages 286-297,
Espoo, Finland. Springer-Verlag.
Jean-Eric Pin. 1986. Varieties of Formal Languages.
Foundations of Computer Science. North Oxford.
Emmanuel Roche and Yves Schabes, editors. 1997.
Finite-state language processing. A Bradford Book,
MIT Press, Cambridge, MA.
Kai Salomaa and Sheng Yu. 2000. Alternating finite
automata and star-free languages. Theoretical Com-
puter Science, 234:167-176.
Marcel Paul Schazenberger. 1962. Finite counting
automata. Information and Control, 5(2):91-107.
Marcel Paul Schiitzenberger. 1965. On finite monoids
having only trivial subgroups. Information and Con-
trol, 8(2):190-194.
A. Prasad Sistla and Edmund M. Clarke. 1985. The
complexity of propositional linear temporal logic.
Journal of ACM, 32:733-749.
Pasi Tapanainen. 1992. Aeirellisiin automaatteihin pe-
rustuva luonnollisen kielen jeisennin. Licentiate the-
sis, Department of Computer Science, University of
Helsinki, Finland.
Pasi Tapanainen. 1997. Applying a finite-state inter-
section grammar. In (Roche and Schabes, 1997),
pages 311-327.
Nathan Vaillette. 2001. Logical specification of trans-
ducers for NLP. In Finite State Methods in Natural
Language Processing 2001 (FSMNLP 2001), ESS-
LLI Workshop, pages 20-24, Helsinki.
Moshe Y. Vardi. 1995. Alternating automata and pro-
gram verification. In Computer Science Today -
Recent Trends and Developments, volume 1000 of
LNCS, pages 471-485. Springer-Verlag.
Atro Voutilainen. 1994. Designing a Parsing Gram-
mar. Nr. 22 in Publications of the Department of
General Linguistics. University of Helsinki.
386
