Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 2094–2099,
Lisbon, Portugal, 17-21 September 2015.
c
©2015 Association for Computational Linguistics.
A Binarized Neural Network Joint Model for Machine Translation
Jingyi Zhang
1,2
, Masao Utiyama
1
, Eiichro Sumita
1
Graham Neubig
2
, Satoshi Nakamura
2
1
National Institute of Information and Communications Technology,
3-5Hikaridai, Keihanna Science City, Kyoto 619-0289, Japan
2
Graduate School of Information Science, Nara Institute of Science and Technology,
Takayama, Ikoma, Nara 630-0192, Japan
jingyizhang/mutiyama/eiichiro.sumita@nict.go.jp
neubig/s-nakamura@is.naist.jp
Abstract
The neural network joint model (NNJM),
which augments the neural network lan-
guage model (NNLM) with an m-word
source context window, has achieved large
gains in machine translation accuracy, but
also has problems with high normalization
cost when using large vocabularies. Train-
ing the NNJM with noise-contrastive es-
timation (NCE), instead of standard maxi-
mum likelihood estimation (MLE), can re-
duce computation cost. In this paper, we
propose an alternative to NCE, the bina-
rized NNJM (BNNJM), which learns a bi-
nary classifier that takes both the context
and target words as input, and can be ef-
ficiently trained using MLE. We compare
the BNNJM and NNJM trained by NCE
on various translation tasks.
1 Introduction
Neural network translation models, which learn
mappings over real-valued vector representations
in high-dimensional space, have recently achieved
large gains in translation accuracy (Hu et al., 2014;
Devlin et al., 2014; Sundermeyer et al., 2014;
Auli et al., 2013; Schwenk, 2012; Sutskever et al.,
2014; Bahdanau et al., 2015).
Notably, Devlin et al. (2014) proposed a neural
network joint model (NNJM), which augments the
n-gram neural network language model (NNLM)
with an m-word source context window, as shown
in Figure 1a. While this model is effective, the
computation cost of using it in a large-vocabulary
SMT task is quite expensive, as probabilities need
to be normalized over the entire vocabulary. To
solve this problem, Devlin et al. (2014) pre-
sented a technique to train the NNJM to be self-
normalized and avoided the expensive normaliza-
tion cost during decoding. However, they also
P(ti=1)
P(ti=2)
P(ti=N)
ti-n+1~ti-1
m-word
source context
(a)
P(ti is correct)
P(ti is wrong)ti-n+1~ti
source context
m-word
(b)
Figure 1: (a) the traditional NNJM and (b) the pro-
posed BNNJM
note that this self-normalization technique sacri-
fices neural network accuracy, and the training
process for the self-normalized neural network is
very slow, as with standard maximum likelihood
estimation (MLE).
To remedy the problem of long training times
in the context of NNLMs, Vaswani et al. (2013)
used a method called noise contrastive estimation
(NCE). Compared with MLE, NCE does not re-
quire repeated summations over the whole vocab-
ulary and performs nonlinear logistic regression to
discriminate between the observed data and artifi-
cially generated noise.
This paper proposes an alternative framework of
binarized NNJMs (BNNJM), which are similar to
the NNJM, but use the current target word not as
the output, but as the input of the neural network,
estimating whether the target word under exam-
ination is correct or not, as shown in Figure 1b.
Because the BNNJM uses the current target word
as input, the information about the current target
word can be combined with the context word in-
formation and processed in the hidden layers.
The BNNJM learns a simple binary classifier,
given the context and target words, therefore it
can be trained by MLE very efficiently. “Incor-
rect” target words for the BNNJM can be gen-
erated in the same way as NCE generates noise
2094
for the NNJM. We present a novel noise distribu-
tion based on translation probabilities to train the
NNJM and the BNNJM efficiently.
2 Neural Network Joint Model
Let T = t
|T |
1
be a translation of S = s
|S|
1
. The
NNJM (Devlin et al., 2014) defines the following
probability,
P (T |S) =
?
|T |
i=1
P
(
t
i
|s
a
i
+(m?1)/2
a
i
?(m?1)/2
, t
i?1
i?n+1
)
(1)
where target word t
i
is affiliated with source word
s
a
i
. Affiliation a
i
is derived from the word align-
ments using heuristics
1
. To estimate these prob-
abilities, the NNJM uses m source context words
and n? 1 target history words as input to a neural
network and performs estimation of unnormalized
probabilities p (t
i
|C) before normalizing over all
words in the target vocabulary V ,
P (t
i
|C) =
p(t
i
|C)
Z(C)
Z (C) =
?
t
i
?
?V
p (t
i
?
|C)
(2)
where C stands for source and target context
words as in Equation 1.
The NNJM can be trained on a word-aligned
parallel corpus using standard MLE, but the cost
of normalizing over the entire vocabulary to calcu-
late the denominator in Equation 2 is quite large.
Devlin et al. (2014)’s self-normalization technique
can avoid normalization cost during decoding, but
not during training.
NCE can be used to train NNLM-style models
(Vaswani et al., 2013) to reduce training times.
NCE creates a noise distribution q (t
i
), selects k
noise samples t
i1
, ..., t
ik
for each t
i
and introduces
a random variable v which is 1 for training exam-
ples and 0 for noise samples,
P (v = 1, t
i
|C) =
1
1+k
·
p(t
i
|C)
Z(C)
P (v = 0, t
i
|C) =
k
1+k
· q (t
i
) .
NCE trains the model to distinguish training
data from noise by maximize the conditional like-
lihood,
L = logP (v = 1|C, t
i
) +
k
?
j=1
logP (v = 0|C, t
ik
).
The normalization cost can be avoided by using
p (t
i
|C) as an approximation of P (t
i
|C).
2
1
If t
i
aligns to exactly one source word, a
i
is the index of
this source word; If t
i
aligns to multiple source words, a
i
is
the index of the aligned word in the middle; If t
i
is unaligned,
they inherit its affiliation from the closest aligned word.
2
The theoretical properties of self-normalization tech-
niques, including NCE and Devlin et al. (2014)’s method,
are investigated by Andreas and Klein (2015).
3 Binarized NNJM
In this paper, we propose a new framework of the
binarized NNJM (BNNJM), which is similar to
the NNJM but learns not to predict the next word
given the context, but solves a binary classifica-
tion problem by adding a variable v ? {0, 1} that
stands for whether the current target word t
i
is cor-
rectly/wrongly produced in terms of source con-
text words s
a
i
+(m?1)/2
a
i
?(m?1)/2
and target history words
t
i?1
i?n+1
,
P
(
v|s
a
i
+(m?1)/2
a
i
?(m?1)/2
, t
i?1
i?n+1
, t
i
)
.
The BNNJM is learned by a feed-
forward neural network with m + n inputs
{
s
a
i
+(m?1)/2
a
i
?(m?1)/2
, t
i?1
i?n+1
, t
i
}
and two outputs for
v = 1/0.
Because the BNNJM uses the current target
word as input, the information about the current
target word can be combined with the context
word information and processed in the hidden lay-
ers. Thus, the hidden layers can be used to learn
the difference between correct target words and
noise in the BNNJM, while in the NNJM the hid-
den layers just contain information about context
words and only the output layer can be used to dis-
criminate between the training data and noise, giv-
ing the BNNJM more power to learn this classifi-
cation problem.
We can use the BNNJM probability in transla-
tion as an approximation for the NNJM as below,
P
(
t
i
|s
a
i
+(m?1)/2
a
i
?(m?1)/2
, t
i?1
i?n+1
)
? P
(
v = 1|s
a
i
+(m?1)/2
a
i
?(m?1)/2
, t
i?1
i?n+1
, t
i
)
.
As a binary classifier, the gradient for a sin-
gle example in the BNNJM can be calculated
efficiently by MLE without it being necessary
to calculate the softmax over the full vocabu-
lary. On the other hand, we need to create
“positive” and “negative” examples for the clas-
sifier. Positive examples can be extracted di-
rectly from the word-aligned parallel corpus as
?
s
a
i
+(m?1)/2
a
i
?(m?1)/2
, t
i?1
i?n+1
, t
i
?
; Negative examples can
be generated for each positive example in the
same way that NCE generates noise data as
?
s
a
i
+(m?1)/2
a
i
?(m?1)/2
, t
i?1
i?n+1
, t
i
?
?
, where t
i
?
? V \ {t
i
}.
4 Noise Sampling
4.1 Unigram Noise
Vaswani et al. (2013) adopted the unigram proba-
bility distribution (UPD) to sample noise for train-
2095
I will for someonearrange take youto round
? ? ? ??? ???
Figure 2: A parallel sentence pair.
ing NNLMs with NCE,
q (t
i
?
) =
occur(t
i
?
)
?
t
i
??
?V
occur(t
i
??
)
where occur (t
i
?
) stands for how many times t
i
?
occurs in the training corpus.
4.2 Translation Model Noise
In this paper, we propose a noise distribution spe-
cialized for translation models, such as the NNJM
or BNNJM.
Figure 2 gives a Chinese-to-English parallel
sentence pair with word alignments to demon-
strate the intuition behind our method. Focusing
on s
a
i
=“??”, this is translated into t
i
=“ar-
range”. For this positive example, UPD is allowed
to sample any arbitrary noise, such as t
i
?
= “ba-
nana”. However, in this case, noise t
i
?
= “banana”
is not useful for model training, as constraints on
possible translations given by the phrase table en-
sure that “??” will never be translated into “ba-
nana”. On the other hand, noise t
i
?
= “arranges”
and “arrangement” are both possible translations
of “??” and therefore useful training data, that
we would like our model to penalize.
Based on this intuition, we propose the use
of another noise distribution that only uses t
i
?
that are possible translations of s
a
i
, i.e., t
i
?
?
U (s
a
i
) \ {t
i
}, where U (s
a
i
) contains all target
words aligned to s
a
i
in the parallel corpus.
Because U (s
a
i
) may be quite large and con-
tain many wrong translations caused by wrong
alignments, “banana” may actually be included
in U (“??”). To mitigate the effect of un-
common examples, we use a translation proba-
bility distribution (TPD) to sample noise t
i
?
from
U (s
a
i
) \ {t
i
} as follows,
q (t
i
?
|s
a
i
) =
align
(
s
a
i
,t
i
?
)
?
t
i
??
?U
(
s
a
i
)
align
(
s
a
i
,t
i
??
)
where align (s
a
i
, t
i
?
) is how many times t
i
?
is
aligned to s
a
i
in the parallel corpus.
Note that t
i
could be unaligned, in which case
we assume that it is aligned to a special null word.
Noise for unaligned words is sampled according to
the TPD of the null word. If several target/source
words are aligned to one source/target word, we
choose to combine these target/source words as a
new target/source word.
3
5 Experiments
5.1 Setting
We evaluated the effectiveness of the proposed ap-
proach for Chinese-to-English (CE), Japanese-to-
English (JE) and French-to-English (FE) transla-
tion tasks. The datasets officially provided for the
patent machine translation task at NTCIR-9 (Goto
et al., 2011) were used for the CE and JE tasks.
The development and test sets were both provided
for the CE task while only the test set was provided
for the JE task. Therefore, we used the sentences
from the NTCIR-8 JE test set as the development
set. Word segmentation was done by BaseSeg
(Zhao et al., 2006) for Chinese and Mecab
4
for
Japanese. For the FE language pair, we used stan-
dard data for the WMT 2014 translation task. The
training sets for CE, JE and FE tasks contain 1M,
3M and 2M sentence pairs, respectively.
For each translation task, a recent version of
Moses HPB decoder (Koehn et al., 2007) with the
training scripts was used as the baseline (Base).
We used the default parameters for Moses, and
a 5-gram language model was trained on the tar-
get side of the training corpus using the IRSTLM
Toolkit
5
with improved Kneser-Ney smoothing.
Feature weights were tuned by MERT (Och,
2003).
The word-aligned training set was used to learn
the NNJM and the BNNJM.
6
For both NNJM and
BNNJM, we set m = 7 and n = 5. The NNJM
was trained by NCE using UPD and TPD as noise
distributions. The BNNJM was trained by stan-
dard MLE using UPD and TPD to generate nega-
tive examples.
The number of noise samples for NCE was set
to be 100. For the BNNJM, we used only one neg-
ative example for each positive example in each
training epoch, as the BNNJM needs to calculate
3
The processing for multiple alignments helps sample
more useful negative examples for TPD, and had little ef-
fect on the translation performance when UPD was used as
the noise distribution for the NNJM and the BNNJM in our
preliminary experiments.
4
http://sourceforge.net/projects/mecab/files/
5
http://hlt.fbk.eu/en/irstlm
6
Both the NNJM and the BNNJM had one hidden layer,
100 hidden nodes, input embedding dimension 50, output
embedding dimension 50. A small set of training data was
used as validation data. The training process was stopped
when validation likelihood stopped increasing.
2096
CE JE FE
E T E T E T
NNJM
UPD 20
22
19
49
20
28
TPD 4 6 4
BNNJM
UPD 14
16
12
34
11
22
TPD 11 9 9
Table 1: Epochs (E) and time (T) in minutes per
epoch for each task.
CE JE FE
Base 32.95 30.13 24.56
NNJM
UPD 34.36+ 31.30+ 24.68
TPD 34.60+ 31.50+ 24.80
BNNJM
UPD 32.89 30.04 24.50
TPD 35.05+* 31.42+ 25.84+*
Table 2: Translation results. The symbol + and *
represent significant differences at the p < 0.01
level against Base and NNJM+UPD, respectively.
Significance tests were conducted using bootstrap
resampling (Koehn, 2004).
the whole neural network (not just the output layer
like the NNJM) for each noise sample and thus
noise computation is more expensive. However,
for different epochs, we resampled the negative
example for each positive example, so the BNNJM
can make use of different negative examples.
5.2 Results and Discussion
Table 1 shows how many epochs these two models
needed and the training time for each epoch on a
10-core 3.47GHz Xeon X5690 machine.
7
Trans-
lation results are shown in Table 2.
We can see that using TPD instead of UPD
as a noise distribution for the NNJM trained by
NCE can speed up the training process signifi-
cantly, with a small improvement in performance.
But for the BNNJM, using different noise distribu-
tions affects translation performance significantly.
The BNNJM with UPD does not improve over
the baseline system, likely due to the small num-
ber of noise samples used in training the BNNJM,
while the BNNJM with TPD achieves good per-
formance, even better than the NNJM with TPD
on the Chinese-to-English and French-to-English
translation tasks.
From Table 2, the NNJM does not improve
translation performance significantly on the FE
task. Note that the baseline BLEU for the FE
7
The decoding time for the NNJM and the BNNJM were
similar, since the NNJM trained by NCE uses p (t
i
|C) as
an approximation of P (t
i
|C) without normalization and the
BNNJM only needs to be normalized over two output neu-
rons.
S: ?(this) ??(movement) ??(continued) ?(until)
???(parasite) ?(by) ?(two) ? ?(tongues) ? 21
??(each other) ??(contact) ?(where) ? ?(point)
??(touched)?
R: this movement is continued until the parasite is
touched by the point where the two tongues 21 contact
each other .
T
1
: the mobile continues to the parasite from the two
tongue 21 contacts the points of contact with each other .
T
2
: this movement is continued until the parasite by two
tongue 21 contact points of contact with each other .
Table 3: Translation examples. Here, S: source;
R: reference; T
1
uses NNJM; T
2
uses BNNJM.
NNJM BNNJM
?? >the 1.681 -0.126
??? >mobile -4.506 -3.758
??? >continues -1.550 -0.130
?? >to 2.510 -0.220
SUM -1.865 -4.236
?? >this -2.414 -0.649
??? >movement -1.527 -0.200
null? >is 0.006 -0.055
??? >continued -0.292 -0.249
?? >until -6.846 -0.186
SUM -11.075 -1.341
Table 4: Scores for different translations.
task is lower than CE and JE tasks, indicating that
learning is harder for the FE task than CE and JE
tasks. The validation perplexities of the NNJM
with UPD for CE, JE and FE tasks are 4.03, 3.49
and 8.37. Despite these difficult learning circum-
stances and lack of large gains for the NNJM, the
BNNJM improves translations significantly for the
FE task, suggesting that the BNNJM is more ro-
bust to difficult translation tasks that are hard for
the NNJM.
Table 3 gives Chinese-to-English translation ex-
amples to demonstrate how the BNNJM (with
TPD) helps to improve translations over the
NNJM (with TPD). In this case, the BNNJM helps
to translate the phrase “? ?? ?? ?” bet-
ter. Table 4 gives translation scores for these two
translations calculated by the NNJM and the BN-
NJM. Context words are used for predictions but
not shown in the table.
As can be seen, the BNNJM prefers T
2
while
the NNJM prefers T
1
. Among these predictions,
the NNJM and the BNNJM predict the translation
for “?” most differently. The NNJM clearly pre-
dicts that in this case “?” should be translated into
“to” more than “until”, likely because this exam-
ple rarely occurs in the training corpus. However,
the BNNJM prefers “until” more than “to”, which
2097
demonstrates the BNNJM’s robustness to less fre-
quent examples.
5.3 Analysis for JE Translation Results
Finally, we examine the translation results to ex-
plore why the BNNJM with TPD did not outper-
form the NNJM with TPD for the JE translation
task, as it did for the other translation tasks. We
found that using the BNNJM instead of the NNJM
on the JE task did improve translation quality sig-
nificantly for infrequent words, but not for fre-
quent words.
First, we describe how we estimate translation
quality for infrequent words. Suppose we have a
test set S, a reference set R and a translation set T
with I sentences,
S
i
(1 ? i ? I) , R
i
(1 ? i ? I) , T
i
(1 ? i ? I)
T
i
contains J individual words,
W
ij
?Words (T
i
)
T
o
(W
ij
) is how many times W
ij
occurs in T
i
and
R
o
(W
ij
) is how many times W
ij
occurs in R
i
.
The general 1-gram translation accuracy (Pap-
ineni et al., 2002) is calculated as,
P
g
=
I
?
i=1
J
?
j=1
min
(
T
o
(
W
ij
)
,R
o
(
W
ij
))
I
?
i=1
J
?
j=1
T
o
(
W
ij
)
This general 1-gram translation accuracy does not
distinguish word frequency.
We use a modified 1-gram translation accuracy
that weights infrequent words more heavily,
P
c
=
I
?
i=1
J
?
j=1
min(T
o
(W
ij
),R
o
(W
ij
))·
1
Occur
(
W
ij
)
I
?
i=1
J
?
j=1
T
o
(W
ij
)
where Occur (W
ij
) is how many times W
ij
oc-
curs in the whole reference set. Note P
c
will not
be 1 even in the case of completely accurate trans-
lations, but it can approximately reflect infrequent
word translation accuracy, since correct frequent
word translations contribute less to P
c
.
Table 5 shows P
g
and P
c
for different transla-
tion tasks. It can be seen that the BNNJM im-
proves infrequent word translation quality simi-
larly for all translation tasks, but improves gen-
eral translation quality less for the JE task than the
other translation tasks. We conjecture that the rea-
son why the BNNJM is less useful for frequent
word translations on the JE task is the fact that
the JE parallel corpus has less accurate function
word alignments than other language pairs, as the
CE JE FE
P
g
P
c
P
g
P
c
P
g
P
c
NNJM 70.3 5.79 68.2 4.15 61.2 6.70
BNNJM 70.9 5.97 68.4 4.30 61.7 6.86
Imp. (%) 0.85 3.1 0.29 3.6 0.81 2.4
Table 5: 1-gram precisions and improvements.
grammatical features of Japanese and English are
quite different.
8
Wrong function word alignments
will make noise sampling less effective and there-
fore lower the BNNJM performance for function
word translations. Although wrong word align-
ments will also make noise sampling less effec-
tive for the NNJM, the BNNJM only uses one
noise sample for each positive example, so wrong
word alignments affect the BNNJM more than the
NNJM.
6 Related Work
Xu et al. (2011) proposed a method to use binary
classifiers to learn NNLMs. But they also used
the current target word in the output, similarly to
NCE. The BNNJM uses the current target word as
input, so the information about the current target
word can be combined with the context word in-
formation and processed in hidden layers.
Mauser et al. (2009) presented discriminative
lexicon models to predict target words. They
train a separate classifier for each target word, as
these lexicon models use discrete representations
of words and different classifiers do not share fea-
tures. In contrast, the BNNJM uses real-valued
vector representations of words and shares fea-
tures, so we train one classifier and can use the
similarity information between words.
7 Conclusion
This paper proposes an alternative to the NNJM,
the BNNJM, which learns a binary classifier that
takes both the context and target words as input
and combines all useful information in the hidden
layers. We also present a novel noise distribution
based on translation probabilities to train the BN-
NJM efficiently. With the improved noise sam-
pling method, the BNNJM can achieve compara-
ble performance with the NNJM and even improve
the translation results over the NNJM on Chinese-
to-English and French-to-English translations.
8
Infrequent words are usually content words and frequent
words are usually function words.
2098
References
Jacob Andreas and Dan Klein. 2015. When and why
are log-linear models self-normalizing? In Proceed-
ings of the 2015 Conference of the North Ameri-
can Chapter of the Association for Computational
Linguistics: Human Language Technologies, pages
244–249.
Michael Auli, Michel Galley, Chris Quirk, and Geof-
frey Zweig. 2013. Joint language and translation
modeling with recurrent neural networks. In Pro-
ceedings of the 2013 Conference on Empirical Meth-
ods in Natural Language Processing, pages 1044–
1054.
Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Ben-
gio. 2015. Neural machine translation by jointly
learning to align and translate. In International Con-
ference on Learning Representations.
Jacob Devlin, Rabih Zbib, Zhongqiang Huang, Thomas
Lamar, Richard Schwartz, and John Makhoul. 2014.
Fast and robust neural network joint models for sta-
tistical machine translation. In Proceedings of the
52nd Annual Meeting of the Association for Compu-
tational Linguistics (Volume 1: Long Papers), pages
1370–1380.
Isao Goto, Bin Lu, Ka Po Chow, Eiichiro Sumita, and
Benjamin K Tsou. 2011. Overview of the patent
machine translation task at the NTCIR-9 workshop.
In Proceedings of The 9th NII Test Collection for IR
Systems Workshop Meeting, pages 559–578.
Yuening Hu, Michael Auli, Qin Gao, and Jianfeng Gao.
2014. Minimum translation modeling with recurrent
neural networks. In Proceedings of the 14th Confer-
ence of the European Chapter of the Association for
Computational Linguistics, pages 20–29.
Philipp Koehn, Hieu Hoang, Alexandra Birch, Chris
Callison-Burch, Marcello Federico, Nicola Bertoldi,
Brooke Cowan, Wade Shen, Christine Moran,
Richard Zens, Chris Dyer, Ondrej Bojar, Alexan-
dra Constantin, and Evan Herbst. 2007. Moses:
Open source toolkit for statistical machine transla-
tion. In Proceedings of the 45th Annual Meeting of
the Association for Computational Linguistics Com-
panion Volume Proceedings of the Demo and Poster
Sessions, pages 177–180.
Philipp Koehn. 2004. Statistical significance tests for
machine translation evaluation. In Proceedings of
the 2004 Conference on Empirical Methods in Nat-
ural Language Processing, pages 388–395.
Arne Mauser, Sa?sa Hasan, and Hermann Ney. 2009.
Extending statistical machine translation with dis-
criminative and trigger-based lexicon models. In
Proceedings of the 2009 Conference on Empirical
Methods in Natural Language Processing, pages
210–218.
Franz Josef Och. 2003. Minimum error rate training
in statistical machine translation. In Proceedings of
the 41st Annual Meeting of the Association for Com-
putational Linguistics, pages 160–167.
Kishore Papineni, Salim Roukos, Todd Ward, and Wei-
Jing Zhu. 2002. Bleu: a method for automatic
evaluation of machine translation. In Proceedings
of 40th Annual Meeting of the Association for Com-
putational Linguistics, pages 311–318.
Holger Schwenk. 2012. Continuous space translation
models for phrase-based statistical machine transla-
tion. In Proceedings of International Conference on
Computational Linguistics : Posters, pages 1071–
1080.
Martin Sundermeyer, Tamer Alkhouli, Joern Wuebker,
and Hermann Ney. 2014. Translation modeling
with bidirectional recurrent neural networks. In Pro-
ceedings of the 2014 Conference on Empirical Meth-
ods in Natural Language Processing (EMNLP),
pages 14–25.
Ilya Sutskever, Oriol Vinyals, and Quoc VV Le. 2014.
Sequence to sequence learning with neural net-
works. In Advances in neural information process-
ing systems, pages 3104–3112.
Ashish Vaswani, Yinggong Zhao, Victoria Fossum,
and David Chiang. 2013. Decoding with large-
scale neural language models improves translation.
In Proceedings of the 2013 Conference on Empiri-
cal Methods in Natural Language Processing, pages
1387–1392.
Puyang Xu, Asela Gunawardana, and Sanjeev Khudan-
pur. 2011. Efficient subsampling for training com-
plex language models. In Proceedings of the 2011
Conference on Empirical Methods in Natural Lan-
guage Processing, pages 1128–1136.
Hai Zhao, Chang-Ning Huang, and Mu Li. 2006. An
improved Chinese word segmentation system with
conditional random field. In Proceedings of the Fifth
SIGHAN Workshop on Chinese Language Process-
ing, pages 162–165.
2099
