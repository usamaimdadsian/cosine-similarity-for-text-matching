Proceedings of the 2014 Conference on Empirical Methods in Natural Language Processing (EMNLP), pages 2061–2069,
October 25-29, 2014, Doha, Qatar.
c©2014 Association for Computational Linguistics
Recursive Deep Models for Discourse Parsing
Jiwei Li
1
, Rumeng Li
2
and Eduard Hovy
3
1
Computer Science Department, Stanford University, Stanford, CA 94305, USA
2
School of EECS, Peking University, Beijing 100871, P.R. China
3
Language Technology Institute, Carnegie Mellon University, Pittsburgh, PA 15213, USA
jiweil@stanford.edu alicerumeng@foxmail.com ehovy@andrew.cmu.edu
Abstract
Text-level discourse parsing remains a
challenge: most approaches employ fea-
tures that fail to capture the intentional, se-
mantic, and syntactic aspects that govern
discourse coherence. In this paper, we pro-
pose a recursive model for discourse pars-
ing that jointly models distributed repre-
sentations for clauses, sentences, and en-
tire discourses. The learned representa-
tions can to some extent learn the seman-
tic and intentional import of words and
larger discourse units automatically,. The
proposed framework obtains comparable
performance regarding standard discours-
ing parsing evaluations when compared
against current state-of-art systems.
1 Introduction
In a coherent text, units (clauses, sentences, and
larger multi-clause groupings) are tightly con-
nected semantically, syntactically, and logically.
Mann and Thompson (1988) define a text to be
coherent when it is possible to describe clearly
the role that each discourse unit (at any level of
grouping) plays with respect to the whole. In a
coherent text, no unit is completely isolated. Dis-
course parsing tries to identify how the units are
connected with each other and thereby uncover the
hierarchical structure of the text, from which mul-
tiple NLP tasks can benefit, including text sum-
marization (Louis et al., 2010), sentence compres-
sion (Sporleder and Lapata, 2005) or question-
answering (Verberne et al., 2007).
Despite recent progress in automatic discourse
segmentation and sentence-level parsing (e.g.,
(Fisher and Roark, 2007; Joty et al., 2012; Sori-
cut and Marcu, 2003), document-level discourse
parsing remains a significant challenge. Recent
attempts (e.g., (Hernault et al., 2010b; Feng and
Hirst, 2012; Joty et al., 2013)) are still consid-
erably inferior when compared to human gold-
standard discourse analysis. The challenge stems
from the fact that compared with sentence-level
dependency parsing, the set of relations between
discourse units is less straightforward to define.
Because there are no clause-level ‘parts of dis-
course’ analogous to word-level parts of speech,
there is no discourse-level grammar analogous to
sentence-level grammar. To understand how dis-
course units are connected, one has to understand
the communicative function of each unit, and the
role it plays within the context that encapsulates it,
taken recursively all the way up for the entire text.
Manually developed features relating to words and
other syntax-related cues, used in most of the re-
cent prevailing approaches (e.g., (Feng and Hirst,
2012; Hernault et al., 2010b)), are insufficient for
capturing such nested intentionality.
Recently, deep learning architectures have been
applied to various natural language processing
tasks (for details see Section 2) and have shown
the advantages to capture the relevant semantic
and syntactic aspects of units in context. As word
distributions are composed to form the meanings
of clauses, the goal is to extend distributed clause-
level representations to the single- and multi-
sentence (discourse) levels, and produce the hier-
archical structure of entire texts.
Inspired by this idea, we introduce in this pa-
per a deep learning approach for discourse pars-
ing. The proposed parsing algorithm relies on
a recursive neural network to decide (1) whether
two discourse units are connected and if so (2)
by what relation they are connected. Concretely,
the parsing algorithm takes as input a document of
any length, and first obtains the distributed repre-
sentation for each of its sentences using recursive
convolution based on the sentence parse tree. It
then proceeds bottom-up, applying a binary clas-
sifier to determine the probability of two adjacent
2061
discourse units being merged to form a new sub-
tree followed by a multi-class classifier to select
the appropriate discourse relation label, and cal-
culates the distributed representation for the sub-
tree so formed, gradually unifying subtrees un-
til a single overall tree spans the entire sentence.
The compositional distributed representation en-
ables the parser to make accurate parsing decisions
and capture relations between different sentences
and units. The binary and multi-class classifiers,
along with parameters involved in convolution, are
jointly trained from a collection of gold-standard
discourse structures.
The rest of this paper is organized as follows.
We present related work in Section 2 and de-
scribe the RST Discourse Treebank in Section 3.
The sentence convolution approach is illustrated in
Section 4 and the discourse parser model in Sec-
tion 5. We report experimental results in Section 6
and conclude in Section 7.
2 Related Work
2.1 Discourse Analysis and Parsing
The basis of discourse structure lies in the recog-
nition that discourse units (minimally, clauses) are
related to one another in principled ways, and that
the juxtaposition of two units creates a joint mean-
ing larger than either unit’s meaning alone. In a
coherent text this juxtaposition is never random,
but serves the speaker’s communicative goals.
Considerable work on linguistic and computa-
tional discourse processing in the 1970s and 80s
led to the development of several proposals for re-
lations that combine units; for a compilation see
(Hovy and Maier, 1997). Of these the most influ-
ential is Rhetorical Structure Theory RST (Mann
and Thompson, 1988) that defines about 25 rela-
tions, each containing semantic constraints on its
component parts plus a description of the overall
functional/semantic effect produced as a unit when
the parts have been appropriately connected in the
text. For example, the SOLUTIONHOOD relation
connects one unit describing a problem situation
with another describing its solution, using phrases
such as “the answer is”; in successful communi-
cation the reader will understand that a problem is
described and its solution is given.
Since there is no syntactic definition of a prob-
lem or solution (they can each be stated in a sin-
gle clause, a paragraph, or an entire text), one has
to characterize discourse units by their commu-
nicative (rhetorical) function. The functions are
reflected in text as signals of the author’s inten-
tions, and take various forms (including expres-
sions such as “therefore”, “for example”, “the an-
swer is”, and so on; patterns of tense or pronoun
usage; syntactic forms; etc.). The signals govern
discourse blocks ranging from a clause to an en-
tire text , each one associated with some discourse
relation.
In order to build a text’s hierarchical structure,
a discourse parser needs to recognize these signals
and use them to appropriately compose the rela-
tionship and nesting. Early approaches (Marcu,
2000a; LeThanh et al., 2004) rely mainly on overt
discourse markers (or cue words) and use hand-
coded rules to build text structure trees, bottom-up
from clauses to sentences to paragraphs. . . . Since
a hierarchical discourse tree structure is analo-
gous to a constituency based syntactic tree, mod-
ern research explored syntactic parsing techniques
(e.g., CKY) for discourse parsing based on mul-
tiple text-level or sentence-level features (Soricut
and Marcu, 2003; Reitter, 2003; Baldridge and
Lascarides, 2005; Subba and Di Eugenio, 2009;
Lin et al., 2009; Luong et al., 2014).
A recent prevailing idea for discourse parsing
is to train two classifiers, namely a binary struc-
ture classifier for determining whether two adja-
cent text units should be merged to form a new
subtree, followed by a multi-class relation classi-
fier for determining which discourse relation label
should be assigned to the new subtree. The idea is
proposed by Hernault and his colleagues (Duverle
and Prendinger, 2009; Hernault et al., 2010a) and
followed by other work using more sophisticated
features (Feng and Hirst, 2012; Hernault et al.,
2010b). Current state-of-art performance for re-
lation identification is achieved by the recent rep-
resentation learning approach proposed by (Ji and
Eisenstein, 2014). The proposed framework pre-
sented in this paper is similar to (Ji and Eisenstein,
2014) for transforming the discourse units to the
abstract representations.
2.2 Recursive Deep Learning
Recursive neural networks constitute one type of
deep learning frameworks which was first pro-
posed in (Goller and Kuchler, 1996). The recur-
sive framework relies and operates on structured
inputs (e.g., a parse tree) and computes the rep-
resentation for each parent based on its children
2062
iteratively in a bottom-up fashion. A series of vari-
ations of RNN has been proposed to tailor differ-
ent task-specific requirements, including Matrix-
Vector RNN (Socher et al., 2012) that represents
every word as both a vector and a matrix, or Recur-
sive Neural Tensor Network (Socher et al., 2013)
that allows the model to have greater interactions
between the input vectors. Many tasks have ben-
efited from the recursive framework, including
parsing (Socher et al., 2011b), sentiment analysis
(Socher et al., 2013), textual entailment (Bowman,
2013), segmentation (Wang and Mansur, 2013;
Houfeng et al., 2013), and paraphrase detection
(Socher et al., 2011a).
3 The RST Discourse Treebank
There are today two primary alternative discourse
treebanks suitable for training data: the Rhetor-
ical Structure Theory Discourse Treebank RST-
DT (Carlson et al., 2003) and the Penn Discourse
Treebank (Prasad et al., 2008). In this paper, we
select the former. In RST (Mann and Thompson,
1988), a coherent context or a document is repre-
sented as a hierarchical tree structure, the leaves
of which are clause-sized units called Elementary
Discourse Units (EDUs). Adjacent nodes (siblings
in the tree) are linked with discourse relations that
are either binary (hypotactic) or multi-child (parat-
actic). One child of each hypotactic relation is al-
ways more salient (called the NUCLEUS); its sib-
ling (the SATELLITE) is less salient compared and
may be omitted in summarization. Multi-nuclear
relations (e.g., CONJUNCTION) exhibit no distinc-
tion of salience between the units.
The RST Discourse Treebank contains 385 an-
notated documents (347 for training and 38 for
testing) from the Wall Street Journal. A total
of 110 fine-grained relations defined in (Marcu,
2000b) are used for tagging relations in RST-DT.
They are subtypes of 18 original high-level RST
categories. For fair comparison with existing sys-
tems, we use in this work the 18 coarse-grained re-
lation classes, which with nuclearity attached form
a set of 41 distinct relations. Non-binary relations
are converted into a cascade of right-branching bi-
nary relations.
Conventionally, discourse parsing in RST-DT
involves the following sub-tasks: (1) EDU seg-
mentation to segment the raw text into EDUs, (2)
tree-building. Since the segmentation task is es-
sentially clause delimitation and hence relatively
easy (with state-of-art accuracy at most 95%),
we focus on the latter problem. We assume that
the gold-standard EDU segmentations are already
given, as assumed in other past work (Feng and
Hirst, 2012).
4 EDU Model
In this section, we describe how we compute
the distributed representation for a given sentence
based on its parse tree structure and contained
words. Our implementation is based on (Socher
et al., 2013). As the details can easily be found
there, we omit them for brevity.
Let s denote any given sentence, comprised of a
sequence of tokens s = {w
1
, w
2
, ..., w
n
s
}, where
n
s
denotes the number of tokens in s. Each to-
ken w is associated with a specific vector embed-
ding e
w
= {e
1
w
, e
2
w
, ..., e
K
w
}, where K denotes the
dimension of the word embedding. We wish to
compute the vector representation h
s
for current
sentence, where h
s
= {h
1
s
, h
2
s
, ..., h
K
s
}.
Parse trees are obtained using the Stanford
Parser
1
, and each clause is treated as an EDU. For
a given parent p in the tree and its two children c
1
(associated with vector representation h
c
1
) and c
2
(associated with vector representation h
c
2
), stan-
dard recursive networks calculate the vector for
parent p as follows:
h
p
= f(W · [h
c
1
, h
c
2
] + b) (1)
where [h
c
1
, h
c
2
] denotes the concatenating vector
for children representations h
c
1
and h
c
2
; W is a
K × 2K matrix and b is the 1 × K bias vector;
and f(·) is the function tanh. Recursive neural
models compute parent vectors iteratively until the
root node’s representation is obtained, and use the
root embedding to represent the whole sentence.
5 Discourse Parsing
Since recent work (Feng and Hirst, 2012; Hernault
et al., 2010b) has demonstrated the advantage of
combining the binary structure classifier (deter-
mining whether two adjacent text units should be
merged to form a new subtree) with the multi-class
classifier (determining which discourse relation la-
bel to assign to the new subtree) over the older
single multi-class classifier with the additional la-
bel NO-REL, our approach follows the modern
1
http://nlp.stanford.edu/software/
lex-parser.shtml
2063
Figure 1: RST Discourse Tree Structure.
strategy but trains binary and multi-class classi-
fiers jointly based on the discourse structure tree.
Figure 2 illustrates the structure of a discourse
parse tree. Each node e in the tree is associated
with a distributed vector h
e
. e
1
, e
2
, e
3
and e
6
constitute the leaves of trees, the distributed vec-
tor representations of which are assumed to be al-
ready obtained from convolution in Section 4. Let
N
r
denote the number of relations and we have
N
r
= 41.
5.1 Binary (Structure) Classification
In this subsection, we train a binary (structure)
classifier, which aims to decide whether two EDUs
or spans should be merged during discourse tree
reconstruction.
Let t
binary
(e
i
, e
j
) be the binary valued variable
indicating whether e
i
and e
j
are related, or in other
words, whether a certain type of discourse rela-
tions holds between e
i
and e
j
. According to Fig-
ure 2, the following pairs constitute the training
data for binary classification:
t
binary
(e
1
, e
2
) = 1, t
binary
(e
3
, e
4
) = 1,
t
binary
(e
2
, e
3
) = 0, t
binary
(e
3
, e
6
) = 0,
t
binary
(e
5
, e
6
) = 1
To train the binary classifier, we adopt a three-
layer neural network structure, i.e., input layer,
hidden layer, and output layer. Let H = [h
e
i
, h
e
j
]
denote the concatenating vector for two spans e
i
and e
j
. We first project the concatenating vector
H to the hidden layer withN
binary
hidden neurons.
The hidden layer convolutes the input with non-
linear tanh function as follows:
L
binary
(e
i
,e
j
)
= f(G
binary
? [h
e
i
, h
e
j
] + b
binary
)
where G
binary
is an N
binary
? 2K convolution ma-
trix and b
binary
denotes the bias vector.
The output layer takes as input L
binary
(e
i
,e
j
)
and gen-
erates a scalar using the linear function U
binary
·
L
binary
(e
i
,e
j
)
+ b. A sigmod function is then adopted to
project the value to a [0,1] probability space. The
execution at the output layer can be summarized
as:
p[t
binary
(e
i
, e
j
) = 1] = g(U
binary
·L
binary
(e
i
,e
j
)
+b
?
binary
)
(2)
where U
binary
is an N
binary
× 1 vector and b
?
binary
denotes the bias. g(·) is the sigmod function.
5.2 Multi-class Relation Classification
If t
binary
(e
i
, e
j
) is determined to be 1, we next
use variable r(e
i
, e
j
) to denote the index of rela-
tion that holds between e
i
and e
j
. A multi-class
classifier is train based on a three-layer neural net-
work, in the similar way as binary classification in
Section 5.1. Concretely, a matrix G
Multi
and bias
vector b
Multi
are first adopted to convolute the con-
catenating node vectors to the hidden layer vector
L
multi
(e
i
,e
j
)
:
L
multi
(e
i
,e
j
)
= f(G
multi
? [h
e
i
, h
e
j
] + b
multi
) (3)
We then compute the posterior probability over
labels given the hidden layer vector L using the
softmax and obtain the N
r
dimensional probabil-
ity vector P
(e
1
,e
2
)
for each EDU pair as follows:
S
(e
i
,e
j
)
= U
multi
· L
multi
(e
i
,e
j
)
(4)
P
(e
1
,e
2
)
(i) =
exp(S
(e
1
,e
2
)
(i))
?
k
exp(S
(e
1
,e
2
)
)(k)
(5)
where U
multi
is the N
r
× 2K matrix. The i
th
ele-
ment in P
(e
1
,e
2
)
denotes the probability that i
t
h re-
lation holds between e
i
and e
j
. To note, binary and
multi-class classifiers are trained independently.
5.3 Distributed Vector for Spans
What is missing in the previous two subsections
are the distributed vectors for non-leaf nodes (i.e.,
e
4
and e
5
in Figure 1), which serve as structure and
relation classification. Again, we turn to recursive
deep learning network to obtain the distributed
vector for each node in the tree in a bottom-up
fashion.
Similar as for sentence parse-tree level compo-
sitionally, we extend a standard recursive neural
network by associating each type of relations r
with one specific K×2K convolution matrix W
r
.
2064
Figure 2: System Overview.
The representation for each node within the tree is
calculated based on the representations for its chil-
dren in a bottom-up fashion. Concretely, for a par-
ent node p, given the distributed representation h
e
i
for left child, h
e
j
for right child, and the relation
r(e
1
, e
2
), its distributed vector h
p
is calculated as
follows:
h
p
= f(W
r(e
1
,e
2
)
· [h
e
i
, h
e
j
] + b
r(e
1
,e
2
)
) (6)
where b
r(e
1
,e
2
)
is the bias vector and f(·) is the
non-linear tanh function.
To note, our approach does not make any dis-
tinction between within-sentence text spans and
cross-sentence text spans, different from (Feng
and Hirst, 2012; Joty et al., 2013)
5.4 Cost Function
The parameters to optimize include sentence-
level convolution parameters [W , b],
discourse-level convolution parameters
[{W
r
}, {b
r
}], binary classification parameters
[G
binary
, b
binary
, U
binary
, b
?
binary
], and multi-class
parameters [G
multi
, b
multi
, U
multi
].
Suppose we have M
1
binary training samples
and M
2
multi-class training examples (M
2
equals
the number of positive examples in M
1
, which
is also the non-leaf nodes within the training dis-
course trees). The cost function for our framework
with regularization on the training set is given by:
J(?
binary
) =
?
(e
i
,e
j
)?{binary}
J
binary
(e
i
, e
j
)
+Q
binary
·
?
???
binary
?
2
(7)
J(?
multi
) =
?
(e
i
,e
j
)?{multi}
J
multi
(e
i
, e
j
)
+Q
multi
·
?
???
multi
?
2
(8)
where
J
binary
(e
i
, e
j
) = ?t(e
i
, e
j
) log p(t(e
i
, e
j
) = 1)
? (1? t(e
i
, e
j
)) log[1? p(t(e
i
, e
j
) = 1)]
J
multi
(e
i
, e
j
) = ? log[p(r(e
i
, e
j
) = r)]
(9)
5.5 Backward Propagation
The derivative for parameters involved is com-
puted through backward propagation. Here we
illustrate how we compute the derivative of
J
multi
(e
i
, e
j
) with respect to different parameters.
For each pair of nodes (e
i
, e
j
) ? multi, we
associate it with a N
r
dimensional binary vector
R(e
i
, e
j
), which denotes the ground truth vector
with a 1 at the correct label r(e
i
, e
j
) and all other
entries 0. Integrating softmax error vector, for any
parameter ?, the derivative of J
multi
(e
i
, e
j
) with re-
spect to ? is given by:
?J
multi
(e
i
, e
j
)
??
= [P
(e
i
,e
j
)
?R
(e
i
,e
j
)
]?
?S
(e
i
,e
j
)
??
(10)
where ? denotes the Hadamard product between
the two vectors. Each training pair recursively
backpropagates its error to some node in the dis-
course tree through [{W
r
}, {b
r
}], and then to
nodes in sentence parse tree through [W, b], and
the derivatives can be obtained according to stan-
dard backpropagation (Goller and Kuchler, 1996;
Socher et al., 2010).
2065
5.6 Additional Features
When determining the structure/multi relation be-
tween individual EDUs, additional features are
also considered, the usefulness of which has been
illustrated in a bunch of existing work (Feng and
Hirst, 2012; Hernault et al., 2010b; Joty et al.,
2012). We consider the following simple text-level
features:
• Tokens at the beginning and end of the EDUs.
• POS at the beginning and end of the EDUs.
• Whether two EDUs are in the same sentence.
5.7 Optimization
We use the diagonal variant of AdaGrad (Duchi et
al., 2011) with minibatches, which is widely ap-
plied in deep learning literature (e.g.,(Socher et
al., 2011a; Pei et al., 2014)). The learning rate
in AdaGrad is adapted differently for different pa-
rameters at different steps. Concretely, let g
i
?
de-
note the subgradient at time step t for parameter
?
i
obtained from backpropagation, the parameter
update at time step t is given by:
?
?
= ?
??1
?
?
?
?
t=0
?
g
i2
?
g
i
?
(11)
where ? denotes the learning rate and is set to 0.01
in our approach.
Elements in {W
r
}, W , G
binary
, G
multi
, U
binary
,
U
multi
are initialized by randomly drawing from
the uniform distribution [?, ], where  is calcu-
lated as suggested in (Collobert et al., 2011). All
bias vectors are initialized with 0. Word embed-
dings {e} are borrowed from Senna (Collobert et
al., 2011; Collobert, 2011).
5.8 Inference
For inference, the goal is to find the most proba-
ble discourse tree given the EDUs within the doc-
ument. Existing inference approach basically in-
clude the approach adopted in (Feng and Hirst,
2012; Hernault et al., 2010b) that merges the most
likely spans at each step and SPADE (Fisher and
Roark, 2007) that first finds the tree structure that
is globally optimal, then assigns the most probable
relations to the internal nodes.
In this paper, we implement a probabilistic
CKY-like bottom-up algorithm for computing the
most likely parse tree using dynamic program-
ming as are adopted in (Joty et al., 2012; Joty
et al., 2013; Jurafsky and Martin, 2000) for the
search of global optimum. For a document with
n EDUs, as different relations are characterized
with different compositions (thus leading to dif-
ferent vectors), we use a N
r
×n×n dynamic pro-
gramming table Pr, the cell Pr[r, i, j] of which
represents the span contained EDUs from i to j
and stores the probability that relation r holds be-
tween the two spans within i to j. Pr[r, i, j] is
computed as follows:
Pr[r, i, j] =max
r
1
,r
2
,k
Pr[r
1
, i, k] · Pr[r
2
, k, j]
×P (t
binary
(e
[i,k]
, e
[k,j]
) = 1)
×P (r(e
[i,k]
, e
[k,j]
) = 1)
(12)
At each merging step, a distributed vector for the
merged point is calculated according to Eq. 13 for
different relations. The CKY-like algorithms finds
the global optimal. To note, the worst-case run-
ning time of our inference algorithm is O(N
2
r
n
3
),
where n denotes the number of sentences within
the document, which is much slower than the
greedy search. In this work, for simplification, we
simplify the framework by maintaining the top 10
options at each step.
6 Experiments
A measure of the performance of the system is
realized by comparing the structure and labeling
of the RS-tree produced by our algorithm to gold-
standard annotations.
Standard evaluation of discourse parsing output
computes the ratio of the number of identical tree
constituents shared in the generated RS-trees and
the gold-standard trees against the total number
of constituents in the generated discourse trees
2
,
which is further divided to three matrices: Span
(on the blank tree structure), nuclearity (on the
tree structure with nuclearity indication), and rela-
tion (on the tree structure with rhetorical relation
indication but no nuclearity indication).
The nuclearity and relation decisions are made
based on the multi-class output labels from the
deep learning framework. As we do not consider
nuclearity when classifying different discourse re-
lations, the two labels attribute[N][S] and at-
tribute[S][N] made by multi-class classifier will
be treated as the same relation label ATTRIBUTE.
2
Conventionally, evaluation matrices involve precision,
recall and F-score in terms of the comparison between tree
structures. But these are the same when manual segmenta-
tion is used (Marcu, 2000b).
2066
Approach Span Nuclearity Relation
HILDA 75.3 60.0 46.8
Joty et al. 82.5 68.4 55.7
Feng and Hirst 85.7 71.0 58.2
Ji and Eisenstein 82.1 71.1 61.6
Unified (with feature) 82.0 70.0 57.1
Ours (no feature) 82.4 69.2 56.8
Ours (with feature) 84.0 70.8 58.6
human 88.7 77.7 65.7
Table 1: Performances for different approaches.
Performances for baselines are reprinted from
(Joty et al., 2013; Feng and Hirst, 2014; Ji and
Eisenstein, 2014).
Also, we do not train a separate classifier for NU-
CLEUS and SATELLITE identification. The nucle-
arity decision is made based on the relation type
produced by the multi-class classifier.
6.1 Parameter Tuning
The regularization parameter Q constitutes the
only parameter to tune in our framework. We tune
it on the 347 training documents. Concretely, we
employ a five-fold cross validation on the RST
dataset and tune Q on 5 different values: 0.01,
0.1, 0.5, 1.5, 2.5. The final model was tested on
the testing set after parameter tuning.
6.2 Baselines
We compare our model against the following
currently prevailing discourse parsing baselines:
HILDA A discourse parser based on support
vector machine classification introduced by Her-
nault et al. (Hernault et al., 2010b). HILDA uses
the binary and multi-class classifier to reconstruct
the tree structure in a greedy way, where the
most likely nodes are merged at each step. The
results for HILDA are obtained by running the
system with default settings on the same inputs
we provided to our system.
Joty et al The discourse parser introduced by
Joty et al. (Joty et al., 2013). It relies on CRF
and combines intra-sentential and multi-sentential
parsers in two different ways. Joty et al. adopt
the global optimal inference as in our work. We
reported the performance from their paper (Joty et
al., 2013).
Feng and Hirst The linear-time discourse
parser introduced in (Feng and Hirst, 2014) which
relies on two linear-chain CRFs to obtain a se-
quence of discourse constituents.
Ji and Eisenstein The shift-reduce discourse
parser introduced in (Ji and Eisenstein, 2014)
which parses document by relying on the dis-
tributed representations obtained from deep learn-
ing framework.
Additionally, we implemented a simplified ver-
sion of our model called unified where we use
a unified convolutional function with unified pa-
rameters [W
sen
, b
sen
] for span vector computation.
Concretely, for a parent node p, given the dis-
tributed representation h
e
i
for left child, h
e
j
for
right child, and the relation r(e
1
, e
2
), rather than
taking the inter relation between two children, its
distributed vector h
p
is calculated:
h
p
= f(W
sen
· [h
e
i
, h
e
j
] + b
sen
) (13)
6.3 Performance
Performances for different models approaches re-
ported in Table 1. And as we can observe, al-
though the proposed framework obtains compa-
rable result compared with existing state-of-state
performances regarding all evaluating parameters
for discourse parsing. Specifically, as for the three
measures, no system achieves top performance on
all three, though some systems outperform all oth-
ers for one of the measures. The proposed system
achieves high overall performance on all three, al-
though it does not achieve top score on any mea-
sure. The system gets a little bit performance
boost by considering text-level features illustrated
in Section 5.6. The simplified version of the orig-
inal model underperforms against the original ap-
proach due to lack of expressive power in convo-
lution. Performance plummets when different re-
lations are uniformly treated, which illustrates the
importance of taking into consideration different
types of relations in the span convolution proce-
dure.
7 Conclusion
In this paper, we describe an RST-style text-level
discourse parser based on a neural network model.
The incorporation of sentence-level distributed
vectors for discourse analysis obtains compara-
ble performance compared with current state-of-
art discourse parsing system.
Our future work will focus on extending
discourse-level distributed presentations to related
2067
tasks, such as implicit discourse relation identifi-
cation or dialogue analysis. Further, once the tree
structure for a document can be determined, the
vector for the entire document can be obtained
in bottom-up fashion, as in this paper. One can
now investigate whether the discourse parse tree
is useful for acquiring a single document-level
vector representation, which would benefit mul-
tiple tasks, such as document classification or
macro-sentiment analysis.
Acknowledgements
The authors want to thank Vanessa Wei Feng and
Shafiq Joty for helpful discussions regarding RST
dataset. We also want to thank Richard Socher,
Zhengyan He and Pradeep Dasigi for the clarifica-
tion of deep learning techniques.
References
Jason Baldridge and Alex Lascarides. 2005. Proba-
bilistic head-driven parsing for discourse structure.
In Proceedings of the Ninth Conference on Compu-
tational Natural Language Learning, pages 96–103.
Association for Computational Linguistics.
Samuel R Bowman. 2013. Can recursive neural tensor
networks learn logical reasoning? arXiv preprint
arXiv:1312.6192.
Lynn Carlson, Daniel Marcu, and Mary Ellen
Okurowski. 2003. Building a discourse-tagged cor-
pus in the framework of rhetorical structure theory.
Springer.
Ronan Collobert, Jason Weston, L´eon Bottou, Michael
Karlen, Koray Kavukcuoglu, and Pavel Kuksa.
2011. Natural language processing (almost) from
scratch. The Journal of Machine Learning Re-
search, 12:2493–2537.
Ronan Collobert. 2011. Deep learning for efficient dis-
criminative parsing. In International Conference on
Artificial Intelligence and Statistics, number EPFL-
CONF-192374.
John Duchi, Elad Hazan, and Yoram Singer. 2011.
Adaptive subgradient methods for online learning
and stochastic optimization. The Journal of Ma-
chine Learning Research, 12:2121–2159.
David A Duverle and Helmut Prendinger. 2009. A
novel discourse parser based on support vector ma-
chine classification. In Proceedings of the Joint
Conference of the 47th Annual Meeting of the ACL
and the 4th International Joint Conference on Natu-
ral Language Processing of the AFNLP: Volume 2-
Volume 2, pages 665–673. Association for Compu-
tational Linguistics.
Vanessa Wei Feng and Graeme Hirst. 2012. Text-
level discourse parsing with rich linguistic fea-
tures. In Proceedings of the 50th Annual Meeting
of the Association for Computational Linguistics:
Long Papers-Volume 1, pages 60–68. Association
for Computational Linguistics.
Vanessa Wei Feng and Graeme Hirst. 2014. A lin-
ear time bottom-up discourse parser with constraints
and post-editing. In ACL.
Seeger Fisher and Brian Roark. 2007. The utility of
parse-derived features for automatic discourse seg-
mentation. In ANNUAL MEETING-ASSOCIATION
FOR COMPUTATIONAL LINGUISTICS, vol-
ume 45, page 488.
Christoph Goller and Andreas Kuchler. 1996. Learn-
ing task-dependent distributed representations by
backpropagation through structure. In Neural Net-
works, 1996., IEEE International Conference on,
volume 1, pages 347–352. IEEE.
Hugo Hernault, Danushka Bollegala, and Mitsuru
Ishizuka. 2010a. A semi-supervised approach to
improve classification of infrequent discourse rela-
tions using feature vector extension. In Proceedings
of the 2010 Conference on Empirical Methods in
Natural Language Processing, pages 399–409. As-
sociation for Computational Linguistics.
Hugo Hernault, Helmut Prendinger, Mitsuru Ishizuka,
et al. 2010b. Hilda: a discourse parser using sup-
port vector machine classification. Dialogue & Dis-
course, 1(3).
Wang Houfeng, Longkai Zhang, and Ni Sun. 2013.
Improving chinese word segmentation on micro-
blog using rich punctuations.
Eduard H Hovy and Elisabeth Maier. 1997. Parsimo-
nious or profligate: How many and which discourse
structure relations. Discourse Processes.
Yangfeng Ji and Jacob Eisenstein. 2014. Representa-
tion learning for text-level discourse parsing.
Shafiq Joty, Giuseppe Carenini, and Raymond T
Ng. 2012. A novel discriminative framework for
sentence-level discourse analysis. In Proceedings
of the 2012 Joint Conference on Empirical Methods
in Natural Language Processing and Computational
Natural Language Learning, pages 904–915. Asso-
ciation for Computational Linguistics.
Shafiq Joty, Giuseppe Carenini, Raymond Ng, and
Yashar Mehdad. 2013. Combining intra-and multi-
sentential rhetorical parsing for document-level dis-
course analysis. In Proceedings of the 51st annual
meeting of the association for computational lin-
guistics (ACL), pages 486–496.
Dan Jurafsky and James H Martin. 2000. Speech &
Language Processing. Pearson Education India.
2068
Huong LeThanh, Geetha Abeysinghe, and Christian
Huyck. 2004. Generating discourse structures for
written texts. In Proceedings of the 20th inter-
national conference on Computational Linguistics,
page 329. Association for Computational Linguis-
tics.
Ziheng Lin, Min-Yen Kan, and Hwee Tou Ng. 2009.
Recognizing implicit discourse relations in the penn
discourse treebank. In Proceedings of the 2009 Con-
ference on Empirical Methods in Natural Language
Processing: Volume 1-Volume 1, pages 343–351.
Association for Computational Linguistics.
Annie Louis, Aravind Joshi, and Ani Nenkova. 2010.
Discourse indicators for content selection in summa-
rization. In Proceedings of the 11th Annual Meeting
of the Special Interest Group on Discourse and Di-
alogue, pages 147–156. Association for Computa-
tional Linguistics.
Minh-Thang Luong, Michael C Frank, and Mark John-
son. 2014. Parsing entire discourses as very long
strings: Capturing topic continuity in grounded lan-
guage learning.
William C Mann and Sandra A Thompson. 1988.
Rhetorical structure theory: Toward a functional the-
ory of text organization. Text, 8(3):243–281.
Daniel Marcu. 2000a. The rhetorical parsing of unre-
stricted texts: A surface-based approach. Computa-
tional Linguistics, 26(3):395–448.
Daniel Marcu. 2000b. The theory and practice of dis-
course parsing and summarization. MIT Press.
Wenzhe Pei, Tao Ge, and Chang Baobao. 2014. Max-
margin tensor neural network for chinese word seg-
mentation. In Proceedings of ACL.
Rashmi Prasad, Nikhil Dinesh, Alan Lee, Eleni Milt-
sakaki, Livio Robaldo, Aravind K Joshi, and Bon-
nie L Webber. 2008. The penn discourse treebank
2.0. In LREC. Citeseer.
David Reitter. 2003. Simple signals for complex
rhetorics: On rhetorical analysis with rich-feature
support vector models. In LDV Forum, volume 18,
pages 38–52.
Richard Socher, Christopher D Manning, and An-
drew Y Ng. 2010. Learning continuous phrase
representations and syntactic parsing with recursive
neural networks. In Proceedings of the NIPS-2010
Deep Learning and Unsupervised Feature Learning
Workshop, pages 1–9.
Richard Socher, Eric H Huang, Jeffrey Pennington,
Andrew Y Ng, and Christopher D Manning. 2011a.
Dynamic pooling and unfolding recursive autoen-
coders for paraphrase detection. In NIPS, vol-
ume 24, pages 801–809.
Richard Socher, Cliff C Lin, Chris Manning, and An-
drew Y Ng. 2011b. Parsing natural scenes and nat-
ural language with recursive neural networks. In
Proceedings of the 28th International Conference on
Machine Learning (ICML-11), pages 129–136.
Richard Socher, Brody Huval, Christopher D Manning,
and Andrew Y Ng. 2012. Semantic compositional-
ity through recursive matrix-vector spaces. In Pro-
ceedings of the 2012 Joint Conference on Empiri-
cal Methods in Natural Language Processing and
Computational Natural Language Learning, pages
1201–1211. Association for Computational Linguis-
tics.
Richard Socher, Alex Perelygin, Jean Y Wu, Jason
Chuang, Christopher D Manning, Andrew Y Ng,
and Christopher Potts. 2013. Recursive deep mod-
els for semantic compositionality over a sentiment
treebank. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing
(EMNLP), pages 1631–1642.
Radu Soricut and Daniel Marcu. 2003. Sentence level
discourse parsing using syntactic and lexical infor-
mation. In Proceedings of the 2003 Conference
of the North American Chapter of the Association
for Computational Linguistics on Human Language
Technology-Volume 1, pages 149–156. Association
for Computational Linguistics.
Caroline Sporleder and Mirella Lapata. 2005. Dis-
course chunking and its application to sentence com-
pression. In Proceedings of the conference on Hu-
man Language Technology and Empirical Methods
in Natural Language Processing, pages 257–264.
Association for Computational Linguistics.
Rajen Subba and Barbara Di Eugenio. 2009. An effec-
tive discourse parser that uses rich linguistic infor-
mation. In Proceedings of Human Language Tech-
nologies: The 2009 Annual Conference of the North
American Chapter of the Association for Computa-
tional Linguistics, pages 566–574. Association for
Computational Linguistics.
Suzan Verberne, Lou Boves, Nelleke Oostdijk, and
Peter-Arno Coppen. 2007. Evaluating discourse-
based answer extraction for why-question answer-
ing. In Proceedings of the 30th annual international
ACM SIGIR conference on Research and develop-
ment in information retrieval, pages 735–736. ACM.
Longkai Zhang Houfeng Wang and Xu Sun Mairgup
Mansur. 2013. Exploring representations from un-
labeled data with co-training for chinese word seg-
mentation.
2069
