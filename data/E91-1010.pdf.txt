AN INDEXING TECHNIQUE FOR IMPLEMENTING 
COMMAND RELATIONS 
Longin Latecki 
University of  Hamburg 
Department of  Computer Science 
Bodenstedtstr. 16, 2000 Hamburg 50 
Germany 
TOPIC AREA: SYNTAX,  SEMANTICS 
ABSTRACT 
Command relations are important tools 
in l inguistics, especial ly in anaphora 
theory. In this paper I present an indexing 
technique which allows us to implement a 
simple and efficient check for most cases 
of command relations which have been 
presented in linguistic literature. I also 
show a wide perspective of applications 
for the indexing technique in the imple- 
mentation of other linguistic phenomena 
in syntax as well as in semantics. 
0. INTRODUCTION 
Barker and Pullum (1990) have given a general 
definition of command relations. Their definition 
covers most cases of command relations that have 
been presented in linguistic literature. I will present 
here an indexing technique for syntax trees which 
allows us to implement a check for all command 
relations which fulfill the definition from 
Barker/Pullum (1990). The indexing technique can 
be implemented in a simple and efficient way 
without any special requierments for the formalism 
used. Hence, the indexing technique has a wide 
spectrum of applications for testing command 
relations in syntactic analysis. Futhermore, this 
method can also be used for command tests in 
semantics, i.e. to test for any two semantic 
representations whether the corresponding odes of 
the syntax tree are in a command relation. The 
usefulness and necessity of a command test in 
semantics have been demonstrated in Latecki/Pinkal 
(1990). 
The general idea of the indexing technique is the 
following: while a syntax tree is being built, special 
indices are assigned to the nodes of this tree. 
Afterwards we can check whether a command 
relation between two nodes of this tree holds by 
merely examining simple set-theoretical re ations of 
corresponding index sets. 
1. A GENERAL DEF IN IT ION FOR 
COMMAND RELAT IONS 
The general command definition from 
Barker/Pullum (1990) can be informally stated in the 
following way: 
1.1 DEFINITION (all). a P-commands 13 iff 
every node with a property P that properly 
dominates a also dominates ~. 
In this chapter I will show that this definition is 
equivalent to the following definition (minimum). 
1.2 DEFINITION (minimum). a P -com-  
mands ~ iff the first node with a property P that 
properly dominates ¢x also dominates 13. 
In this definition the first node that dominates a 
means the node most immediately dominating a, as 
it isusually used in linguistics. Below I will specify 
both of these definitions formally. 
The main difference between these two definitions 
is that in the first we must check every node with a 
property P that properly dominates a, while in the 
second it is enough to check only one node, just the 
first node with the property P that properly 
diominates a. 
It can be easily seen that the command tests based 
on definition 1.2 are an important improvement in
efficiency for computational pplications. 
4"  
-51  - 
Both versions (all) and (minimum) are used as 
command efinitions in linguistic literature, so their 
equivalence also has linguistic onsequences. For 
example, definition 1.3 of MAX-command from 
Barker/Pullum (1990) (which I formulate following 
Sells" definition of c-command, Sells (1987)) is 
equivalent o Definition 1.4, which has been 
proposed in Aoun/Sportich (1982). 
1.3 DEFINIT ION.  a MAX-commands  ~ iff 
every maximal projection properly dominating a 
dominates ~. 
1.4 DEFINIT ION.  a MAX-commands ~ iff 
the first maximal projection properly dominating a 
dominates ~. 
These definitions are special cases of definitions 
1.1 and 1.2 for the property of being a set of 
maximal projections. 
Before I formulate the general command definition 
in a formal way, I will now quote some other 
definitions from Barker/Pullum (1990). 
1.5 DEFINITION. A relation R on a set N is 
ref lexive iff aRa for all a in N; irreflexive iff 
aRa; symmetr i c  iff aRb implies bRa; 
asymmetr ic  iff aRb implies ~bRa;  
ant i symmetr ic  iff aRb and bRa implies a=b; 
transitive iff aRb and bRc implies aRc. 
A relation R on a set N is called a linear order if 
it is reflexive, antisymmetric, transitive and has the 
following property (comparability): for every a 
and b in N, either aRb or bRa. 
The following definition of a tree stems from 
Wall (1972). 
1.6 DEFINITION. A tree is a 5-tuple 
T=<N,L,_>D,<P,LABEL>, where 
N is a finite nonempty set, the nodes of T, 
L is a finite set, the labels of T, 
>D is a reflexive, antisymmetric elation on N, the 
dominance relation of T, 
<P is an irreflexive, asymmetric, transitive relation 
on N, the precedence relation of T, and 
LABEL is a total function from N into L, the 
labeling function of T, such that for all a, b, c and d 
from N and some unique r in N (the root node of 
T), the following hold: 
(i) The Single Root Condition: r>Da 
(ii) The Exclusivity Condition: 
(a_~>Db v b_>Da)<---~(a<Pb v b<Pa) 
(iii) The Nontangling Condition: 
(a<Pb ^  a.>_>Dc ^ b>Dd)--~c<Pd 
I will also use >D the proper dominance relation, 
which will be just like >_D but with all pairs of the 
form <a,a> removed. 
1.7 DEFINIT ION.  If aM 13 we say that a is 
the mother  of  13, or a immediate ly  
dominates 13, where ctM\[3 iff 
o~13 ^ -~3x \[o.~x>Dl~\]. 
1.8 DEFINITION. A property  P on a set of 
nodes N is a subset of N. If a node ot satisfies P, I 
will write cte P or P(o0. 
1.9 DEFINITION. The set of upper bounds 
for a with respect to a property P, written UB(a,P), 
is given by 
UB(a,P)= {13e N: 13>Da ^ P(~)}. 
Thus 13 is an upper bound for a if and only if 
it properly dominates a and satisfies P. 
1.I0 DEFINITION. Let X be any nonempty 
subset of a set of nodes N of a tree T. We will call 
an element a the smallest element of X and denote 
it as minX if cte X and for every node x xe X --, 
x>Da. If X is an empty set, then minX = the root 
node of T. 
A set X is said to be well-ordered by >D if the 
relation >D is a linear order on X and every 
nonempty subset of X has a smallest element. For 
example, the set Z of integers with the. usual 
ordering relation > is well-ordered. 
Now I can formally specify the meaning of the 
expression "the first node with a property P that 
properly dominates a" from the definition 1.2; it 
denotes the smallest element of the set UB(a,P), 
minUB(a,P). First I will show that this element 
always exists. 
.In set theory, it is a well-known fact that in any 
tree, a set of nodes that dominate a given node is 
well-ordered in the dominance relation (see 
Kuratowski/Mostowski (1976), for example). To be 
precise, for a given node a of a tree T, the set 
UB(ct)= {xe T: x>Dct} is well-ordered. Hence, the set 
UB(a,P)=UB(a) n P has a smallest element, which 
we denote minUB(a,P). 
At this point we are ready to formally state 
command definitions 1.1 and 1.2. 
1.U DEFINITION (all). a P -commands 13 
iff Vx (xe UB(a,P) -~ x>DI3). 
1.12 DEF IN IT ION (min imum).  ct P-com- 
mands 13 iff minUB(a,P)_>DIL 
- 52  - 
We say that P generates the P-command relation. 
For example, we obtain the MAX-command 
relation (1.3) as a special case of Definition 1.11 if 
we take the set {ae N: LABEL(a)e MAX} as a 
property P, where MAX is any set of maximal 
projections. 
Def'mition 1.11 is the general command efinition 
from Barker/PuHum (1990). 
1.13 THEOREM. Definitions 1.11 (all) and 
1,12 (minimum) are equivalent. 
Proof. If a pair <¢x,l~> fulfills the definition (all), 
then it also fulfills the definition (minimum), 
because minUB(¢c~)¢ UB(cx,P) if UB(a,P) ~ O. If 
UB(a,P) = O, then minUB(ct,P) = the root node of 
T, so condition minUB(cx,P)>D\[3 is also fulfilled. 
Conversely, let a pair <cx,13> fulfill the definition 
(rain). This means that minUB(a,P)>D\[L 
We must show that Vx (xe UB(cx,P) ---> x>DI3). If 
UB(a,P) is the empty set, then the claim is trivially 
fulfilled. If UB(cx,P) is not empty, then let x be any 
element from UB(~,P). Then x>DminUB(et,P). 
Since ,,>D,, is a linear relation on UB(cz,P), it is 
transitive. Hence, x_>DminUB(a ,P)  and 
minUB(cc,P)>D\[3 implies x>_.DI3. 
2. AN INDEXING TECHNIQUE 
I will now present an indexing mechanism which 
allows us to check any command relation in the 
sense of Definition 1.11 in a simple and 
straightforward way. 
Let P be any property of nodes of a given syntax 
tree. The idea is the following: while the syntax tree 
i~ being built, there are special indices assigned to 
every node of this tree. 
Generally, every node inherits indices from its 
mother. 
Specifically, if P(c0 holds for a node co, then a 
unique new index is put into the index set of ¢z and 
the new index set of o~ obtained in this way will be 
inherited futher. This process is formally described 
in the following definition of functions indp and fp. 
Letting T be any syntax tree, we define functions 
indp and fp from all nodes of T into finite subsets 
of N (the positive integers), whereby we can take 
finite subsets of any index set as a image of indp 
and fp. 
2.1 DEFINITION. Let P be any property. The 
function i ndp :N  --~ F (N)= {a~N:cr i sa  
finite subset of N} is defined recursively as follows: 
1 ° indp(root(T)) ={ 1 }, where root(T) denotes the 
root node. 
2 ° If cx immediately dominates \[3, then 
indp(I\] ) = indp(~t) u fp(\[3), 
where fp is a function fp: N --', F (N) which 
fulfills the following conditions: 
11 If ¢t~ P, then fp(ct) = O. 
21 If ¢xeP, then fp(ct)= {x}, for some unique 
index xeN (x~ U {fp(T): TeN and y~oc}). 
The procedural aspect of this definition can be 
described as follows. First, the function fp assigns a
set with a unique index to every node from P, and 
the empty set to every node which does not belong 
toP, 
Then, for every node, the set it has been assigned 
by the function fp is added to the indices it inherits 
from its mother. The result is the value of the 
function indp. 
Based on this description, it is easy to note the 
following facts. 
2.2 FACT. 
If ~-Di3, then indp(v) G indp(13) - fp(\[3). 
2.3 FACT. 
If 3~ P, then Te_DI~ iff fp(y) ~ indp(\[3). 
Now I present he main theorem of this paper 
which gives a basis for efficient and simple 
implementations of P-command relations. Due to 
this theorem, we can check whether any P-command 
relation holds between two nodes by merely 
examining the subset relationship of corresponding 
index sets. 
2.4 THEOREM. Node ¢x P-commands node \[~ 
iff indp(ct)  - fp(cx) ~ indp(\[~). 
The proof, which makes use of equivalence 
Theorem 1.13, will be given at the end of this 
chapter. 
To illustrate the P-command check based on the 
theorem above, I give an example for a MAX- 
command relation (1.3) which we obtain from 
general command efinition 1.11 if we take the set 
{seN:  LABEL(~)e MAX} as a property P, where 
MAX = {NP, VP, AP, PP, S-bar} is a set of 
maximal projections (Sells 1987). 
Let us consider the syntax analysis for sentence 
(2.5). In tree (2.6), the upper set of indices at every 
node corresponds tothe value of the function fp for 
- 53 - 
this node and the lower set of indices corresponds to 
the value of the function indp for this node. 
(2.5) A f r iend  of  h is  saw every  man w i th  a 
te lescope .  
We can see, for example, that he verb "saw" MAX- 
commands the prepositional phrase "with a 
telescope", by verifying that indpCsaw")-fpCsaw")= 
{1,5} ~ { 1,5,7}=indpCwith a telescope"), 
or that "every man" does not MAX-command "his", 
by verifying that 
indp("every man")-fpCevery man")= {1,5} is not a 
subset of indpChis")= { 1,2,3,4 }. 
(2.6) 
{I} SB} 
Npl2} {t,2} 
O O 
Det { 1,2} N-b~{ 1,2} 
I 
A O nD {3} 
N-bar 11,2 } *'11,2,31 
, 
2) 0 XTn {41 
N{I'21 P11,2,3} "~ 11,2,3,41 
I I I 
friend of his 
vp\[51 
il,5} 
2) 
V-bar { 1,5 } 
2) ),~{6} 
V-bar{l,5} "~ {1,5,6} 
I I 
2) every man 
V{1,51 
i 
saw 
pD {7 } 
~{1,5,7} 
I 
with a telescope 
To do P-command tests in semantics, we merely 
need to extend functions fp and indp to semantic 
representations of every node. We can do this in the 
following way: 
If a" is a semantic representation f a node or, then 
fp(cx') = fp(a) and indp(a')  = indp(a). 
Now we can check, for two given semantic 
representations ct', 13", whether a P-command 
relation holds between the two corresponding nodes 
¢x, 13, by examining the condition from Theorem 2.4 
for ¢x', 13": indp(a3 - fp(cx') ~ indp(\[~'). (For more 
details ee Latecki/Pinkal (1990).) 
An important advantage ofthe indexing technique 
is that its applicability for checking command 
relations in semantics does not depend on an 
ispomorphism between syntactic and semantic 
structure, since the necessary syntactic information 
is encoded in indices. Therefore, this information can 
be moved to any required position in the semantic 
structure together with the representation f a given 
node. 
Definition 1.11 does not cover all cases of 
command relations which have been presented in 
linguistic literature, but there are only a few 
exceptions. One is the relation that is called c- 
command in Reinhart (1976; 1981, p.612; 1983, 
p.23): 
2.7 DEFINITION. Node ct c(ons i t i tuent ) -  
commands  node ~ iff the branching node Xl most 
immediately dominating cteither dominates 13or is 
immediately dominated by a node x 2 which 
dominates \[~, and x2 is of the same category type as 
x 1. A node y is a branching node iff there exists 
two different nodes x,y such that ~/Mx ^  vMy. 
As T. Reinhart wrote, the intention of this 
def'mition is to capture c-command relations in cases 
S-bar over S or VP over VP. Hence, we can say (for 
- 54  - 
I 
5 
our purposes) that x 2 is of the same category type as 
Xl if LABEL(x2) = S-bar, LABEL(xl) = S or 
LABEL(x2) = LABEL(xl) = VP. 
This c-command efinition allows the minimal 
upper bound to be replaced by another node, one 
node closer to the root, so this relation cannot be 
generated by any property, since this property must 
then depend on the node ix. However, the condition 
of Definition 2.7 can be generated by a relation. In 
order to use a given relation R as generator, it is 
enough to replace the set of upper bounds UB(ot,P) 
by the set UB(tx,R)={13~N: 13>Dot ^ (xRI3)}, in 
general command definition 1.11. For detailed 
disscusion see Barker/Pullum (1990). 
With an example of Reinharts c-commando 
relation, I want to show that it is also possible 
to t reat  re la t iona l  command def in i t ions  
with the index ing technique.  Here I do not 
want to consider the treatment of the relational 
command efinition with the indexing technique in 
the general case, because it would lead to a formal 
mathematical discussion without linguistic 
connections. 
To specify a test for Reinharts c-command, we 
need merely to modify part 20 of the definition of 
the function indp in 2.1. The definition of the 
function fp together with the basis test condition 
given in Theorem 2.4 will be left unchanged. As a 
property P we take the set of branching nodes. 
New part 20 of DeFinition 2.1 will be formulated 
in the following way: 
2 °" If (x immediately dominates 13 and 13 is of the 
same category as ix, then indp(\[3) = indp(tx). 
If ct immediately dominates 13 and \[3 is not of the 
same category as ct then indp(\[3) = indp(ct) L) fp(~). 
The idea of this modification is that if a node 13 is 
of the same category as a node ix, then 13 only 
inherits the indices from or. So, in this case, the 
new index from the set fP(l~) does not influence the 
value of the function indp on 13. I illustrate the 
indexing check for c-command efinition 2.7 with 
the syntax analysis for the following example 
sentense from Reinhart (1983). 
(2.8) Lola found the book  in the l ibrary. 
In tree (2.9), the upper set of indices at every node 
corresponds to the value of the function fp at this 
node and the lower set of indices corresponds: to the 
value of the function indp at this node. 
We can see, for example, that the subject of S, 
"Lola", c-commands the COMP in S-bar, by 
verifying that indpCLola")-fpCLola")={ 1 } K { 1 } = 
indp(COMP), 
or that the object, "the book", c-commands the NP 
in PP, "the library", by verifying that 
indp("the book")-fpCthe book")={ 1,4} ~ { 1,4,7,8}= 
indpCthe litrary"). 
(2.9) 
O COMP{ I } 
Npl 13 I 
Lola {51 
0 {6} 
V { 1,41 NP { 1,4,61 
I I 
found the book 
DD {7} 
P{1,4,7} '"~ {1,4,7,8} 
I I 
in the library 
- 55  - 
To conclude this chapter I give the proof of Theorem 
2.4. 
Proof  o f  Theorem 2.4 .  
"~ " Let (x P-command \[~. If we denote 
"y=minUB(ct,P) and indp(~,)=E, then 
indp(o0 =Z o fp(a), because fp(x)=O, for every 
node x between ct and % 
Due to Definition 1.12 (minimum), the node ~/also 
dominates 13, hence I: ~ indp(I\]). So, we have the 
inclusion indp(a)-fp(~t) ~ indp(13). 
"~" Now let indp(c0-fp(c0 ~ indp(I\]), for any two 
nodes (x, I\] of some tree T, and let ~, be any node 
from P that dominates 0t. indp(y) ~ indp(a)-fp(a), 
since y dominates ct(2.2). 
From the transitivity of the inclusion relation, 
indp(y) ~ indp(~). This implies that fp ( ' f~  
indp(\[3). Due to Fact 2.3, the needed relation "Feu~ 
holds, so ot P-commands ~.
3. CONCLUSIONS 
I have presented an indexing technique which 
allows us to test all command relations that fulfill 
the definition of Barker and Pullum (1990). On an 
example of Reinharts c-command relation, I have 
also shown that it is possible to treat relational 
commands with this technique. 
The indexing technique can be simply and 
efficiently implemented without any special 
requierments for the formalism used. Based on it, 
Millies (1990) has implemented tests for MAX- 
command, subjacency and government in a 
principle-based parser for GB (Chomsky 1981, 1982 
and 1986). 
It is also possible to use similar indexing 
processes to treat other linguistic phenomena in
syntax as well as in semantics. Hence, the indexing 
technique has a wide spectrum of applications. For 
example, Latecki and Pink~il (1990) present an 
indexing mechanism which allows us to achieve the 
effects of "Nested Cooper Storage" (Keller 1988 and 
Cooper 1983). 
REFERENCES 
Aoun, J. / Sportiche, D. (1982): On the Formal 
Theory of Government. Linguistic Review 2, 
211-236. 
Barker, Ch. / Pullum G. K. (1990): A Theory of 
Command Relations. Linguistics and 
Philosophy 13: 1-34. 
Chomsky, N. (1981): Lectures on Government and 
Binding. Dordrecht: Foris. 
Chomsky, N. (1982): Some Concepts and 
Consequences of the Theory of Government and 
Binding. MIT Press. 
Chomsky, N. (1986): Barriers. Linguistic Inquiry 
Monigraphs 13, MIT Press: Cambrdge. 
Cooper, R. (1983): Quantification and Semantic 
Theory. D. Reidel, Dordrecht. 
Keller, W. R. (1988): Nested Cooper Storage: The 
Proper Treatment of Quantification i  Ordinary 
Noun Phrases. In U. Reyle and C. Rohrer 
(eds.), Natural Language Parsing and Linguistic 
Theories, 432-447, D. Reidel, Dordrecht. 
Kuratowski, K. / Mostowski, A. (1976): Set 
Theory. PWN: Warsaw-Amsterdam. 
Latecki, L. / Pinkal, M. (1990): Syntactic and 
Semantic Conditions for Quantifier Scope. To 
appear in: Proceedings of the Workshop on 
"Processing of Plurals and Quantifiers" at 
GWAI-90, September 1990. 
Millies, S. (1990): Ein modularer Ansatz filr 
prinzipienbasiertes Parsing. LILOG-Report 
139, IBM: Stuttgart, Germany. 
Sells, P. (1987): Lectures on Contemporary 
Semantic Theories. CSLI Lecture Notes. 
Reinhart, T. (1976): The Syntactic Domain of 
Anaphora. Doctoral dissertation, MIT, 
Cambridge, Massachusetts. 
Reinhart, T. (1981): Definite NP Anaphora nd C- 
Commands Domains. Linguistic Inquiry 12, 
 605-635. 
Reinhart, T. (1983): Anaphora and Semantic 
Interpretation, University of Chicago Press, 
Chicago, Illinois. 
Wall, R. (1972): Introduction to Mathematical 
 Linguistics. Prentice Hall: Engelewood Cliffs, 
New Jersey. 
ACKNOWLEDGMENTS 
I would like to thank my advisor Manfred Pinkal 
for valuable discussions and silggestions. 
I also want to thank Geoff Simmons for 
correcting my English. 
- 56  - 
