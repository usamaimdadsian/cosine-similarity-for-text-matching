Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 840–845,
Lisbon, Portugal, 17-21 September 2015. c©2015 Association for Computational Linguistics.
A Framework for Comparing Groups of Documents
Arun S. Maiya
Institute for Defense Analyses — Alexandria, VA, USA
amaiya@ida.org
Abstract
We present a general framework for com-
paring multiple groups of documents. A
bipartite graph model is proposed where
document groups are represented as one
node set and the comparison criteria are
represented as the other node set. Using
this model, we present basic algorithms to
extract insights into similarities and differ-
ences among the document groups. Fi-
nally, we demonstrate the versatility of
our framework through an analysis of NSF
funding programs for basic research.
1 Introduction and Motivation
Given multiple sets (or groups) of documents, it is
often necessary to compare the groups to identify
similarities and differences along different dimen-
sions. In this work, we present a general frame-
work to perform such comparisons for extraction
of important insights. Indeed, many real-world
tasks can be framed as a problem of comparing
two or more groups of documents. Here, we pro-
vide two motivating examples.
1. Program Reviews. To better direct research
efforts, funding organizations such as the National
Science Foundation (NSF), the National Institutes
of Health (NIH), and the Department of Defense
(DoD), are often in the position of reviewing re-
search programs via their artifacts (e.g., grant ab-
stracts, published papers, and other research de-
scriptions). Such reviews might involve identify-
ing overlaps across different programs, which may
indicate a duplication of effort. It may also involve
the identification of unique, emerging, or dimin-
ishing topics. A “document group” here could be
defined either as a particular research program that
funds many organizations, the totality of funded
research conducted by a specific organization, or
all research associated with a particular time pe-
riod (e.g., fiscal year). In all cases, the objective is
to draw comparisons between groups by compar-
ing the document sets associated with them.
2. Intelligence. In the areas of defense and in-
telligence, document sets are sometimes obtained
from different sources or entities. For instance, the
U.S. Armed Forces sometimes seize documents
during raids of terrorist strongholds.1 Similarities
between two document sets (each captured from a
different source) can potentially be used to infer a
non-obvious association between the sources.
Of course, there are numerous additional examples
across many domains (e.g., comparing different
news sources, comparing the reviews for several
products, etc.). Given the abundance of real-world
applications as illustrated above, it is surprising,
then, that there are no existing general-purpose ap-
proaches for drawing such comparisons. While
there is some previous work on the comparison
of document sets (referred to as comparative text
mining), these existing approaches lack the gener-
ality to be widely applicable across different use
case scenarios with different comparison criteria.
Moreover, much of the work in the area focuses
largely on the summarization of shared or un-
shared topics among document groups (e.g., Wan
et al. (2011), Huang et al. (2011), Campr and
Jez?ek (2013), Wang et al. (2012), Zhai et al.
(2004)). That is, the problem of drawing multi-
faceted comparisons among the groups themselves
is not typically addressed. This, then, motivates
our development of a general-purpose model for
comparisons of document sets along arbitrary di-
mensions. We use this model for the identification
of similarities, differences, trends, and anomalies
among large groups of documents. We begin by
1http://en.wikipedia.org/wiki/
Document_Exploitation_(DOCEX)
840
formally describing our model.
2 Our Formal Model for
Comparing Document Groups
As input, we are given several groups of doc-
uments, and our task is to compare them. We
now formally define these document groups and
the criteria used to compare them. Let D =
{d
1
, d
2
, . . . , d
N
} be a document collection com-
prising the totality of documents under considera-
tion, where N is the size. Let DP be a partition of
D representing the document groups.
Definition 1 A document group is a subset DP
i
?
D
P (where index i ? {1 . . . |DP |}).
Each document group in DP , for instance,
might represent articles associated with either
a particular organization (e.g., university), a re-
search funding source (e.g., NSF or DARPA pro-
gram), or a time period (e.g., a fiscal year). Docu-
ment groups are compared using comparison cri-
teria, DC , a family of subsets of D.
Definition 2 A comparison criterion is a subset
D
C
i
? D
C (where index i ? {1 . . . |DC |}).
Intuitively, each subset of DC represents a set
of documents sharing some attribute. Our model
allows great flexibility in how DC is defined. For
instance, DC might be defined by the named en-
tities mentioned within documents (e.g., each sub-
set contains documents that mention a particular
person or organization of interest). For the present
work, we define DC by topics discovered using la-
tent Dirichlet allocation or LDA (Blei et al., 2003).
LDA Topics as Comparison Criteria. Proba-
bilistic topic modeling algorithms like LDA dis-
cover latent themes (i.e., topics) in document col-
lections. By using these discovered topics as
the comparison criteria, we can compare arbitrary
groups of documents by the themes and subject
areas comprising them. Let K be the number
of topics or themes in D. Each document in
D is composed of a sequence of words: d
i
=
?s
i1
, s
i2
, . . . , s
iN
i
?, where N
i
is the number of
words in d
i
and i ? {1 . . . N}. V =
?
N
i=1
f(d
i
) is
the vocabulary of D, where f(·) takes a sequence
of elements and returns a set. LDA takes K and
D (including its components such as V ) as input
and produces two matrices as output, one of which
is ?. The matrix ? ? RN×K is the document-
topic distribution matrix and shows the distribu-
tion of topics within each document. Each row
of the matrix represents a probability distribution.
D
C is constructed using K subsets of documents,
each of which represent a set of documents per-
taining largely to the same topic. That is, for
t ? {1 . . . K} and i ? {1 . . . N}, each subset
D
C
t
? D
C is comprised of all documents d
i
where
t = argmax
x
?
ix
.
2 Having defined the document
groups DP and the comparison criteria DC , we
now construct a bipartite graph model used to per-
form comparisons.
A Bipartite Graph Model. Our objective is to
compare the document groups in DP based on
D
C
. We do so by representing DP and DC as
a weighted bipartite graph, G = (P,C,E,w),
where P and C are disjoint sets of nodes, E is the
edge set, and w : E ? Z+ are the edge weights.
Each subset of DP is represented as a node in P ,
and each subset of DC is represented as a node
in C . Let ? : P ? DP and ? : C ? DC
be functions that map nodes to the document sub-
sets that they represent. Then, the edge set E is
{(u, v) | u ? P, v ? C,?(u)??(v) 6= ?}, and the
edge weight for any two nodes u ? P and v ? C
is w((u, v)) = |?(u) ? ?(v)|. Concisely, each
weighted edge in G between a document group
(in P ) and a topic (in C) represents the number
of documents shared among the two sets. Fig-
ure 1 shows a toy illustration of the model. Each
node in P is shown in black and represents a sub-
set of DP (i.e., a document group). Each node in
C is shown in gray and represents a subset of DC
(i.e., a document cluster pertaining primarily to the
same topic). Each edge represents the intersection
of the two subsets it connects. In the next section,
we will describe basic algorithms on such bipartite
graphs capable of yielding important insights into
the similarities and differences among document
groups.
3 Basic Algorithms Using the Model
We focus on three basic operations in this work.
Node Entropy. Let ~w be a vector of weights for
all edges incident to some node v ? E. The en-
tropy H of v is: H(v) = ?
?
i
p
i
log
|~w|
(p
i
), where
p
i
=
w
i
?
j
w
j
and i, j ? {1 . . . |~w|}. A similar for-
mulation was employed in Eagle et al. (2010). In-
tuitively, if v ? P , H(v) measures the extent to
which the document group is concentrated around
2
D
C is also a partition of D, when defined in this way.
841

 	 
 



















Figure 1: [Toy Illustration of Bipartite Graph Model.]
Each black node (i.e., node ? P ) represents a document
group. Each gray node (i.e., node ? C) represents a clus-
ter of documents pertaining primarily to the same topic.
a small number of topics (lower values of H(v)
mean more concentrated). Similarly, if v ? C , it is
the extent to which a topic is concentrated around
a small number of document groups.
Node Similarity. Given a graph G, there are many
ways to measure the similarity of two nodes based
on their connections. Such measures can be used
to infer similarity (and dissimilarity) among doc-
ument groups. However, existing methods are not
well-suited for the task of document group com-
parison. The well-known SimRank algorithm (Jeh
and Widom, 2002) ignores edge weights, and nei-
ther SimRank nor its extension, SimRank++ (An-
tonellis et al., 2008), scale to larger graphs. Sim-
Rank++ and ASCOS (Chen and Giles, 2013) do
incorporate edge weights but in ways that are
not appropriate for document group comparisons.
For instance, both SimRank++ and ASCOS in-
corporate magnitude in the similarity computa-
tion. Consider the case where document groups
are defined as research labs. ASCOS and Sim-
Rank++ will measure large research labs and small
research labs as less similar when in fact they may
publish nearly identical lines of research. Finally,
under these existing methods, document groups
sharing zero topics in common could still be con-
sidered similar, which is undesirable here. For
these reasons, we formulate similarity as follows.
Let NG(·) be a function that returns the neighbors
of a given node in G. Given two nodes u, v ? P ,
let Lu,v = NG(u) ? NG(v) and let x : I ? Lu,v
be the indexing function for Lu,v.3 We construct
two vectors, ~a and ~b, where a
k
= w(u, x(k)),
b
k
= w(v, x(k)), and k ? I . Each vector is es-
3
I is the index set of Lu,v .
sentially a sequence of weights for edges between
u, v ? P and each node in Lu,v. Similarity of two
nodes is measured using the cosine similarity of
their corresponding sequences, ~a·~b
?~a??
~
b?
, which we
compute using a function sim(·, ·). Thus, doc-
ument groups are considered more similar when
they have similar sets of topics in similar propor-
tions. As we will show later, this simple solution,
based on item-based collaborative filtering (Sar-
war et al., 2001), is surprisingly effective at infer-
ring similarity among document groups in G.
Node Clusters. Identifying clusters of related
nodes in the bipartite graph G can show how doc-
ument groups form larger classes. However, we
find that G is typically fairly dense. For these
reasons, partitioning of the one-mode projection
of G and other standard bipartite graph cluster-
ing techniques (e.g., Dhillion (2001) and Sun et
al. (2009)) are rendered less effective. We instead
employ a different tack and exploit the node sim-
ilarities computed earlier. We transform G into a
new weighted graph GP = (P,EP , wsim) where
E
P
= {(u, v) | u, v ? P, sim(u, v) > ?}, ?
is a pre-defined threshold, and wsim is the edge
weight function (i.e., wsim = sim). Thus, GP is
the similarity graph of document groups. ? = 0.5
was used as the threshold for our analyses. To
find clusters in GP , we employ the Louvain al-
gorithm, a heuristic method based on modularity
optimization (Blondel et al., 2008). Modularity
measures the fraction of edges falling within clus-
ters as compared to the expected fraction if edges
were distributed evenly in the graph (Newman,
2006). The algorithm initially assigns each node
to its own cluster. At each iteration, in a local and
greedy fashion, nodes are re-assigned to clusters
with which they achieve the highest modularity.
4 Example Analysis: NSF Grants
As a realistic and informative case study, we uti-
lize our model to characterize funding programs
of the National Science Foundation (NSF). This
corpus consists of 132,372 grant abstracts describ-
ing awards for basic research and other support
funded by the NSF between the years 1990 and
2002 (Bache and Lichman, 2013).4 Each award is
associated with both a program element (i.e., fund-
ing source) and a date. We define document
4Data for years 1989 and 2003 in this publicly available
corpus were partially missing and omitted in some analyses.
842
groups in two ways: by program element and by
calendar year. For comparison criteria, we used
topics discovered with the MALLET implementa-
tion of LDA (McCallum, 2002) using K = 400 as
the number of topics and 200 as the number of iter-
ations. All other parameters were left as defaults.
The NSF corpus possesses unique properties that
lend themselves to experimental evaluation. For
instance, program elements are not only associ-
ated with specific sets of research topics but are
named based on the content of the program. This
provides a measure of ground truth against which
we can validate our model. We structure our anal-
yses around specific questions, which now follow.
Which NSF programs are focused on specific
areas and which are not? When defining doc-
ument groups as program elements (i.e., each NSF
program is a node in P ), node entropy can be
used to answer this question. Table 1 shows ex-
amples of program elements most and least as-
sociated with specific topics, as measured by en-
tropy. For example, the program 1311 Linguistics
(low entropy) is largely focused on a single lin-
guistics topic (labeled by LDA with words such
as “language,” “languages,” and “linguistic”). By
contrast, the Australia program (high entropy) was
designed to support US-Australia cooperative re-
search across many fields, as correctly inferred by
our model.
Low Entropy Program Elements
Program Primary LDA Topic
1311 Linguistics language languages linguistic
4091 Network Infrastructure network connection internet
High Entropy Program Elements
Program Primary LDA Topic
5912 Australia (many topics & disciplines)
9130 Research in Minority Instit. (many topics & disciplines)
Table 1: [Examples of High/Low Entropy Programs.]
Which research areas are growing/emerging?
When defining document groups as calendar years
(instead of program elements), low entropy nodes
in C are topics concentrated around certain years.
Concentrations in later years indicate growth. The
LDA-discovered topic nanotechnology is among
the lowest entropy topics (i.e., an outlier topic with
respect to entropy). As shown in Figure 2, the
number of nanotechnology grants drastically in-
creased in proportion through 2002. This result is
consistent with history, as the National Nanotech-
nology Initiative was proposed in the late 1990s to
promote nanotechnology R&D.5 One could also
5http://en.wikipedia.org/wiki/
measure such trends using budget allocations by
incorporating the award amounts into the edge
weights of G.
19
90
19
91
19
92
19
93
19
94
19
95
19
96
19
97
19
98
19
99
20
00
20
01
20
02
Topic: Nanotechnology
Pe
rc
e
n
ta
ge
 o
f T
o
ta
l G
ra
n
ts
0.0
0.2
0.4
0.6
0.8
1.0
Figure 2: [Uptrend in Nanotechnology.] Our model cor-
rectly identifies the surge in nanotechnology R&D beginning
in the late 1990s.
Given an NSF program, to which other pro-
grams is it most similar? As described in Section
3, when each node in P represents an NSF pro-
gram, our model can easily identify the programs
most similar to a given program. For instance, Ta-
ble 2 shows the top three most similar programs
to both the Theoretical Physics and Ecology pro-
grams. Results agree with intuition. For each
NSF program, we identified the top n most sim-
ilar programs ranked by our sim(·, ·) function,
where n ? {3, 6, 9}. These programs were man-
ually judged for relatedness, and the Mean Av-
erage Precision (MAP), a standard performance
metric for ranking tasks in information retrieval,
was computed. We were unsuccessful in evaluat-
ing alternative weighted similarity measures men-
tioned in Section 3 due to their aforementioned
issues with scalability and the size of the NSF
dataset. (For instance, the implementations of AS-
COS (Antonellis et al., 2008) and SimRank (Jeh
and Widom, 2002) that we considered are avail-
able here.6) Recall that our sim(·, ·) function is
based on measuring the cosine similarity between
two weight vectors, ~a and ~b, generated from our
bipartite graph model. As a baseline for compar-
ison, we evaluated two additional similarity im-
plementations using these weight vectors. The
first measures the similarity between weight vec-
tors using weighted Jaccard similarity, which is
?
k
min(a
k
,b
k
)
?
k
max(a
k
,b
k
)
(denoted as Wtd. Jaccard). The sec-
ond measure is implemented by taking the Spear-
man’s rank correlation coefficient of ~a and ~b (de-
National_Nanotechnology_Initiative
6https://github.com/hhchen1105/
networkx_addon
843
noted as Rank). Figure 3 shows the Mean Average
Precision (MAP) for each method and each value
of n. With the exception of the difference between
Cosine and Wtd. Jaccard for MAP@3, all other
performance differentials were statistically signif-
icant, based on a one-way ANOVA and post-hoc
Tukey HSD at a 5% significance level. This, then,
provides some validation for our choice.
1245 Theoretical Physics 1182 Ecology
1286 Elementary Particle Theory 1128 Ecological Studies
1287 Mathematical Physics 1196 Environmental Biology
1284 Atomic Theory 1195 Ecological Research
Table 2: [Similarity Queries.] Three most similar pro-
grams to the Theoretical Physics and Ecology programs.







	




  





	













Figure 3: [Mean Average Precision (MAP).] Cosine sim-
ilarity outperforms alternative approaches.
How do NSF programs join together to form
larger program categories? As mentioned, by
using the similarity graph GP constructed from G,
clusters of related NSF programs can be discov-
ered. Figure 4, for instance, shows a discovered
cluster of NSF programs all related to the field of
neuroscience. Each NSF program (i.e., node) is
composed of many documents.
Figure 4: [Neuroscience Programs.] A discovered cluster
of program elements all related to neuroscience.
Which pairs of grants are the most similar in
the research they describe? Although the focus
of this paper is on drawing comparisons among
groups of documents, it is often necessary to
draw comparisons among individual documents,
as well. For instance, one may wish to identify
pairs of grants from different programs describing
highly similar lines of research. One common ap-
proach to this is to measure the similarity among
low-dimensional representations of documents re-
turned by LDA (Blei et al., 2003). We employ
the Hellinger distance metric for this. Unfortu-
nately, identifying the set of most similar docu-
ment pairs in this way can be computationally ex-
pensive, as the number of pairwise comparisons
scales quadratically with the size of the corpus. To
address this, our bipartite graph model can be ex-
ploited as a blocking heuristic using either the doc-
ument groups or the comparison criteria. In the
latter case, one can limit the pairwise comparisons
to only those documents that reside in the same
subset of DC . For the former case, node similar-
ity can be used. Instead of comparing each docu-
ment with every other document, we can limit the
comparisons to only those document groups of in-
terest that are deemed similar by our model. As
an illustrative example, the program 1271 Compu-
tational Mathematics and the program 2865 Nu-
meric, Symbolic, and Geometric Computation are
inferred as being highly similar. Between these
groups, the following two grants are easily iden-
tified as being the most similar with a Hellinger
similarity score of 0.73 (only titles are shown due
to space constraints):
• Grant #1: Analyses of Structured Computational
Problems and Parallel Iterative Algorithms
(Discusses parallel iterative methods for solutions to
large sparse/dense systems of linear equations.)
• Grant #2: Sparse Matrix Algorithms on Distributed
Memory Multiprocessors
As can be seen, despite some differences in ter-
minology, the two lines of research are related, as
matrices (studied in Grant #2) are used to com-
pactly represent and work with systems of linear
equations (studied in Grant #1).
5 Conclusion
We have presented a bipartite graph model for
drawing comparisons among large groups of docu-
ments. We showed how basic algorithms using the
model can identify trends and anomalies among
the document groups. As an example analysis, we
demonstrated how our model can be used to better
characterize and evaluate NSF research programs.
For future work, we plan on employing alterna-
tive comparison criteria in our model such as those
derived from named entity recognition and para-
phrase detection.
844
References
Ioannis Antonellis, Hector G. Molina, and Chi C.
Chang. 2008. Simrank++: Query Rewriting
Through Link Analysis of the Click Graph. Proc.
VLDB Endow., 1(1):408–421, August.
K. Bache and M. Lichman. 2013. UCI machine learn-
ing repository.
David M. Blei, Andrew Y. Ng, and Michael I. Jordan.
2003. Latent Dirichlet Allocation. J. Mach. Learn.
Res., 3(4-5):993–1022, March.
Vincent D. Blondel, Jean-Loup Guillaume, Renaud
Lambiotte, and Etienne Lefebvre. 2008. Fast un-
folding of communities in large networks. Journal
of Statistical Mechanics: Theory and Experiment,
2008(10):P10008+, July.
Michal Campr and Karel Jez?ek. 2013. Topic Mod-
els for Comparative Summarization. In Ivan Haber-
nal and Va´clav Matous?ek, editors, Text, Speech, and
Dialogue, volume 8082 of Lecture Notes in Com-
puter Science, pages 568–574. Springer Berlin Hei-
delberg.
Hung H. Chen and C. Lee Giles. 2013. ASCOS: An
Asymmetric Network Structure COntext Similarity
Measure. In Proceedings of the 2013 IEEE/ACM In-
ternational Conference on Advances in Social Net-
works Analysis and Mining, ASONAM ’13, pages
442–449, New York, NY, USA. ACM.
Inderjit S. Dhillion. 2001. Co-clustering Documents
and Words Using Bipartite Spectral GraphPartition-
ing. Technical report, Austin, TX, USA.
Nathan Eagle, Michael Macy, and Rob Claxton. 2010.
Network diversity and economic development. Sci-
ence, 328(5981):1029–1031, May.
Xiaojiang Huang, Xiaojun Wan, and Jianguo Xiao.
2011. Comparative News Summarization Using
Linear Programming. In Proceedings of the 49th
Annual Meeting of the Association for Computa-
tional Linguistics: Human Language Technologies:
Short Papers - Volume 2, HLT ’11, pages 648–653,
Stroudsburg, PA, USA. Association for Computa-
tional Linguistics.
Glen Jeh and Jennifer Widom. 2002. SimRank: a
measure of structural-context similarity. In Proceed-
ings of the eighth ACM SIGKDD international con-
ference on Knowledge discovery and data mining,
KDD ’02, pages 538–543, New York, NY, USA.
ACM.
Andrew K. McCallum. 2002. MALLET: A Machine
Learning for Language Toolkit.
M. E. J. Newman. 2006. Modularity and community
structure in networks. Proceedings of the National
Academy of Sciences, 103(23):8577–8582, June.
Badrul Sarwar, George Karypis, Joseph Konstan, and
John Riedl. 2001. Item-based Collaborative Filter-
ing Recommendation Algorithms. In Proceedings
of the 10th International Conference on World Wide
Web, WWW ’01, pages 285–295, New York, NY,
USA. ACM.
Yizhou Sun, Yintao Yu, and Jiawei Han. 2009.
Ranking-based Clustering of Heterogeneous Infor-
mation Networks with Star Network Schema. In
Proceedings of the 15th ACM SIGKDD Interna-
tional Conference on Knowledge Discovery and
Data Mining, KDD ’09, pages 797–806, New York,
NY, USA. ACM.
Xiaojun Wan, Houping Jia, Shanshan Huang, and Jian-
guo Xiao. 2011. Summarizing the Differences
in Multilingual News. In Proceedings of the 34th
International ACM SIGIR Conference on Research
and Development in Information Retrieval, SIGIR
’11, pages 735–744, New York, NY, USA. ACM.
Dingding Wang, Shenghuo Zhu, Tao Li, and Yihong
Gong. 2012. Comparative Document Summariza-
tion via Discriminative Sentence Selection. ACM
Trans. Knowl. Discov. Data, 6(3), October.
ChengXiang Zhai, Atulya Velivelli, and Bei Yu. 2004.
A Cross-collection Mixture Model for Comparative
Text Mining. In Proceedings of the Tenth ACM
SIGKDD International Conference on Knowledge
Discovery and Data Mining, KDD ’04, pages 743–
748, New York, NY, USA. ACM.
845
