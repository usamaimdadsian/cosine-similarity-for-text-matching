Proceedings of the 2015 Conference on Empirical Methods in Natural Language Processing, pages 518–523,
Lisbon, Portugal, 17-21 September 2015.
c©2015 Association for Computational Linguistics.
“A Spousal Relation Begins with a Deletion of engage
and Ends with an Addition of divorce”:
Learning State Changing Verbs from Wikipedia Revision History
Derry Tanti Wijaya
Carnegie Mellon University
5000 Forbes Avenue
Pittsburgh, PA, 15213
dwijaya@cs.cmu.edu
Ndapandula Nakashole
Carnegie Mellon University
5000 Forbes Avenue
Pittsburgh, PA, 15213
ndapa@cs.cmu.edu
Tom M. Mitchell
Carnegie Mellon University
5000 Forbes Avenue
Pittsburgh, PA, 15213
tom.mitchell@cs.cmu.edu
Abstract
Learning to determine when the time-
varying facts of a Knowledge Base (KB)
have to be updated is a challenging task.
We propose to learn state changing verbs
from Wikipedia edit history. When a
state-changing event, such as a marriage
or death, happens to an entity, the in-
fobox on the entity’s Wikipedia page usu-
ally gets updated. At the same time, the
article text may be updated with verbs ei-
ther being added or deleted to reflect the
changes made to the infobox. We use
Wikipedia edit history to distantly super-
vise a method for automatically learning
verbs and state changes. Additionally, our
method uses constraints to effectively map
verbs to infobox changes. We observe in
our experiments that when state-changing
verbs are added or deleted from an en-
tity’s Wikipedia page text, we can predict
the entity’s infobox updates with 88% pre-
cision and 76% recall. One compelling
application of our verbs is to incorporate
them as triggers in methods for updating
existing KBs, which are currently mostly
static.
1 Introduction
Extracting relational facts between entities and
storing them in knowledge bases (KBs) has been a
topic of active research in recent years. The result-
ing KBs are generally static and are not updated
as the facts change (Suchanek et al., 2007; Carl-
son et al., 2010; Fader et al., 2011; Mitchell et al.,
2015). One possible approach to updating KBs is
to extract facts from dynamic Web content such
as news (Nakashole and Weikum, 2012). In this
paper, we propose to predict state changes caused
by verbs acting on entities in text. This is differ-
ent from simply applying the same text extraction
pipeline, that created the original KB, to dynamic
Web content.
In particular, our approach has the following ad-
vantages: (1) Consider for example the SPOUSE
relation, both marry and divorce are good patterns
for extracting this relation. In our work, we wish
to learn that they cause different state changes.
Thus, we can update the entity’s fact and its tem-
poral scope (Wijaya et al., 2014a). (2) Learning
state changing verbs can pave the way for learn-
ing the ordering of verbs in terms of their pre- and
post-conditions.
Our approach learns state changing verbs from
Wikipedia revision history. In particular, we seek
to establish a correspondence between infobox ed-
its and verbs edits in the same article. The infobox
of a Wikipedia article is a structured box that sum-
marizes an entity as a set of facts (attribute-value
pairs) . Our assumption is that when a state-
changing event happens to an entity e.g., a mar-
riage, its Wikipedia infobox is updated by adding
a new SPOUSE value. At approximately the same
time, the article text might be updated with verbs
that express the event, e.g., X is now married to Y.
Figure 1 is an example of an infobox of an entity
changing at the same time as the article’s main text
to reflect a marriage event.
Wikipedia revision history of many articles can
act as distant supervision data for learning the cor-
respondence between text and infobox changes.
However, these revisions are very noisy. Many in-
fobox slots can be updated when a single event
happens. For example, when a death happens,
slots regarding birth e.g., birthdate, birthplace,
may also be updated or added if they were miss-
ing before. Therefore, our method has to handle
these sources of noise. We leverage logical con-
straints to rule out meaningless mappings between
518
05/24/2014 
marriage  
time 
05/23/2014 05/25/2014 
Figure 1: A snapshot of Kim Kardashian’s Wikipedia revision history, highlighting text and infobox
changes. In red (and green) are the differences between the page on 05/25/2014 and 05/23/2014: things
that are deleted from (and added to) the page.
infobox and text changes.
In summary, our contributions are as follows:
(1) we present an algorithm that uses Wikipedia
edit histories as distantly labeled data to learn
which verbs result in which state changes to en-
tities, and experimentally demonstrate its success,
(2) we make available this set of distantly la-
beled training data on our website
1
, and (3) we
also make available our learned mappings from
verbs to state changes, as a resource for other re-
searchers, on the same website.
2 Method
2.1 Data Construction
We construct a dataset from Wikipedia edit histo-
ries of person entities whose facts change between
the year 2007 and 2012 (i.e., have at least one fact
in YAGO KB (Suchanek et al., 2007) with a start
or end time in this period). We obtain Wikipedia
URLs of this set of entities P from YAGO and
crawl their article’s revision history. Given a per-
son p, his/her Wikipedia revision history R
p
has
a set of ordered dates T
p
on which revisions are
made to his/her Wikipedia page (we consider date
granularity). Each revision r
p,t
? R
p
is his/her
Wikipedia page at date t where t ? T
p
.
Each Wikipedia revision r
p,t
is a set of infobox
slots S
p,t
and textual content C
p,t
. Each infobox
slot s ? S
p,t
is a quadruple, ?s
att
, s
value
, s
start
,
s
end
? containing the attribute name (non-empty),
the attribute value, and the start and end time for
1
http://www.cs.cmu.edu/ dwijaya/postcondition.html
which this attribute-value pair holds in reality.
A document d
p,t
in our data set is the difference
2
between any two consecutive revisions separated
by more than 24 hours i.e., d
p,t
= r
p,t+2
? r
p,t
,
where r
p,t+2
is the first revision on date t+ 2 and
r
p,t
is the last revision on date t (as a page can be
revised many times in a day).
A document d
p,t
is therefore a set of infobox
changes ?S
p,t
and textual changes ?C
p,t
. Each
slot change ?s ? ?S
p,t
= ?s
att
, ?s
value
, ?s
start
,
?s
end
? is prefixed with + or ? to indicate whether
they are added or deleted in r
p,t+2
. Similarly, each
text change ?c ? ?C
p,t
is prefixed with + or ? to
indicate whether they are added or deleted.
For example, in Figure 1, a docu-
ment d
kim, 05/23/2014
= r
kim,05/25/2014
?
r
kim,05/23/2014
is a set of slot changes: ?SPOUSE,
+“Kanye West”, +“2014”, “ ”?, ?PARTNER, ?“Kanye
West”, ?“2012-present; engaged”, “ ”? and a set of
text changes: +“Kardashian and West were married in
May 2014”, ?“She began dating West”, ?“they became
engaged in October 2013”.
For each d
p,t
, we use ?S
p,t
to label the docu-
ment and ?C
p,t
to extract features for the docu-
ment. We label d
p,t
that has a new value or start
time added to its infobox: ?s
att
,+?s
value
, ?, ?? ?
?S
p,t
or ?s
att
, ?,+?s
start
, ?? ? ?S
p,t
with the la-
bel begin-s
att
and label d
p,t
that has a new end
time added to its infobox: ?s
att
, ?, ?,+?s
end
? ?
?S
p,t
with the label end-s
att
.
The label represents the state change that
2
a HTML document obtained by “compare selected revi-
sions” functionality in Wikipedia
519
happens in d
p,t
. For example, in Figure 1,
d
kim, 05/23/2014
is labeled with begin-spouse.
The revision history dataset that we make avail-
able for future research consists of all documents
d
p,t
, labeled and unlabeled, ?t ? T
p
, t ?
[01/01/2007, 12/31/2012], and ?p ? P ; a to-
tal of 288,184 documents from revision histories
of 16,909 Wikipedia entities. Using our labeling
process, we find that out of 288,184 documents,
only 41,139 have labels (i.e., have their infobox
updated with new values/start/end time). The dis-
tribution of labels in the dataset is skewed towards
birth and death events as these are life events that
happen to almost all person entities in Wikipedia.
The distribution of labels in the dataset that we re-
lease can be seen in Figure 2. We show only labels
that we evaluate in our task.
For our task of learning state changing verbs
from this revision history dataset, for each la-
beled d
p,t
, we extract as features, verbs (or
verbs+prepositions) v ? ?C
p,t
of which its sub-
ject (or object) matches the Wikipedia entity p
and its object (or subject resp.) matches an in-
fobox value, start or end time: (v
subject
, v
object
) =
(arg1, arg2) or (v
subject
, v
object
) = (arg2, arg1), where
arg1= p and ?s
att
,arg2, ?, ?? or ?s
att
, ?,arg2, ??
or ?s
att
, ?, ?,arg2? ? ?S
p,t
. We use Stanford
CoreNLP (Manning et al., 2014) to dependency
parse sentences and extract the subjects and ob-
jects of verbs. We find that 27,044 out of the
41,139 labeled documents contain verb edits, but
only 4,735 contain verb edits with two arguments,
where one argument matches the entity and an-
other matches the value of the infobox change. We
use the latter for our task, to improve the chance
that the verb edits used as features are related to
the infobox change.
2.2 Model
We use a Maximum Entropy (MAXENT) clas-
sifier
3
given a set of training data = {(v
d
`
, y)}
where v
d
`
= (v
1
, v
2
, ... v
|V |
) ? R
|V |
is the |V |-
dimensional representation of a labeled document
d
`
where V is the set of all verbs in our training
data, and y is the label of d
`
as defined in 2.1.
These training documents are used to estimate a
set of weight vectors w = {w
1
, w
2
, ... w
|Y |
}, w
y
? R
|V |
, one for each label y ? Y , the set of all
3
We use MALLET implementation of MAXENT:
http://mallet.cs.umass.edu/
labels in our training data. The classifier can then
be applied to classify an unlabeled document d
u
using:
p(y|v
d
u
) =
exp(w
y
· v
d
u
)
?
y
?
exp(w
y
?
· v
d
u
)
(1)
2.3 Feature Selection using Constraints
While feature weights from the MAXENT model
allow us to identify verbs that are good features
for predicting a particular state change label, our
distantly supervised training data is inherently
noisy. Changes to multiple infoboxes can hap-
pen within our revision. We therefore utilize con-
straints among state changes to select consistent
verb features for each type of state change.
We use two types of constraints: (1) mutual ex-
clusion (Mutex) which indicate that mutex state
changes do not happen at the same time e.g., up-
date on birthdate should not typically happen with
update on deathcause. Hence, their state changing
verbs should be different. (2) Simultaneous (Sim)
constraints which indicate that simultaneous state
changes should typically happen at the same time
e.g., update on birthdate should typically happen
with other birth-related updates such as birthplace,
birthname, etc. We manually specified these two
types of constraints to all pairs infoboxes where
they apply. We have 10 mutex constraints and 23
simultaneously updated constraints. The full list
of constraints can be found in our website.
Given a set of constraints, a set of labels Y ,
and a set of base verbs
4
B in our training data,
we solve a Mixed-Integer Program (MIP) for each
base verb b ? B to estimate whether b should be a
feature for state change y ? Y .
We obtain label membership probabilities
{P (y|b) = count(y, b)/
?
y
?
count(y
?
, b)} from
our training data. The MIP takes the scores P (y|b)
and constraints as input and produces a bit vector
of labels a
b
as output, each bit a
y
b
? {0, 1} repre-
sents whether or not b should be a feature for y.
The MIP formulation for a base verb b is pre-
sented by Equation 2. For each b, this method tries
to maximize the sum of scores of selected labels,
after penalizing for violation of label constraints.
Let ?
y,y
?
be slack variables for Sim constraints, and
?
y,y
?
be slack variables for Mutex constraints.
4
The verb root or base form of a verb (after removing
preposition)
520
0	  
500	  
1000	  
1500	  
2000	  
2500	  
3000	  
3500	  
4000	  
4500	  
beg
in-­?d
eat
hpl
ace
	  
beg
in-­?b
irth
pla
ce	  
beg
in-­?d
eat
hda
te	  
beg
in-­?b
irth
dat
e	  
beg
in-­?n
am
e	  
beg
in-­?o
ffic
e	  
beg
in-­?o
ccu
pa?
on	  
beg
in-­?p
red
ece
sso
r	  
beg
in-­?t
erm
sta
rt	  
beg
in-­?s
ucc
ess
or	  
beg
in-­?t
erm
end
	  
beg
in-­?c
urr
ent
clu
b	  
beg
in-­?b
irth
nam
e	  
beg
in-­?d
ied
	  
end
-­?sp
ous
e	  
beg
in-­?l
oca
?on
	  
end
-­?ye
ars
ac?
ve	  
beg
in-­?c
hild
ren
	  
beg
in-­?s
pou
se	  
beg
in-­?p
art
y	  
beg
in-­?y
ear
sac
?ve
	  
beg
in-­?c
ityo
?ir
th	  
beg
in-­?c
lub
s	  
beg
in-­?a
lma
ma
ter
	  
beg
in-­?p
rof
ess
ion
	  
beg
in-­?a
wa
rds
	  
beg
in-­?c
oun
try
ofd
eat
h	  
beg
in-­?c
ityo
fde
ath
	  
beg
in-­?p
res
ide
nt	  
beg
in-­?a
lter
na?
ven
am
es	  
beg
in-­?n
a?o
nal
tea
m	  
beg
in-­?y
out
hcl
ubs
	  
beg
in-­?d
eat
hca
use
	  
beg
in-­?e
duc
a?o
n	  
beg
in-­?c
lub
	  
beg
in-­?d
eat
h	  
Figure 2: Distribution of labels we evaluate in our task in the revision history dataset.
Solving MIP per base verb is fast; we reduce the
number of labels considered per base verb i.e., we
only consider a label y to be a candidate for b if
? v
i
? V s.t. w
i
y
> 0 and b = base form of v
i
.
After we output a
b
for each b, we select features
for each label. We only select a verb v
i
to be a
feature for y if the learned weight w
i
y
> 0 and
a
y
b
= 1, where b = the base form of v
i
. Essentially
for each label, we select verb features that have
positive weights and are consistent for the label.
maximize
a
b
, ?
y,y
?
, ?
y,y
?
(
?
y
a
y
b
? P (y|b) ?
?
?y,y
?
??Sim
?
y,y
?
?
?
?y,y
?
??Mutex
?
y,y
?
)
subject to
(
a
y
b
? a
y
?
b
)
2
? ?
y,y
?
, ??y, y
?
? ? Sim
a
y
b
+ a
y
?
b
? 1 + ?
y,y
?
, ??y, y
?
? ?Mutex
?
y,y
?
, ?
y,y
?
? 0, a
y
b
? {0, 1}, ?y, y
?
(2)
3 Experiments
We use 90% of our labeled documents that have
verb edits as features (section 2.1) as training data
and test on the remaining 10%. Since revision his-
tory data is noisy, we manually go through our test
data to discard documents that have incorrect in-
fobox labels by looking the text that changed. The
task is to predict for each document (revision), the
label (infobox slot change) of the document given
its verbs features. We compute precision, recall,
0	  
0.1	  
0.2	  
0.3	  
0.4	  
0.5	  
0.6	  
0.7	  
0.8	  
0.9	  
1	  
Precision	   Recall	   F1	  
Majority-­?class	   MaxEnt	   MaxEnt	  +	  MIP	  
Figure 3: Results of predicting state change labels
(infobox types) using verb features.
and F1 values of our predictions and compare the
values before and after feature selection (Fig. 3).
To the best of our knowledge, the task to learn
state-changing verbs in terms of states defined
in existing knowledge bases and learning it from
Wikipedia edit histories is novel. There is no pre-
vious approach that can be used as baseline; there-
fore we have compared our structured prediction
using MIP and MAXENT with a majority class
baseline. Both our approaches (MAXENT and
MAXENT + MIP) perform better than the majority
class baseline (Figure 3).
We observe the value of doing feature selec-
tion by asserting constraints in an MIP formula-
tion. Feature selection improves precision; re-
sulting in a better F1. By asserting constraints,
some of the inconsistent verb features for the la-
521
Label Verb
begin- +(arg1) die on (arg2), +(arg1) die (arg2),
deathdate +(arg1) pass on (arg2)
begin- +(arg1) be born in (arg2), +(arg1) bear in (arg2),
birthplace +(arg1) be born at (arg2)
begin- +(arg1) succeed (arg2), +(arg1) replace (arg2),
predecessor +(arg1) join cabinet as (arg2), +(arg1) join as (arg2)
begin- +(arg1) lose seat to (arg2), +(arg1) resign on (arg2),
successor +(arg1) resign from post on (arg2)
begin- +(arg1) be appointed on (arg2), +(arg1) serve from (arg2),
termstart +(arg1) be elected on (arg2)
begin- +(arg1) marry on (arg2), +(arg1) marry (arg2),
spouse +(arg1) be married on (arg2), -(arg1) be engaged to (arg2)
end-spouse +(arg1) file for divorce in (arg2), +(arg1) die on (arg2),
+(arg1) divorce in (arg2)
begin- +(arg1) start career with (arg2),
youthclubs +(arg1) begin career with (arg2), +(arg1) start with (arg2)
Table 1: Comparison of verb phrases learned be-
fore and after feature selection for various labels
(infobox types). The texts in bold are (preposi-
tion+) noun that occur most frequently with the
?verb phrase, label? pair in the training data.
bels were removed. For example, before feature
selection, the verbs: “marry”, and “be married
to” were high-weighted features for both begin-
spouse and end-spouse. After asserting constraints
that begin-spouse is mutex with end-spouse, these
verbs (whose base form is “marry”) are filtered out
from the features of end-spouse. We show some of
the learned verb features (after feature selection)
for some of the labels in (Table 1). In average,
we have about 18 verbs per infobox state change
in our state changing verb resource that we make
available for future research.
4 Related Work
Learning from Wikipedia Revision History.
Wikipedia edit history has been exploited in a
number of problems. A popular task in this re-
gard is that of Wikipedia edit history categoriza-
tion (Daxenberger and Gurevych, 2013). This task
involves characterizing a given edit instance as one
of many possible categories such as spelling error
correction, paraphrasing, vandalism, and textual
entailment (Nelken and Yamangil, 2008; Cahill et
al., 2013; Zanzotto and Pennacchiotti, 2010; Re-
casens et al., 2013). Prior methods target various
tasks different from ours.
Learning State Changing Verbs. Very few
works have studied the problem of learning state
changing verbs. (Hosseini et al., 2014) learned
state changing verbs in the context of solving
arithmetic word problems. They learned the effect
of words such as add, subtract on the current state.
The VerbOcean resource was automatically gener-
ated from the Web (Chklovski and Pantel, 2004).
The authors studied the problem of fine-grained
semantic relationships between verbs. They learn
relations such as if someone has bought an item,
they may sell it at a later time. This then involves
capturing empirical regularities such as “X buys
Y” happens before “X sells Y”. Unlike the work
we present here, the methods of (Chklovski and
Pantel, 2004; Hosseini et al., 2014) do not make a
connection to KB relations such as Wikipedia in-
foboxes. In a vision paper, (Wijaya et al., 2014b)
give high level descriptions of a number of possi-
ble methods for learning state changing methods.
They did not implement any of them.
5 Conclusion
In this paper we presented a method that learns
state changing verb phrases from Wikipedia revi-
sion history. We first constructed and curated a
novel dataset from Wikipedia revision history that
is tailored to our task. We showed that this dataset
is useful for learning verb phrase features that are
effective for predicting state changes in the knowl-
edge base (KB), where we considered the KB to
be infoboxes and their values. As future work we
wish to explore the usefulness of our verb resource
to other KBs to improve KB freshness. This is im-
portant because existing KBs are mostly static. We
wish to also explore the application of the learned
verb resource to domains other than Wikipedia in-
fobox and text e.g., for predicting state changes in
the knowledge base from news text.
In this paper, we learned post-conditions of
verbs: state changes that occur when an event ex-
pressed by a verb happens. As future work we
would also explore the feasibility of learning pre-
conditions of verbs from Wikipedia revisions. Ad-
ditionally, most Wikipedia revisions only have text
changes without the associated infobox change.
Therefore, another line of future work is to also
learn from these unlabeled documents.
Acknowledgments
We thank members of the NELL team at CMU
for their helpful comments. This research was
supported by DARPA under contract number
FA87501320005.
522
References
Aoife Cahill, Nitin Madnani, Joel Tetreault, and Di-
ane Napolitano. 2013. Robust systems for preposi-
tion error correction using wikipedia revisions. In In
Proceedings of the Conference of the North Ameri-
can Chapter of the Association for Computational
Linguistics: Human Language Technologies.
Andrew Carlson, Justin Betteridge, Bryan Kisiel,
Burr Settles, Estevam R Hruschka Jr, and Tom M
Mitchell. 2010. Toward an architecture for never-
ending language learning. In AAAI, volume 5,
page 3.
Timothy Chklovski and Patrick Pantel. 2004. Verbo-
cean: Mining the web for fine-grained semantic verb
relations. In Proceedings of EMNLP 2004, pages
33–40.
Johannes Daxenberger and Iryna Gurevych. 2013. Au-
tomatically classifying edit categories in wikipedia
revisions. In EMNLP, pages 578–589.
Anthony Fader, Stephen Soderland, and Oren Etzioni.
2011. Identifying relations for open information ex-
traction. In Proceedings of the Conference on Em-
pirical Methods in Natural Language Processing,
pages 1535–1545. Association for Computational
Linguistics.
Mohammad Javad Hosseini, Hannaneh Hajishirzi,
Oren Etzioni, and Nate Kushman. 2014. Learning
to solve arithmetic word problems with verb catego-
rization. In EMNLP, pages 523–533. ACL.
Christopher D. Manning, Mihai Surdeanu, John Bauer,
Jenny Finkel, Steven J. Bethard, and David Mc-
Closky. 2014. The Stanford CoreNLP natural lan-
guage processing toolkit. In Proceedings of 52nd
Annual Meeting of the Association for Computa-
tional Linguistics: System Demonstrations, pages
55–60.
Tom M. Mitchell, William W. Cohen, Estevam R. Hr-
uschka Jr., Partha Pratim Talukdar, Justin Bet-
teridge, Andrew Carlson, Bhavana Dalvi Mishra,
Matthew Gardner, Bryan Kisiel, Jayant Krishna-
murthy, Ni Lao, Kathryn Mazaitis, Thahir Mo-
hamed, Ndapandula Nakashole, Emmanouil Anto-
nios Platanios, Alan Ritter, Mehdi Samadi, Burr Set-
tles, Richard C. Wang, Derry Tanti Wijaya, Abhi-
nav Gupta, Xinlei Chen, Abulhair Saparov, Malcolm
Greaves, and Joel Welling. 2015. Never-ending
learning. In Proceedings of the Twenty-Ninth AAAI
Conference on Artificial Intelligence, January 25-
30, 2015, Austin, Texas, USA., pages 2302–2310.
Ndapandula Nakashole and Gerhard Weikum. 2012.
Real-time population of knowledge bases: opportu-
nities and challenges. In Proceedings of the Joint
Workshop on Automatic Knowledge Base Construc-
tion and Web-scale Knowledge Extraction, pages
41–45. Association for Computational Linguistics.
Rani Nelken and Elif Yamangil. 2008. Mining
wikipedias article revision history for training com-
putational linguistics algorithms.
Marta Recasens, Cristian Danescu-Niculescu-Mizil,
and Dan Jurafsky. 2013. Linguistic models for an-
alyzing and detecting biased language. In ACL (1),
pages 1650–1659.
Fabian M Suchanek, Gjergji Kasneci, and Gerhard
Weikum. 2007. Yago: a core of semantic knowl-
edge. In Proceedings of the 16th international con-
ference on World Wide Web, pages 697–706. ACM.
Derry Wijaya, Ndapa Nakashole, and Tom Mitchell.
2014a. CTPs: Contextual temporal profiles for time
scoping facts via entity state change detection. In
Proceedings of the Conference on Empirical Meth-
ods in Natural Language Processing. Association
for Computational Linguistics.
Derry Tanti Wijaya, Ndapandula Nakashole, and
Tom M Mitchell. 2014b. Mining and organizing a
resource of state-changing verbs. In Proceedings of
the Joint Workshop on Automatic Knowledge Base
Construction and Web-scale Knowledge Extraction.
Fabio Massimo Zanzotto and Marco Pennacchiotti.
2010. Expanding textual entailment corpora from
wikipedia using co-training.
523
