Investigating GIS and Smoothing for Maximum Entropy Taggers
James R. Curran and Stephen Clark
School of Informatics
University of Edinburgh
2 Buccleuch Place, Edinburgh. EH8 9LW
fjamesc,stephencl@cogsci.ed.ac.uk
Abstract
This paper investigates two elements
of Maximum Entropy tagging: the use
of a correction feature in the Gener-
alised Iterative Scaling (Gis) estimation
algorithm, and techniques for model
smoothing. We show analytically and
empirically that the correction feature,
assumed to be required for the correct-
ness of GIS, is unnecessary. We also ex-
plore the use of a Gaussian prior and a
simple cutoff for smoothing. The exper-
iments are performed with two tagsets:
the standard Penn Treebank POS tagset
and the larger set of lexical types from
Combinatory Categorial Grammar.
1 Introduction
The use of maximum entropy (ME) models has
become popular in Statistical NLP; some exam-
ple applications include part-of-speech (Pos) tag-
ging (Ratnaparkhi, 1996), parsing (Ratnaparkhi,
1999; Johnson et al., 1999) and language mod-
elling (Rosenfeld, 1996). Many tagging problems
have been successfully modelled in the ME frame-
work, including POS tagging, with state of the
art performance (van Halteren et al., 2001), "su-
pertagging" (Clark, 2002) and chunking (Koeling,
2000).
Generalised Iterative Scaling (GIs) is a very
simple algorithm for estimating the parameters of
a ME model. The original formulation of GIS (Dar-
roch and Ratcliff, 1972) required the sum of the
feature values for each event to be constant. Since
this is not the case for many applications, the stan-
dard method is to add a "correction", or "slack",
feature to each event Improved Iterative Scal-
ing (us) (Berger et al., 1996; Della Pietra et al.,
1997) eliminated the correction feature to improve
the convergence rate of the algorithm. However,
the extra book keeping required for us means that
GIS is often faster in practice (Malouf, 2002). This
paper shows, by a simple adaptation of Berger's
proof for the convergence of HS (Berger, 1997),
that GIS does not require a correction feature. We
also investigate how the use of a correction feature
affects the performance of ME taggers.
GIS and HS obtain a maximum likelihood es-
timate (mLE) of the parameters, and, like other
MLE methods, are susceptible to overfitting. A
simple technique used to avoid overfitting is a fre-
quency cutoff, in which only frequently occurring
features are included in the model (Ratnaparkhi,
1998). However, more sophisticated smoothing
techniques exist, such as the use of a Gaussian
prior on the parameters of the model (Chen and
Rosenfeld, 1999). This technique has been ap-
plied to language modelling (Chen and Rosenfeld,
1999), text classification (Nigam et al., 1999) and
parsing (Johnson et al., 1999), but to our knowl-
edge it has not been compared with the use of
a feature cutoff. We explore the combination of
Gaussian smoothing and a simple cutoff for two
tagging tasks.
The two taggers used for the experiments are
a POS tagger, trained on the WSJ Penn Treebank,
and a "supertagger", which assigns tags from the
91
much larger set of lexical types from Combinatory
Categorial Grammar (ccG) (Clark, 2002). Elimi-
nation of the correction feature and use of appro-
priate smoothing methods result in state of the art
performance for both tagging tasks.
2 Maximum Entropy Models
A conditional ME model, also known as a log-
linear model, has the following form:
P(YIX) =	 exp	 ilifi(xJ))	 (1)Z(x) i=1
where the functions fi are the features of the
model, the A, are the parameters, or weights, and
Z(x) is a normalisation constant. This form can be
derived by choosing the model with maximum en-
tropy (i.e. the most uniform model) from a set of
models that satisfy a certain set of constraints. The
constraints are that the expected value of each fea-
ture fi according to the model p is equal to some
value Ki (Rosenfeld, 1996):
	E p(x, y)fi(x, y) = K1	 (2)
x,)
Calculating the expected value according to p
requires summing over all contexts x, which is not
possible in practice. Therefore we use the now
standard approximation (Rosenfeld, 1996):
E p(x,y).fi(x,y) E 1--.)(x)p(yix)fi(x,y)	 (3)
x,y
where p(x) is the relative frequency of context x in
the data. This is convenient because p(x) is zero
for all those events not seen in the training data.
Finding the maximum entropy model that satis-
fies these constraints is a constrained optimisation
problem, which can be solved using the method of
Lagrange multipliers, and leads to the form in (1)
where the Ai are the Lagrange multipliers.
A natural choice for Ki is the empirical expected
value of the feature fi:
Ep fi = E 	 y)fi(x, y)	 (4)
x,y
which leads to the following set of constraints:
E xx)p(ydx)fi(x,y) = Ei3.fi	 (5)
xo,
An alternative motivation for this model is that,
starting with the log-linear form in (1) and deriv-
ing (conditional) MLES, we arrive at the same so-
lution as the ME model which satisfies the con-
straints in (5).
3 Generalised Iterative Scaling
GIS is a very simple algorithm for estimating the
parameters of a ME model. The algorithm is as fol-
lows, where E p f, is the empirical expected value
of J and E pfi is the expected value according to
model p:
• Set A z" equal to some arbitrary value, say:
,(o) = 0
• Repeat until convergence:
A(t+1) = (t)	 1
+	
Epfi
-- log 	
C	 E (t) fP	 1
where (t) is the iteration index and the constant C
is defined as follows:
C = max E fi(x, y)
x,y
i= 1
(8)
In practice C is maximised over the (x, y) pairs
in the training data, although in theory C can be
any constant greater than or equal to the figure in
(8). However, since determines the rate of con-
vergence of the algorithm, it is preferable to keep
C as small as possible.
The original formulation of GIS (Darroch and
Ratcliff, 1972) required the sum of the feature val-
ues for each event to be constant. Since this is
not the case for many applications, the standard
method is to add a "correction", or "slack", fea-
ture to each event, defined as follows:
Ti
fc(x,y) = C — fi(x, y) (9)
For our tagging experiments, the use of a cor-
rection feature did not significantly affect the re-
sults. Moreover, we show in the Appendix, by a
(6)
(7)
92
simple adaptation of Berger's proof for the con-
vergence of HS (Berger, 1997), that GIS converges
to the maximum likelihood model without a cor-
rection feature. 1
The proof works by introducing a correction
feature with fixed weight of 0 into the Hs con-
vergence proof. This feature does not contribute
to the model and can be ignored during weight
update. Introducing this null feature still satis-
fies Jensen's inequality, which is used to provide a
lower bound on the change in likelihood between
iterations, and the existing GIS weight update (7)
can still be derived analytically.
An advantage of GIS is that it is a very simple
algorithm, made even simpler by the removal of
the correction feature. This simplicity means that,
although GIS requires more iterations than 11s to
reach convergence, in practice it is significantly
faster (Malouf, 2002).
4 Smoothing Maximum Entropy Models
Several methods have been proposed for smooth-
ing ME models (see Chen and Rosenfeld (1999)).
For taggers, a standard technique is to eliminate
low frequency features, based on the assumption
that they are unreliable or uninformative (Ratna-
parkhi, 1998). Studies of infrequent features in
other domains suggest this assumption may be in-
correct (Daelemans et al., 1999). We test this for
ME taggers by replacing the cutoff with the use of
a Gaussian prior, a technique which works well for
language models (Chen and Rosenfeld, 1999).
When using a Gaussian prior, the objective
function is no longer the likelihood, L(A), but has
the form:
L13' (A) = L	 1p(A) + E log  	 (10)
•	 .‘121ro	 2o-3'l
Maximising this function is a form of maximum a
posteriori estimation, rather than maximum likeli-
hood estimation. The effect of the prior is to pe-
nalise models that have very large positive or neg-
ative weights. This can be thought of as relaxing
the constraints in (5), so that the model fits the data
1We note that Goodman (2002) suggests that the correc-
tion feature may not be necessary for convergence.
CCG lexical category Description
(S\NP)INP
S\NP
NPIN
NIN
(S\NP)\(S\NP)
transitive verb
intransitive verb
determiner
nominal modifier
adverbial modifier
Table 1: Example CCG lexical categories
less exactly. The parameters o-, are usually col-
lapsed into one parameter which can be set using
heldout data.
The new update rule for GIS with a Gaussian
prior is found by solving the following equation
for the Ai update values (denoted by S), which can
easily be derived from (10) by analogy with the
proof in the Appendix:
Efifi = E C6i  ±(5ip e + 2cr.
This equation does not have an analytic solution
for Si and can be solved using a numerical solver
such as Newton-Raphson. Note that this new up-
date rule is still significantly simpler than that re-
quired for 11s.
5 Maximum Entropy Taggers
We reimplemented Ratnaparkhi's publicly avail-
able POS tagger MXPOST (Ratnaparkhi, 1996;
Ratnaparkhi, 1998) and Clark's CCG supertagger
(Clark, 2002) as a starting point for our experi-
ments. CCG supertagging is more difficult than
PUS tagging because the set of "tags" assigned by
the supertagger is much larger (398 in this imple-
mentation, compared with 45 POS tags). The su-
pertagger assigns CCG lexical categories (Steed-
man, 2000) which encode subcategorisation infor-
mation. Table 1 gives some examples.
The features used by each tagger are binary val-
ued, and pair a tag with various elements of the
context; for example:
= 
{ 1 if word(x)= the & y = DTfi(x,y) 0 otherwise
(12)
word(x) = the is an example of what Ratna-
parkhi calls a contextual predicate. The contex-
tual predicates used by the two taggers are given
in Table 2, where w, is the ith word and t, is the
it2
93
Condition Contextual predicate
freq(w,)	 5 wi = X
freq(w,) <5
(Pos tagger)
X is prefix of w i , IXI < 4
X is suffix of wi, IX < 4
w i contains a digit
w i contains uppercase char
w i contains a hyphen
Vw i ti_i = X
ti-2ti-1 = XY
wi_i = X
Wi-2 = X
= X
Wi+2 = X
Vvt'i
(supertagger)
POSi = X
POSi_i = X
Pos i_2 = X
Posi+ 1 = X
POsi+2 = X
Table 2: Contextual predicates used in the taggers
ith tag. We insert a special end of sentence symbol
at sentence boundaries so that the features looking
forwards and backwards are always defined.
The supertagger uses POS tags as additional fea-
tures, which Clark (2002) found improved perfor-
mance significantly, and does not use the morpho-
logical features, since the POS tags provide equiva-
lent information. For the supertagger, t, is the lex-
ical category of the ith word.
The conditional probability of a tag sequence
y yn given a sentence w w n is approxi-
mated as follows:
P(Y1 Yn1W1 .Wn) fl p(yiki) (13)
— z(J.„,,exp(z1AjfAxi,y0) ( 14)
where x ; is the context of the ith word. The tag-
ger returns the most probable sequence for the
sentence. Following Ratnaparkhi, beam search is
used to retain only the 20 most probable sequences
during the tagging process; 2 we also use a "tag dic-
tionary", so that words appearing 5 or more times
in the data can only be assigned those tags previ-
ously seen with the word.
2Ratnaparkhi uses a beam width of 5.
Split DATA # SENT. # WORDS
Develop WSJ 00 1921 46451
Train WSJ 02-21 39832 950028
Test WSJ 23 2416 56684
Table 3: WSJ training, testing and development
Tagger Acc UWORD UTAG AMB
MXPOST 96.59 85.81 30.04 94.82
BASE 96.58 85.70 29.28 94.82
— CORR 96.60 85.58 31.94 94.85
Table 4: Basic tagger performance on WSJ 00
6 POS Tagging Experiments
We develop and test our improved POS tagger
(c &c) using the standard parser development
methodology on the Penn Treebank WSJ corpus.
Table 3 shows the number of sentences and words
in the training, development and test datasets.
As well as evaluating the overall accuracy of
the taggers (Acc), we also calculate the accu-
racy on previously unseen words (UwoRD), previ-
ously unseen word-tag pairs (UTAG) and ambigu-
ous words (AmB), that is, those with more than
one tag over the testing, training and development
datasets. Note that the unseen word-tag pairs do
not include the previously unseen words.
We first replicated the results of the MXPOST
tagger. In doing so, we discovered a number of
minor variations from Ratnaparkhi (1998):
• MXPOST adds a default contextual predicate
which is true for every context;
• MXPOST does not use the cutoff values de-
scribed in Ratnaparkhi (1998).
MXPOST uses a cutoff of 1 for the current word
feature and 5 for other features. However, the cur-
rent word must have appeared at least 5 times with
any tag for the current word feature to be included;
otherwise the word is considered rare and morpho-
logical features are included instead.
7 POS Tagging Results
Table 4 shows the performance of MXPOST and
our reimplementation. 3 The third row shows a mi-
3By examining the MXPOST model files, we discovered a
minor error in the counts for prefix and suffix features, which
may explain the slight difference in performance.
94
Tagger Acc UWORD UTAG AMB
BASE a = 2.05 96.75 86.74 33.08 95.06
w>2,a= 2.06 96.71 86.62 33.46 95.00
vy> 3, a = 2.05 96.68 86.51 34.22 94.94
pw> 2, a = 1.50 96.76 87.02 32.70 95.06
pw > 3, a = 1.75 96.76 87.14 33.08 95.06
Table 5: WSJ 00 results with varying current and
previous word feature cutoffs
Tagger Acc UwoRD UTAG AMB
1,a=1.95 96.82 87.20 30.80 95.07
> 2, a = 1.98 96.77 87.02 31.18 95.00
>3, a = 1.73 96.72 86.62 31.94 94.94
>4, a= 1.50 96.72 87.08 34.22 94.96
Table 6: WSJ 00 results with varying cutoffs
nor improvement in performance when the correc-
tion feature is removed. We also experimented
with the default contextual predicate but found it
had little impact on the performance. For the re-
mainder of the experiments we use neither the cor-
rection nor the default features.
The rest of this section considers various com-
binations of feature cutoffs and Gaussian smooth-
ing. We report optimal results with respect to the
smoothing parameter a, where a = No-2 and N is
the number of training instances. We found that
using a 2 gave the most benefit to our basic
tagger, improving performance by about 0.15% on
the development set. This result is shown in the
first row of Table 5.
The remainder of Table 5 shows a minimal
change in performance when the current word (w)
and previous word (pw) cutoffs are varied. This
led us to reduce the cutoffs for all features simul-
taneously. Table 6 gives results for cutoff values
between 1 and 4. The best performance (in row
1) is obtained when the cutoffs are eliminated en-
tirely.
Gaussian smoothing has allowed us to retain all
of the features extracted from the corpus and re-
duce overfitting. To get more information into the
model, more features must be extracted, and so we
investigated the addition of the current word fea-
ture for all words, including the rare ones. This re-
sulted in a minor improvement, and gave the best
Tagger Acc UWORD UTAG AMB
MXPOST
c &c
97.05
97.27
83.63
85.21
30.20
28.98
95.44
95.69
Table 7: Tagger performance on WSJ 23
Tagger # PREDICATES # FEATURES
BASE
C&C
44385
254038
121557
685682
Table 8: Model size
performance on the development data: 96.83%.
Table 7 shows the final performance on the test
set, using the best configuration on the develop-
ment data (which we call c&c), compared with
MXPOST. The improvement is 0.22% overall (a
reduction in error rate of 7.5%) and 1.58% for un-
known words (a reduction in error rate of 9.7%).
The obvious cost associated with retaining all
the features is the significant increase in model
size, which slows down both the training and tag-
ging and requires more memory. Table 8 shows
the difference in the number of contextual predi-
cates and features between the original and final
taggers.
8 POS Tagging Validation
To ensure the robustness of our results, we per-
formed 10-fold cross-validation using the whole of
the WSJ Penn Treebank. The 24 sections were split
into 10 equal components, with 9 used for train-
ing and 1 for testing. The final result is an average
over the 10 different splits, given in Table 9, where
o- is the standard deviation of the overall accuracy.
We also performed 10-fold cross-validation using
MXPOST and TNT, a publicly available Markov
model POS tagger (Brants, 2000).
The difference between MXPOST and c&c rep-
resents a reduction in error rate of 4.3%, and the
Tagger Acc cr UWORD UTAG AMB
MXPOST 96.72 0.12 85.50 32.16 95.00
TNT 96.48 0.13 85.31 0.00 94.26
c&c 96.86 0.12 86.43 30.42 95.08
Table 9: 10-fold cross-validation results
95
Tagger Acc UWORD UTAG AMB
COLLINS 97.07 -
C&C 96.93 87.28 34.44 95.31
T&M 96.86 86.91 -
c&c 97.10 86.43 34.84 95.52
Table 10: Comparison with other taggers
difference between TNT and c&c a reduction in
error rate of 10.8%.
We also compare our performance against other
published results that use different training and
testing sections. Collins (2002) uses WSJ 00-
18 for training and WSJ 22-24 for testing, and
Toutanova and Manning (2000) use WSJ 00-20 for
training and WSJ 23-24 for testing. Collins uses
a linear perceptron, and Toutanova and Manning
(T&A4) use a ME tagger, also based on MXPOST.
Our performance (in Table 10) is slightly worse
than Collins', but better than T&M (except for un-
known words). We noticed during development
that unknown word performance improves with
larger a values at the expense of overall accuracy
- and so using separate cy's for different types of
contextual predicates may improve performance.
A similar approach has been shown to be success-
ful for language modelling (Goodman, p.c.).
9 Supertagging Experiments
The lexical categories for the supertagging ex-
periments were extracted from CCGbank, a CCG
version of the Penn Treebank (Hockenmaier and
Steedman, 2002). Following Clark (2002), all cat-
egories that occurred at least 10 times in the train-
ing data were used, resulting in a tagset of 398 cat-
egories. Sections 02-21, section 00, and section 23
were used for training, development and testing, as
before.
Our supertagger used the same configuration as
our best performing POS tagger, except that the
a parameter was again optimised on the develop-
ment set. The results on section 00 and section 23
are given in Tables 11 and 12. 4 c&c outperforms
Clark's supertagger by 0.43% on the test set, a re-
duction in error rate of 4.9%.
Supertagging has the potential to benefit more
4The results in Clark (2002) are slightly lower because
these did not include punctuation.
Tagger Acc UWORD UTAG AMB
CLARK
C&C a= 1.52
90.97
91.45
90.86
91.16
28.48
28.79
89.84
90.38
Table 11: Supertagger WSJ 00 results
Tagger Acc U WORD UTAG AMB
CLARK
C&C a= 1.52
91.27
91.70
88.48
88.92
32.20
32.30
90.32
90.78
Table 12: Supertagger WSJ 23 results
from Gaussian smoothing than POS tagging be-
cause the feature space is sparser by virtue of the
much larger tagset. Gaussian smoothing would
also allow us to incorporate rare longer range de-
pendencies as features, without risk of overfitting.
This may further boost supertagger performance.
10 Conclusion
This paper has demonstrated, both analytically
and empirically, that GIS does not require a cor-
rection feature Eliminating the correction feature
simplifies further the already very simple estima-
tion algorithm. Although GIS is not as fast as
some alternatives, such as conjugate gradient and
limited memory variable metric methods (Malouf,
2002), our C&C POS tagger takes less than 10 min-
utes to train, and the space requirements are mod-
est, irrespective of the size of the tagset.
We have also shown that using a Gaussian prior
on the parameters of the ME model improves per-
formance over a simple frequency cutoff. The
Gaussian prior effectively relaxes the constraints
on the ME model, which allows the model to
use low frequency features without overfitting.
Achieving optimal performance with Gaussian
smoothing and without cutoffs demonstrates that
low frequency features can contribute to good per-
formance.
Acknowledgements
We would like to thank Joshua Goodman, Miles
Osborne, Andrew Smith, Hanna Wallach, Tara
Murphy and the anonymous reviewers for their
comments on drafts of this paper. This research
is supported by a Commonwealth scholarship and
a Sydney University Travelling scholarship to the
96
Kamal Nigam, John Lafferty, and Andrew McCallum. 1999.
Using maximum entropy for text classification. In Pro-
ceedings of the IJCAI-99 Workshop on Machine Learning
for Information Filtering, pages 61-67, Stockholm, Swe-
den.
Adwait Ratnaparkhi. 1996. A maximum entropy part-of-
speech tagger. In Proceedings of the EMNLP Conference,
pages 133-142, Philadelphia, PA.
Adwait Ratnaparkhi. 1998. Maximum Entropy Models for
Natural Language Ambiguity Resolution. Ph.D. thesis,
University of Pennsylvania.
Adwait Ratnaparkhi. 1999. Learning to parse natural lan-
guage with maximum entropy models. Machine Learn-
ing, 34(l-3):l51-175.
Ronald Rosenfeld. 1996. A maximum entropy approach to
adaptive statistical language modeling. Computer Speech
and Language, 10:187-228.
Mark Steedman. 2000. The Syntactic Process. The MIT
Press, Cambridge, MA.
Kristina Toutanova and Christopher D. Manning. 2000. En-
riching the knowledge sources used in a maximum entropy
part-of-speech tagger. In Proceedings of the EMNLP con-
ference, Hong Kong.
Hans van Halteren, Jakub Zavrel, and Walter Daelemans.
2001. lmproving accuracy in wordclass tagging through
combination of machine learning systems. Computational
Linguistics, 27(2): 199-229.
Appendix A: Correction free GIS
This proof of GIS convergence without the correc-
tion feature is based on the ITS convergence proof
by Berger (1997).
Start with some initial model with arbitrary pa-
rameters A E {ili , A2.....A0 }. Each iteration of
the GIS algorithm finds a set of new parameters
A' A+A (A1 +81,A2+62.....A +6} which
increases the log-likelihood of the model.
The change in log-likelihood is as follows:
As in Berger (1997), use the inequality - log a ^
1 - a to establish a lower bound on the change in
likelihood:
L(A + A) - L(A)
(x,y) log pA (yIx) - j3(x, y) log pA(yIx)
j5(x,y
=1
df(x, y) - ZA'(x) (x) log
ZA(x)
(15)
first author, and EPSRC grant GR1M96889.
References
Adam Berger, Stephen Della Pietra, and Vincent Della Pietra.
1996. A maximum entropy approach to natural language
processing. Computational Linguistics, 22(1 ):39-7 1.
Adam Berger. 1997. The improved iterative scaling algo-
rithm: A gentle introduction. Unpublished manuscript.
Thorsten Brants. 2000. TnT - a statistical part-of-speech
tagger. In Proceedings of the 6th Conference on Applied
Natural Language Processing.
Stanley Chen and Ronald Rosenfeld. 1999. A Gaussian prior
for smoothing maximum entropy models. Technical re-
port, Carnegie Mellon University, Pittsburgh, PA.
Stephen Clark. 2002. A supertagger for Combinatory Cat-
egorial Grammar. In Proceedings of the 6th Interna-
tional Workshop on Tree Adjoining Grammars and Re-
lated Frameworks, pages 19-24, Venice, Italy.
Michael Collins. 2002. Discriminative training methods for
Hidden Markov Models: Theory and experiments with
perceptron algorithms. In Proceedings of the EMNLP
Conference, pages 1-8, Philadelphia, PA.
Walter Daelemans, Antal Van Den Bosch, and Jakub Zavrel.
1999. Forgetting exceptions is harmful in language learn-
ing. Machine Learning, 34(1-3): 11-43.
J. N. Darroch and D. Ratcliff. 1972. Generalized iterative
scaling for log-linear models. The Annals of Mathemati-
cal Statistics, 43(5):1470-1480.
Stephen Della Pietra, Vincent Della Pietra, and John Laf-
ferty. 1997. Inducing features of random fields. IEEE
Transactions Pattern Analysis and Machine Intelligence,
I 9(4):380-393.
Joshua Goodman. 2002. Sequential conditional generalized
iterative scaling. In Proceedings of the 40th Meeting of
the ACL, pages 9-16, Philadelphia, PA.
Julia Hockenmaier and Mark Steedman. 2002. Acquiring
compact lexicalized grammars from a cleaner treebank. In
Proceedings of the Third LREC Conference, Las Palmas,
Spain.
Mark Johnson, Stuart Geman, Stephen Canon, Zhiyi Chi,
and Stefan Riezler. 1999. Estimators for stochastic
'unification-based' grammars. In Proceedings of the 37th
Meeting of the ACL, pages 535-541, University of Mary-
land, MD.
Rob Koeling. 2000. Chunking with maximum entropy mod-
els. In Proceedings of the CoNLL Workshop 2000, pages
139-141, Lisbon, Portugal.
Robert Malouf. 2002. A comparison of algorithms for max-
imum entropy parameter estimation. In Proceedings of
the Sixth Workshop on Natural Language Learning, pages
49-55, Taipei, Taiwan.
97
Lp(A + A) — Lp(A)
E ixx,
	 6ifi1 ,Y
=1
81 t(x, y) + 1 —
1 ZA,(X)\
ZA(X)
ZA'(X)
P(1) 
ZA(x)
,y).f(x, y)
PANYM(x,y) exp (C 6; )
(20)
Call the right hand side of this last equation
g{(A1A). If we can find a A for which R(AA) > 0,
then Lp(A +A) is an improvement over L(A). The
obvious approach is to maximise A(AIA) with re-
spect to each Si , but this cannot be performed di-
rectly, since differentiating ANA) with respect to
6 1 leads to an equation containing all elements of
A.
Let f be a convex function on the interval I. If
xi , x2, x, c I and t1, t2,. t, are non-negative
real numbers such that ri? ti = 1, then
ti f (x i )	 (18)
i=1	 i=1
Since Z',1+1 fi (* ) ')
=	
= 1 and the exponential func-ii	 c
tion is convex, we can apply Jensen's inequality to
give a new form of A(AIA):
A(AIA) 1 +	 ifi(x, y) —
E ixx,	 pAcylx)	 3")  exp (C S i )
(19)
Call this bound B(AIA). Della Pietra et al. (1997)
give extra conditions on the continuity and
derivative of the lower bound, in order to
guarantee convergence. These conditions can
be verified for Y(AA) in a similar way to
Della Pietra et al. (1997).
Differentiating B(AA) with respect to each
weight update di (1	 n) gives:
The trick is to rewrite R(AA) as follows, with
an extra term which will be used to satisfy Jensen's
inequality:
A(AIA) = 1 + 6ifi(Y,Y)
13(x)
	 PA (Yix) exp ( 
i=1 
,fi(x,y)  C 6)
(17)
where C is previously defined in equation 8,
fn-Fi(x, y) = fc(x, y) as in (9), and On+ i is defined to
be zero. Note that the correction feature has been
introduced but has been given a constant weight of
zero.
This reformulation of R(AA) is similar to
Berger's for the ITS proof, but with a crucial dif-
ference: Berger introduces f# = f(x,y) into
the equation rather than C, and does not have the
correction feature.
The next part of the proof introduces another,
less tight, lower bound on the change in likelihood,
by using Jensen's inequality, which can be stated
as follows:
The effect of introducing C rather than f# is that
solving ()BOA)36., = 0 can be done analytically (at
the cost of a slower convergence rate), giving the
following:
1	 E,13(x,Y)fi(x,y)6i	=	 log	 _ ''
C	 Ex
 13 ( X) Ey P A(YIX)fi(X, A')
1	 E,3 fi
	
=	 l og 	C	 E p(i) fi
which leads to the update rule in (7).
(21)
98
