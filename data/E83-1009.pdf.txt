A PROLOG IMPLEMENTATION OF LEXICAL FUNCTIONAL GRAMMAR 
AS A BASE FOR A NATURAL LANGUAGE PROCESSING SYSTEM 
Werner Frey and Uwe Reyle 
Department of L lngulst lcs 
University of Stuttgart 
W-Germany 
O. ABSIRACr 
~ne aim of this paper is to present parts of our system \[2\], 
which is to construct a database out of a narrative natural 
l a ~  text. We think the parts are of interest in their o~. 
The paper consists of three sections: 
(I) We give a detailed description of the PROLOG - 
implementation of the parser which is based on the theory of 
lexical functional grammar (I/V.). The parser covers the 
fragment described in \[1,94\]. I.e., it is able to analyse 
constructions involving functional control and long distance 
dependencies. We will to show that 
- PROLOG provides an efficient tool for LFG-implementation: a 
phrase structure rule annotated with ftmctional schemata l i ke~ 
M~ w~is ~^ be interpreted as, first, identifying the special 
grmr, m/tical relation of subject position of any sentence 
analyzed by this clause to he the h~ appearing in it, and 
second, as identifying all g~,~mtical relations of the sentence 
with those of the VP. This ~iversal interpretation of the 
~tavar iab les  ~ and & corresponds to the universal 
quantification of variables appearing in PROl /~uses .  The 
procedural ssm~ntios of PROLOG is such that the instantietion of 
the ~ariables in a clause is inherited from the instantiation 
given by its subgoals, if they succeed. Thus there is no need 
for a separate component which solves the set of equations 
obtained by applying the I/G algorithm. 
-there is a canonical way of translati~ LFG into a PROLOG 
progz~,~. 
(II) For the se~ntic representation of texts we use the 
Discourse Representation q\]neory developped by Psns \[,a~p. At 
present the implerentation includes the fragment described in 
\[4\]. In addition it analyses different types of negation and 
certain equi- and raising-verbs. We postulate some requirenents 
a semantic representation has to fulfill in order to he able to 
analyse whole texts. We show how K~p's theory meets these 
requirements by analyzing sample disconrses involving amaphoric 
~'s. 
(III) Finally we sketch how the parser formalism ca~ be 
augmented to yield as output discourse representation 
structures. To do this we introduce the new notion of 'logical 
head' in addition to the LFG notion of 'grmmmtical head'. 
reason is the wellknown fact that the logical structure of a 
sentence is induced by the determiners and not by the verb which 
on the other hand determines the thenatic structure of the 
sentence. However the verb is able to restrict quantifier scope 
anbiguities or to induce a preference ordering on the set of 
possible quantifier scope relations. ~-erefore there must he an 
interaction between the grammatical head and the logical head of 
a phrase. 
I. A PROLOG ~W\[/94~NTATION OF LFG 
A main topic in AI research is the interaction between different 
components of a systen. But insights in this field are 
primarily reached by experience in constructing a complem 
system. Right frcm the beginning, however, one should choose 
formalisms which are suitable for a s~nple and transparent 
transportion of information. We think LFG meets this 
requirenent. The formalism exhibiting the analysis of a 
sentence c~ he expanded in a simple way to contain entries 
which are used during the parse of a whole text, for example 
discourse features like topic or domain dependent knowledge 
conming from a database associated with the lexicon. Since I/G 
is a kind of u~_ification grammar it allows for constructing 
patterns which enable the following sentences to refine or to 
change the content of these disc~irse features. Knowledge 
gathered by a preceding sentence can he used to lead the search 
in the lexicon by demanding that certain feature values match. 
In short we hope that the nearly tmiform status of the different 
description tools allows simple procedures for the expansion and 
mani~Llation by other components of the syst~n. 
But this was a look ahead. Let us mow come to the less 
a~bitious task of implementing the grmmmr of \[i,~4\]. 
iexical functional g ~  (LFG) is a theory that extends phrase 
structure ~L~,mrs without using transformations. It ~nphasizes 
the role of the grammatical f~Ictions and of the lexicon. 
Another powerful formalism for describing natural languages 
follows from a method of expressing grammars in logic called 
definite clause gz~,srs (DOG). A DOG constitutes a PROIOG 
programne. 
We %~nt to show first, how LFG can he tr-amslated into DOG and 
second, that PROLOC provides an efficient tool for 
I/D-Implementation in that it allows for the construction of 
functional structures directly during the parsing process. I.e. 
it is not necessary to have seperate components which first 
derive a set of f~mctional equations from the parse tree and 
secondly generate an f-str~ture by solving these equations. 
Let us look at an example to see how the LFG machinery works. 
We take as the sample sentence "a w~man expects an anerican to 
win'. ql%e parsing of the sentence proceeds along the following 
lines. ~ne phrase structure rules in (i) generate the phrase 
structure tree in (2) (without considering the schemata written 
beneath the rule elements). 
Q)  s - ->  NP vP 
VP - ->  V NP NP PP VP' 
~'= ~ (d'OBJ)=$ (~OBJ2)=&(¢(WPCASE)=% (#X~)4  
w"  - -> (to) vP 
¢=~ 
~R ~ - -> ~-T N 
=~ ~=~ 
(2) ..I. s ~ _ ~  v P 
FET N 
a worn expects & ~me~'ioan to win 
the c-stru~ture will be annotated with the functional 
schemata associated with the rules . ~he schemata found in the 
lexical entries are attached to the leave nodes of the tree. 
~his is shown in (3). 
52 
43) 
(4-SI~I)= 4, 
1 1 
(*SPEC)=A (+NLM)=SG 
(~NU'O=SG (+Gm)=F~ 
(~PmS)=3 
(~mZD)='~ndAN" 
V NP VP" 
l~r  N VP 
1 
(~S~EC)=~ 
(4m0---SC 
(+NU~)=SG 
4%~mS)=3 
(+PRED)= ' ~RICAN" 
(¢ reED)=" E~ECT<(SUBJ) ( X~)>(  OBJ)' 
(4 ~ENSE)=mES 
\ 
~=~ 
V 
(~ suBJ ~M)=SG (÷mED)='Wn~(SUBJ)>' 
(~S\[mJ ProS)=3 
4+xcem su~J)=(osJ) 
(4) ( fl SIBJ) = f2 f3 = f6 
fl = f3 (f6 fRED) = "EXPECT<(SL~J)(XC~MP)>(OBJ)" 
f2 = f4 (f6 T~5~E) = PRES 
f2 = f5 (f6 ~ SUE/) = (f60BJ) 
(f5.Nt~0 = SC (f5 PRED) = 'we~er 
• 
Then the tree will he Indexed. ~e indices instantiate the up- 
and down-arrows. An up-arrow refers to the node dominating the 
node the schema is attached to. A d~n-~ refers to the node 
which carries the f~ctlonal schema. 
Tns result of the instantiation process is a set of ftmctional 
equations. We have listed part of them in 44). TOe solving of 
these equations yields the f~ctional str~zture in (5). 
ED "l,~l~/'r' ~ 3 
NINSG 
reED "EX~ECT<(SU~) ( XCmP)> ( O~J)" 
A 
~mED 'A~m~C~ NU~ SG~ ) 
It is composed of grammtical ftmction naras, s~antic forms and 
feature symbols. The crucial elements of LFG (in contrast to 
transformational g~n.ar)are the grammticel functiens like 
SL~J, OBJ, XCCMP and so on. The fu%ctional structure is to he 
read as containing pointers frem the funct io~ appearing in 
the semantic forms to the corresponding f-structures. 
The ~,,atical functions assumed by LFG are classified in 
subcategorizable (or governable) and nonm~*zategorizable 
functions. TOe subcategorizable ones are those to which lexlcal 
items can make reference. TOe item "expects' for e~smple 
subcategorizes three functions, but only the material inside the 
angled brackets list the predicate's smmntic arguments. X{I~P 
and XAIU are ~/~e only open grammtical functions, i.e. ,they can 
denote functionally controlled clauses. In our exhale this 
phenomena is lexically induced by the verb "expects'. Tnis is 
expressed by its last sch~mm "(%XC\[~P SUBJ)=(@OBJ)". It has the 
effect that the 0 \ ]~of  the sentence will becmme the SUBJ of the 
XC~MP, that me.%ns in our example it becomes the argument of d~e 
predicate 'win'. 
Note that the analysis of the sentence "a woman promises an 
~merlcan to win" would differ in two respects. First the verb 
'prcmlses' lists all the three ft~ctions subcategorized by it in 
its sem~ntlc argument structure. And second 'premises" differs 
from "expects' just in its f~mctional control schema, i.e., here 
we find the equation "(#X{~MP SUBJ)=(A~SLBJ) '' yielding an arrow 
from the SL~J of the XC~MP to the SUBJ of the sentence in the 
final f-structure. 
An f-structure must fulfill the following conditions in order to 
be a solution 
-uniqueness: every f-nane which has a value has a ~ique value 
-completeness:the f-structure must contain f-values for all the 
f-na~es subcategorized by its predicate 
-coherence: all the subcate~orizable fzmctions the f-structure 
contains must be ~tegor i sed  by its predicate 
The ability of lexical irons to determine the features of other 
items is captured by the trivial equations. Toey propagate the 
feature set which is inserted by the lexical item up the tree. 
For e~mple the features of the verb become features of the VP 
end the features of the VP become features of S. The ~llqueness 
principle guarantees that any subject that the clause contains 
will have the features required by the verb. The trivial 
equation makes it also possible that a lexical item, here the 
verb, can induce a f~mctional control relationship he~ 
different f-structures of the sentence. An ~mportant constraint 
for all references to ftmctions and fonctional features is the 
principle of f~mctional locality: designators in lexical and 
grmm~tical schemata can specify no more than two iterated 
f~mction applications. 
Our claim is t|mt using DCG as a PROLOG programe the parsing 
process of a sentence according to the LFG-theory can be done 
more efficiently by doing all the three steps described above 
simultaneously. 
Why is especially PROLOG useful for doing this? 
In the a;motated e-structure of the LFG theory the content of 
the f~mctional equations is only '"~wn" by the node the 
equation is annotated to and by the immediately dominating node. 
The memory is so to speak locally restricted. Thus during the 
parse all those bits of info~tion have to be protocolled for 
so~e other nodes. This is done by means of the equations. In a 
PROIOG programme however the nodes turn into predicates with 
arEun*~ts. Tns arguments could be the same for different 
predicates within a clause. Therefore the memory is 
'~orizentall~' not restricted at all. Furthermore by sharing of 
variables the predicates which are goals ca~ give infon~tion to 
their subgoals. In short, once a phrase structure grammr has 
been translated into a PROIOG pragraune every node is 
potentially able to grasp information from any other node. 
Nonetheless the parser we get by embedding the restricted LFG 
formalism Into the highly flexible r~G formalism respects the 
constraints of Lexlcal ftmctlonal granular. 
Another important fact is that LFG tells the PROIOG programmer 
in an exact manner what information the purser needs at which 
node and just because this information is purely locally 
represented in the LFG formalism it leads to the possibility of 
translating 12G into a PROLOG programme in a ca~mical wey. 
We have said that in solving the equations LFG sticks together 
informations ¢mmiog from different nodes to build up the final 
output. To mirror this the following PROLOG feature is of 
greatest importance. For the construction of the wanted output 
during the parsing process structures can he built up piecsneal, 
leaving unspecified parts as variables. The construction of the 
output need not he strictly parallel to the application of the 
corresponding rules. Variables play the role of placeholders 
for structures which are found possibly later in the parsing 
process. A closer look at the verb entries as formulated by LFG 
reveals that the role of the f~mction names appearing there is 
to function as placeholders too. 
To summarize: By embedding the restricted LFG formalism into 
the hlgly flexible definite clause grammr fonmg/ismwemake 
llfe easier. Nonetheless the parser we get respects the 
constraints which are formulated by the LFG theory. 
Let us now consider some of the details. Xhe n~les under (i) 
53 
are transformed into the PROLOG programme in (6). (* indicates 
the variables.) 
(6) S (*el0 *ell *outps) <- -  
NP (*el0 *c12 *featnp *outpnp) 
VP (*c12 *ell (SIBJ (*outpnp *featnp)) T~ *outpa) 
VP (*clO *ell *outpsubj *featv *outps) <- -  
v (*cent (~o~mmb/~)  *leafy *outps) 
F~/~IP (*el0 *¢12 OBJ ~ *ill) 
Ifun£tional FA(~ (*¢12 *c13 OBJ2 ~ *~)  
controll FAf~=P (*el3 *el40BL ~ *~) 
FA¢~" (*¢14 *ell *oont xcem ~ nil) l i~iAst~ 
FAOJP' (*clO *ell (*gf *cont) *gf ~ )  . *i0) *10) 
~-VP" (*¢I0 *ell *cont *outpxcomp) 
NP (*el0 *ell *ontpnp) <-  
lET (*el0 *¢ii *ontpdet) 
N (*outpdet *outpnp) 
We use the content of the function assigning equations to build 
up parts of the whole f-structure during the parsing process. 
Crur~al for this is the fact dmt every phrase has a ~mique 
category, called its head, with the property that the functional 
features of each phrase are identified with those of its head. 
The head category of a phrase is characterized by d~e assignment 
of the trivial ft~%ctional-equation and by the property of being 
a major category, ql%e output of each procedure is constructed 
by the subprocedure corresponding to the head. ~ means that 
all information resulting from the other subprooedures is given 
to that goal. ll~is is done by the 'outp' variables in the 
programme. ThUS the V procedure builds up the f-structure of 
the sentence. Since VP is the head of the S rule the VP 
procedure has an argument variable for the SUB7 f-structure. 
Since V is the head of the VP rule this variable together with 
the structures coming fore the sister nodes are given to V for 
the construction of the final output. As a consequence our 
output does not contain pointers in contrast to Bresnan' s 
output. Rather the argument positions of the predicates are 
instantiated by the indicated f-stmmtures. For each category 
there is a fixed set of features, l~e head category is able to 
impose restrictions on a fixed subset of that feature set. This 
subset is placed on a prominent position, l~e corresponding 
feature values percolating up towmrds the head category will end 
up in the sate position d&~anding that their values agree. Tois 
is done by the ' feat" variables. The ~aiqueneas condition is 
trivially fulfilled since the passing around of parts of the 
f-structure is done by variables, and PROIOG instantiates a 
variable with at most one value.. 
(7) V ( (V(KEP (SL~J (*outpobj *featobj))) Ifenctional control\] 
((S\[BJ (*outpsubj (SG 3))) ~ Icheck listl 
(OBJ (*outpobj *featobJ)) (XC~MP *outpxcomp)) 
+'- I output I 
((TK~SE m~)  (reED "EXPECt (*outpaubj *outpxcemp)')) ) 
~he checking of the completeness and coherence condition is done 
by the Verb procedure. (7) shows the PROLOG assertion 
corresponding to the lexical entry for 'expects'. In every 
assertion for verbs there is a list containing the g~=m~,~tical 
ftmctions subcategorized by the verb. This is the second 
argument in (7), called "check list'. ~ list is passed 
around during the parse. ~lis is done by the list umderlined 
with waves in (6). Every subcategorlzable f~action appearing in 
the sentence must be able to shorten the llst. Tnis guarantees 
coherence. In the end the list must have diminished to NIL. 
This guarantees completene&s. 
As can be seen in (7) a by-product of this passing around the 
check list is to bring the values of the grammtical functions 
subcategorized by the verb down to the verb's predicate argument 
structure. 
To handle famctional control the verb entry contains an argument 
to encode the controller. Ibis is the first argument in (7). 
lhe procedure ~li.ch delivers XC~MP (here the VP" procedure) 
receives d~is variable (the underlined variable *cont in (6)) 
since verbs can induce ft~ctional control only upon the open 
grammtical famction XOCMP. For toug~ement  constructions 
the s-prime procedure receives the controller variable too. But 
inside this clause the controller must be put onto the long 
distance controller list, since SCCMP is not an open grammatical 
function. 
That leads us to the long distance dependencies 
(8) The glrl wonders whose playmate's nurse the baby saw.  
(9) S" - ->  NP .p \[\] 
(+Focns)=~ 
(10) / s 
NP /VP~ 
V S' 
~, ,~ ~ N NP VP \ 
i Y-k I IX / \ , 
.il~ .~_  N I IET N V NP l 
"f~._w~ose playmate s nurse the baby saw e ~o 
In Phglish ~st ions and relatives an element at the front ~of 
the clause is understood as filling a particular g r~t ica l  
role within the clause, determined by the position of a 
c-structure gap .  Consider sentence (8).  This kind of 
dependency is called constituent control, because in contrast to 
f~ctional control the constituent structure configurations are 
the primary conditioning factors and not lexical irons. 
Bresnan/kaplan Introduce a new formal mechanism for represanting 
long- distance dependencies. To handle the embedded question 
sentence they use the rule in (9). The double arrow downwards 
represents the controller of the constituent control 
relationship. To this arrow corresponds another double arrow 
which points up~mrds and represents the oontrolee. This one is 
attached for emanple to the empty string NP - ->~,  But as the 
arrow iode~d with \[4~fn\] shows the controller may affect also a 
designated set of lexical items which includes interrogative 
pronoens , detsminers and adverbs. "whose' for e.xanple has the 
lexlcal entry: whose N, (~PRED)= 'who', CASE = GI~1,~\[,~. 
(~ds kind of control relationship is needed to an~yse the 
complex NP 'Whose playmate's mlrse" In sentence (8)) 
The control relationships are illustrated in (I0). 
Corresponding controllers and controlees must have compatible 
subscripts. ~ subscripts indicate the category of the 
controlles. Toe superscript S of the one controller indicates 
that the corresponding controlee has to be found in a S-rooted 
control domain whereas the \[-kwh\] controlee for the other 
controller has to be found beneath a ~ node. 
Finally the box around the S-node reeds to be explained. It 
indicates the fact that the node is a boLmding node. 
Kaplan/Bresnan state the following convention 
A node M helor~s to a control domain with root node R if and 
only if R dominates M and there are no bo~iding nodes on the 
path from M up to but not including R. 
Tnia c~nvention prevents constructions like the one in (ii). 
(Ii) The girl wondered what the m~se asked who saw 
Long distance control is haldle by the programme using a long 
distance controller list, enriched at some special nodes with 
new oontrollers, passed down the tree and not allowed to go 
further at the bounding nodes. 
(12) s" (*c_19"~I *outpsc) <-- 
1!_onB NP (((_~_t~_ \]_). *el 0) *cl l  *featnp *outpnp) 
d i_s_ta~e 
_con_tro!le_r - rest (*ell_ *clO) 
list l S ((*oL!t~np*f_eatnj~ !S_N~)) ~ *outpsc) 
Every time a controlne is found its subscript has to match the 
corresponding entry of the first menber of the controller list. 
If this happens the first element will be deleted from the list. 
The fact that a controlee can only match the first elenent 
reflects the crossed dependency constraint. *clO is the input 
54 
controller variable of the S" procedure in (12). *cll is the 
output variable. *clO is expanded by the \[4wh\] controller 
within the NP subgoal. This controller must find its controllee 
during d~e e~ecution of the NP goal. Note that the output 
variable of the NP subgoal is identical with the output variable 
of the main goal and that the subgoal S" does have different 
controller lists. ~ reflects the effect of the box aroLmd 
the S-node, i.e. no controller coming do,retards can find its 
controlee inside the S-prncedure. l~e only controller going 
into the S goal is the one introduced below the NP node with 
dnmsln root S. Clearly the output variable of S has to be nil. 
There are rules which allow for certain controllers to pass a 
boxed node Bresna~Kaplan state for example the rule in (13). 
(13) s" - ->  (nhat) s 
This rule has the effect that S-rooted contollers are allowed to 
pass the box. Here we use a test procedure which puts only the 
contollers iedexed by S onto the controller l i s t  going to the S 
goal. ~ereby we obtain the right treatment of sentence (14). 
(14) the girl wondered who John believed that Mary claimed that 
the baby saw . 
In a corres~eding manner the complex NP 'whose playmate's 
nurse" of sentence (8) is analysed. 
II. SEMANTIC REPRESD~jLTION 
As senantic representation we use the D(iscourse) 
R(epresentation) T(heory) developped by Hans Yamp \[4\]. I.e. we 
do not adopt the semantic theory for L(exical) F(unctional) 
C~rammr) proposed by Per-Kristian Halverson \[2\]. Halverson 
translates the f~nctional structures of LFG into so-called 
semantic structures being of the same structural nature, namely 
scyclic graphs. The semlntin structures are the result of a 
translation procedure which is based on the association of 
formulas of intensional logic to the semantic forms appearing in 
the functional structure. The reason not to take this approach 
will be explained by postulating some requirements a se~anclc 
representation has to fulfill in order to account for a 
processing of texts. Tnen we will show that these requlr~ents 
are rP~I\]y necessary by analysing some sample sente,ces and 
discourses. It will turn out that ~T accoante for them in an 
intuitively fully satisfactory ~y .  
Because we cannot review \[RT in detail here the reader should 
consult one of the papers explaining the ftmdanentals of the 
theory (e.g. \[~\] ), or he should first look at the last 
paragraph in which an outline is given of how our parser is to 
be extended in order to yield an IRS-typed output - instead of 
the 'traditional' (semantic) flmctional structures. 
The basic building principle of a semantic representation is to 
associate with every signlfic2mt lexical entry (i.e., every 
entry which does contribute to the truthcondldtlonsl aspect of 
the meaning of a sentence) a semantic structure. Compositional 
principles, then, will construct the semantic representation of 
a sentence by combining these se~antlc structures according to 
their syntactic relations. The desired underlying principle is 
that the smmntlc structures associated with the semantic forms 
should not be. changed during the composition process. To vat it 
dif6erently: one ~nts  the association of the semantic 
structures to be independent of the syntactic context in which 
the semantic form appears. This requirement leads to 
difficulties in the tradition of translating sentences into 
formulas of e.g. predicate or intentional logic. 
Consider sentences 
(I) If Johe admires a woman then he kisses her 
and 
(2) Every man who a~ires a woman kisses her 
the truth conditions of which are determined by the first order 
fommlas 
(3) Yx (wonmn(x) & a~mire(Jo~m,x) --> kiss(Jo,m.x) ) 
and 
(4) vx vy (ran(x) & ~y)  & am~re(x,y) --> kiss(x,y) ) 
respectively. ~le problem is that the definite description "a 
woman" reemerges as universally quantified in the logical 
representation- and there is no way out, because the prono~m 
"she" has to be boLmd to the wommn in question. I~T provides a 
general acco~mt of the meaning of indefinite descriptions, 
conditionals, tmiversally quantified noun phrases and anaphoric 
pronoun, s.t. our first requirement is satisfied. 1~e 
semantic represEmtations (called nRs's) which are assigned to 
sentences in which such constructions jointly appear have the 
truth conditions which our intuitions attribute to them. 
The second reas~ why we decided to use I~R as semantic 
formalism for LFG is that the constraction principles for a 
sentence S(i) of a text D = S(1), .... S(n) are fozmulated with 
respect to the semantic representation of the prec~Ing  text 
S(1),... ,S(i-l). 1~erefore the theory can accotmt for 
intersentential semantic relationships in the same way as for 
intrasentential ones. ~ is the second requirement: a 
s~antic representation has to represent the discourse as a 
whole and not as the mere union of the s~antic representations 
of its isolated sentences. 
A third requirenent a senantlc representation has to fulfill is 
the reflection of configurational restrictions on anaphoric 
links: If one embeds sentence (2) into a conditional 
(6) *If every man who admires a woman kisses her then she is 
stressed 
the anaphoric link in (2) is preserved. But (6) does - for 
configurational reasons - not allow for an anaphoric relation 
between the "she" and "a woman". The same happens 
intersententially as shown by 
(7) If Jo~m admires a woman tl~n he kisses her. *She is 
enraged. 
A last requirement we will stipulate here is the following: It 
is neccessary to draw inferences already during the construction 
of the semantic representation o f  a sentence S(i) of the 
discourse. The inferences must operate on the semantic 
representation of the already analyzed discourse S(1),... ,S(i-l) 
as well as on a database containing the knowledge the text talks 
about. ~ requirement is of major importance for the analysis 
of definite descriptions. Consider 
(8) Pedro is a farmer. If a woman loves him then he is happy. 
Mary loves Pedro. The happy farmer marries her 
in which the definite description "the happy farme' is used to 
refer to refer to the individual denoted by "Pedro". In order 
to get this llnk one has to infer that Pedro is indeed a happy 
farmer and that he is the only ore. If this were not the case 
the use of the definite description would not he appropriate. 
Such a deduction mechanism is also needed to analyse sentence 
(9) John bought a car. the engine has 160 horse powers 
In this case one has to take into account some ~nowledge of the 
world, nanely the fact that every car has exactly one engine. 
To illustrate the ~y the s~mmtic representation has to be 
interpreted let us have a brief look at the text-~RS for the 
sample discourse (8) 
\[ Pedrou v love(v,u) 
I leve(y,u) 
I~u ,v )  
ThUS a IRS K consists of 
(i) a set of discourse referents: discourse individuals, 
discourse events, discourse propositions, etc. 
(il) a set of conditions of the following types 
- atomic conditions, i.e. n-ary relations over discourse 
referents 
- complex conditions, i.e. n-ary relations (e.g. --> or :) 
over sub-~S's and discourse referents (e.g. K(1) --> K(2) or 
55 
p:K, where p is a discourse proposition) 
A whole ~S can be tmderstoed as partial model representing the 
individuals introduced by the discourse as well as the facts and 
rules those individuals are subject to. 
The truth conditions state that a IRS K is true in a model M if 
there is a proper imbedding from K Into M. Proper embedding is 
defined as a f~mction f from the set of discourse referents of K 
in to M s.t. (i) it is a homomorphism for the atomic conditions 
of the IRS and (il) - for the c~se of a complex condition K(1) 
--> I((2) every proper embedding of K(1) that extends f is 
extendable to a proper embedding of K(2). 
- for the case of a complex condition p:K the modelthenretlc 
object correlated with p (i.e. a proposition if p is a 
discourse proposition, an event if p is a discourse event, etc.) 
must be such that it allows for a proper embedding of K in it. 
Note that the definition of proper embedding has to be made more 
precise in order to adapt it to the special s~nantica one uses 
for propositional attitudes. We cannot go into details bare. 
Nonet/~lese the truth condition as it stands should make clear 
the following: whether a discourse referent introduced implies 
existence or not depends on its position in the hierarchy of the 
IRS's. C/ven a nRS which is true in M then eactly those 
referents introduced in the very toplevel \[RS imply existence; 
all others are to he interpreted as ~iversally quantified, if 
they occur in an antecedent IRS, or as existentially quantified 
if they occur in a consequent BRS, or as having opaque status if 
they occur in a ~S specified by e.g. a discourse proposition. 
Tnus the role of the hierarchical order of the BRS's is to build 
a base for the definition of truth conditions. But furthemnore 
the hierarchy defines an accessibility relation, which restricts 
the set of possible antecedents of anaphorie NP's. Ibis 
aceessibiltity relation is (for the fra~nent in \[~\]) defined as 
follows: 
For a given sub-ERS K0 all referents occurring in NO or in any 
of the n~S's in which NO is embedded are accessible. 
Furthermore if NO is a consequent-~S then the referents 
occurring in its corresponding antecedent I\]~S on the left are 
accessible too. 
This gives us a correct trea~aent for (6) and (7). 
For the time being - we have no algorithm which restricts and 
orders the set of possible anaphorie antecedents ~-*-ording to 
contextual conditions as given by e.g. 
(5) John is reading a book on syntax and Bill is reading a book 
on s~-oatics o 
a paperback J 
Therefore our selection set is restricted only by the 
accessibility relation and the descriptive content of the 
anaphoric NP" s. Of course for a~apheric pronouns this content 
is reduced to a minimum, namely the grm~rstical features 
associated to them by the lexical entries. This accounts e.g. 
for the difference in acceptability of (I0) and (II). 
(I0) Mary persuaded every man to shave |dmself 
(II) *~4ary promised every man to shave himself 
The ~S's for (i0) and (II) show that beth discourse referents, 
the one for '~r~' and the one for a '~an", are accessible from 
the position at which the reflexive prex~an has to be resolved. 
But if the '~dmselP' of (ii) is replaced by x it cannot he 
identified with y having the (not explicitely shown) feature 
female. 
Ii0")I Y *~')/ / mary = y 
/ ipers~de(y~,p)l 
/ ~ prom~(y~,p) 
Definite d e s e ~ t u e  of the 
semantic content of their co,mon-noun-phrases and the existence 
and ~niqeeness conditions presupposed by th~n. "~erefore in 
order to analyse definite descriptions we look for a discourse 
referent introduced in the preceding IRS for which the 
description holds and we have to check whether this descrition 
holds for one referent only. Our algorithm proceeds as follows: 
First we build up a small IRS NO encoding the descriptive 
content of the common-no~-phrase of the definite description 
together with its ~miqlmess and existency condition: 
El): x 
farmer(x) 
happy(x) 
Y I L happy(y) _\] 
,%econd we have to show that we can prove I<0 out of the text-nRS 
of the preceeding discourse , with the restriction that only 
accessible referents are taken into account. The instantiation 
of *x by this proof gives us the correct anteoedent the definite 
description refers to. Now we forget about NO and replace the 
antecedent discourse referent for the definite noun phrase to 
get the whole text-IRS (8'). 
Of course it is possible that the presuppositions are not 
mentioned explicitely in the discourse but follow implicitely 
from the text alone or from the text together with the knowledge 
of the domain it talks about. So in cases like 
(9) John bought a car. The engine has 260 horse powers 
Pere the identified referent is functionally related to 
referents that are more directly accessible, nmne_ly to John's 
car. Furthermore such a functional dependency confers to a 
definite description the power of introducing a new discourse 
referent, nanely the engine which is functionally determined by 
the car of which it is part. ~ shifts the task from the 
search for a direct antecedent for "the engine" to the search 
for the referent it is f%mctionelly related to. But the basic 
mechanism for finding this referent is the same deduct ive  
mechanism just outlined for the '~lappy farme~" example. 
III. ~CWARIB AN ~ f ~  ~ "GRAMMATICAL PARSIAK~' AND 
"lOGICAL P~RSIN~' 
In this section we will outline the principles anderlying the 
extension of our parser to produce ~S's  as output. Because 
none of the fragments of ~T  contains Raising- and Equi-verbs 
taking infinitival or that-complements we are confronted with 
the task of writing construction rules for such verbs. It will 
turn out, however, that it is not difficult to see how to extend 
~T to eomprise such constructions. "ibis is due to the fact 
that using LFG as syntactic base for IRT - and not the 
categorial syntax of Kamp - the ~raveling of the thematic 
relations in a sentence is already accomplished in f-structure. 
Therefore it is streightfo~rd to formulate construction rules 
which give the correct readings for (i0) and (ii) of the 
previous section, establish the propositional equivalence of 
pairs with or without Raising, Equi (see (I), (2)), etc. 
(I) John persuaded Mary to come 
(2) John persuaded ~%~ry that she should come 
let us first describe the BRS construction rules by the f~niliar 
example 
(3) every man loves a woman 
Using Ksmp's categorial syntax, the construction rules operate 
top down the tree. The specification of the order in which the 
parts of the tree are to he treated is assumed to be given by 
the syntactic rules. I.e. the specification of scope order is 
directly determined by the syntactic construction of the  
sentence. We will deal with the point of scope ambiguities 
after baying described the ~y  a BRS is constructed. Our 
description - operating bottom up instead top down - is 
different from the one given in \[4\] in order to come closer to 
the point we want to make. But note that this differei~ce is not 
~l genuine one. ~hus according to the first requiranent of the 
previous section we assume that to each semantic from a semantic 
structure is associated. For the lexical entries of (3) we ~mve 
56 
the follc~ing: 
man --> man(*) a --> 
woman--> woman(*) every --> \[ \[-x--\] -. \[-~ \[ 
loves --> love(*,*) 
Ehe semantic structures for the common nouns and the verbs ere 
n-place predicates. The structure for "a" is a IRSwith 
discourse individual v. introduced and conditions not yet 
specified, q~e entry for "every' is a ~S with no discourse 
individuals introduced an the toplevel. It contains however a 
compl~ condition ED --> KI s.t a discourse individusl x is 
intreduced in ~3 and both ED and K1 contain any other 
conditions. 
The IRS constroction rules specify how these s~nantic structures 
are to be ecmbined by propagating them up the tree. ~e  easiest 
way to illustrate that is to do it by t_he following picture (for 
the case of marrow scope readin~ of '% woman"): 
man(*) love(*,*) \ [ \ ]  woman(*) 
/ I I I I 
every man _ loves a woman 
For the wide scope reading the 5R~-tree of "a wonmn" is treated 
at the very end to give 
Y 1 
(5) ~ Woman(~ 
The picture should make clear the way we ~mnt to extend the 
parsing mechanism described in section 1 in order to produce 
~S's as output ~ no more f-stroctures: instead of partially 
instantiated f-structures determined by the lexical entries 
partially instsntiated IRS's are passed eround the tree getting 
aocc~plished by unification. Toe control mechanism of LFG will 
automatically put the discourse referents into the correct 
argument position of the verb. lhus no additional work has to 
be done for the g~=~,~atical relations of a sentence. 
But what about the logical relations? 
Recall that each clause has a unique head end that the 
functional features of each phrase are identified with those of 
its head. For (3) the head of S -~> NPVP is the VP and the 
head of VP --> V NP is the V. %h~m the outstanding role of the 
verb to determine and restrict the grmmmtical'relations of the 
sentence is captured. (4) , however, shows that the logical 
relations of the sentence are mainly determined by its 
determiners, which are not ~eads of the NP-phrases and the 
NP~phrases thsmselves are not the heads of the VP- and S-phrase 
respectively. To account foc this dichotomy we will call the 
syntactically defined notion of head "grammatical head" and we 
will introduce a further notion of "logical head" of a phrase. 
Of course, in order to make the definition work it has to be 
elaborated in a way that garantses that the logical head of a 
phrase is uniquely determied too. Consider 
(~) John pe.rsuaded an american to win 
(7) John expected an american to win 
for ~dch we propose the following ORS's 
|amerlcan(y) p: ~- -~ 
\[persuade(j ,y,p) 
(7") " (7" )  j y 
John = j Jolm = J 
\[ expect(j ,p) amerlcaa(y) 
\[p:\[  y expect(j ,p) 
mmericm1(y) p: 
\[ hwin(y) 
The fact that (7) does not neccesserily imply existence of ~m 
8merlcan whereas (6) does is triggered by the difference between 
Equl- and R~dslng-verbe. 
Suppose we define the NP to he the logical hend of the phrase VP 
--> V NP VP I. ~ the logical relations of the VP would be 
those of the ~E ~. This amounts to incorporating the logical 
structures of the V and the VP ~ into the logical structure of the 
NP, which is for both (6) and (7) 
and thus would lead to the readings represented in (6") and 
(7"). 0onsequentiy (7") ~mlld not he produced. 
Defining the logical head to be the VP | would exclude the 
r~a~.gs (6") and (7"'). 
Evidently the last possibility of defining the logical head to 
be identical to the grammatical head, namely the V itself, seems 
to be the only solution. But this would block the construction 
already at the stage of unifying the NP- and VPhstructures with 
persuade(*,*,*) or expect(*,*). At first thought one easy way 
out of this dilemma is to associate with the lexical entry of 
the verb not the mere n-place predicate but a IRS containing 
this predicate as atomic condition, lhis makes the ~lification 
possible but gives us the following result: 
Jo = j  
\[american(~)l ~ 
~pers~de(j ,*,p)~ I 
Of course o o e ~ i s  open to produce the set of 
~S 's  representing (6) and (7).  BUt th is  means that one has to 
work on ( * )a f te r  having reached the top of the tree - a 
consequence that seems undesirable to us. 
the only way out is to consider the logical  head as not 
being uniquely identified by the mere phrase structure 
configurations. As the above example for the phrase VP --> V NP 
VP ~ shows its head depends on the verb class too. But we will 
still go further. 
We claim that it \[s possible to make the logical head to 
additionslly depend on the order of the surface string, on the 
use of active and passive voice and probably others. Ibis will 
give us a preference ordering of the scope ambiguities of 
sentences as the following: 
- Every man loves a Woman 
- A Woman is loved by every man 
- A ticket is bought by every man 
- Every man bought a ticket 
%he properties of ~lification granmers listed above show that 
the theoretical frsm~ork does not impose any restrictions on 
that plan. 
REFERENCES 
if\] Bresnsn, J. (ed.), "the Mental Representation of Grsmmatical 
Relations". MIT Press, Cambridge, Mmss., 1982 
\[2\] Frey, Weroer/ Reyle, L~e/ Rohrer, O~ristian, "A-tomatic 
Construction of a Knowledge Base by Analysing Texts in 
Natural fan, rage", in: Proceedings of the Eigth Intern. 
Joint Conference on Artificial Intelligence II, \[g83 
\[3\] P~Iverson, P.-k., "S~antics for Lexicai Flmctional 
GrammaP'. In: Linguistic Inquiry 14, 1982 
\[4\] Kamp, Pmns, "A ~eory of Truth and S~m~ntic Representa= 
tion". In: J.A. Groenendijk, T.U.V. (ed.), Formal 
Semantics in the Study of Natural language I, 1981 
57 
