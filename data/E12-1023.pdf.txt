Proceedings of the 13th Conference of the European Chapter of the Association for Computational Linguistics, pages 224–233,
Avignon, France, April 23 - 27 2012. c©2012 Association for Computational Linguistics
Large-Margin Learning of Submodular Summarization Models
Ruben Sipos
Dept. of Computer Science
Cornell University
Ithaca, NY 14853 USA
rs@cs.cornell.edu
Pannaga Shivaswamy
Dept. of Computer Science
Cornell University
Ithaca, NY 14853 USA
pannaga@cs.cornell.edu
Thorsten Joachims
Dept. of Computer Science
Cornell University
Ithaca, NY 14853 USA
tj@cs.cornell.edu
Abstract
In this paper, we present a supervised
learning approach to training submodu-
lar scoring functions for extractive multi-
document summarization. By taking a
structured prediction approach, we pro-
vide a large-margin method that directly
optimizes a convex relaxation of the de-
sired performance measure. The learning
method applies to all submodular summa-
rization methods, and we demonstrate its
effectiveness for both pairwise as well as
coverage-based scoring functions on mul-
tiple datasets. Compared to state-of-the-
art functions that were tuned manually, our
method significantly improves performance
and enables high-fidelity models with num-
ber of parameters well beyond what could
reasonably be tuned by hand.
1 Introduction
Automatic document summarization is the prob-
lem of constructing a short text describing the
main points in a (set of) document(s). Exam-
ple applications range from generating short sum-
maries of news articles, to presenting snippets for
URLs in web-search. In this paper we focus on
extractive multi-document summarization, where
the final summary is a subset of the sentences
from multiple input documents. In this way, ex-
tractive summarization avoids the hard problem
of generating well-formed natural-language sen-
tences, since only existing sentences from the in-
put documents are presented as part of the sum-
mary.
A current state-of-the-art method for document
summarization was recently proposed by Lin and
Bilmes (2010), using a submodular scoring func-
tion based on inter-sentence similarity. On the one
hand, this scoring function rewards summaries
that are similar to many sentences in the origi-
nal documents (i.e. promotes coverage). On the
other hand, it penalizes summaries that contain
sentences that are similar to each other (i.e. dis-
courages redundancy). While obtaining the exact
summary that optimizes the objective is computa-
tionally hard, they show that a greedy algorithm
is guaranteed to compute a good approximation.
However, their work does not address how to
select a good inter-sentence similarity measure,
leaving this problem as well as selecting an appro-
priate trade-off between coverage and redundancy
to manual tuning.
To overcome this problem, we propose a su-
pervised learning method that can learn both
the similarity measure as well as the cover-
age/reduncancy trade-off from training data. Fur-
thermore, our learning algorithm is not limited to
the model of Lin and Bilmes (2010), but applies to
all monotone submodular summarization models.
Due to the diminishing-returns property of mono-
tone submodular set functions and their computa-
tional tractability, this class of functions provides
a rich space for designing summarization meth-
ods. To illustrate the generality of our approach,
we also provide experiments for a coverage-based
model originally developed for diversified infor-
mation retrieval (Swaminathan et al., 2009).
In general, our method learns a parameterized
monotone submodular scoring function from su-
pervised training data, and its implementation is
available for download.1 Given a set of docu-
ments and their summaries as training examples,
1http://www.cs.cornell.edu/˜rs/sfour/
224
we formulate the learning problem as a struc-
tured prediction problem and derive a maximum-
margin algorithm in the structural support vec-
tor machine (SVM) framework. Note that, un-
like other learning approaches, our method does
not require a heuristic decomposition of the learn-
ing task into binary classification problems (Ku-
piec et al., 1995), but directly optimizes a struc-
tured prediction. This enables our algorithm to di-
rectly optimize the desired performance measure
(e.g. ROUGE) during training. Furthermore, our
method is not limited to linear-chain dependen-
cies like (Conroy and O’leary, 2001; Shen et al.,
2007), but can learn any monotone submodular
scoring function.
This ability to easily train summarization mod-
els makes it possible to efficiently tune models
to various types of document collections. In par-
ticular, we find that our learning method can re-
liably tune models with hundreds of parameters
based on a training set of about 30 examples.
This increases the fidelity of models compared
to their hand-tuned counterparts, showing sig-
nificantly improved empirical performance. We
provide a detailed investigation into the sources
of these improvements, identifying further direc-
tions for research.
2 Related work
Work on extractive summarization spans a large
range of approaches. Starting with unsupervised
methods, one of the widely known approaches
is Maximal Marginal Relevance (MMR) (Car-
bonell and Goldstein, 1998). It uses a greedy ap-
proach for selection and considers the trade-off
between relevance and redundancy. Later it was
extended (Goldstein et al., 2000) to support multi-
document settings by incorporating additional in-
formation available in this case. Good results can
be achieved by reformulating this as a knapsack
packing problem and solving it using dynamic
programing (McDonald, 2007). Alternatively, we
can use annotated phrases as textual units and se-
lect a subset that covers most concepts present
in the input (Filatova and Hatzivassiloglou, 2004)
(which can also be achieved by our coverage scor-
ing function if it is extended with appropriate fea-
tures).
A popular stochastic graph-based summariza-
tion method is LexRank (Erkan and Radev, 2004).
It computes sentence importance based on the
concept of eigenvector centrality in a graph of
sentence similarities. Similarly, TextRank (Mi-
halcea and Tarau, 2004) is also graph based rank-
ing system for identification of important sen-
tences in a document by using sentence similar-
ity and PageRank (Brin and Page, 1998). Sen-
tence extraction can also be implemented using
other graph based scoring approaches (Mihalcea,
2004) such as HITS (Kleinberg, 1999) and po-
sitional power functions. Graph based methods
can also be paired with clustering such as in Col-
labSum (Wan et al., 2007). This approach first
uses clustering to obtain document clusters and
then uses graph based algorithm for sentence se-
lection which includes inter and intra-document
sentence similarities. Another clustering-based
algorithm (Nomoto and Matsumoto, 2001) is a
diversity-based extension of MMR that finds di-
versity by clustering and then proceeds to reduce
redundancy by selecting a representative for each
cluster.
The manually tuned sentence pairwise model
(Lin and Bilmes, 2010; Lin and Bilmes, 2011) we
took inspiration from is based on budgeted sub-
modular optimization. A summary is produced
by maximizing an objective function that includes
coverage and redundancy terms. Coverage is de-
fined as the sum of sentence similarities between
the selected summary and the rest of the sen-
tences, while redundancy is the sum of pairwise
intra-summary sentence similarities. Another ap-
proach based on submodularity (Qazvinian et al.,
2010) relies on extracting important keyphrases
from citation sentences for a given paper and us-
ing them to build the summary.
In the supervised setting, several early methods
(Kupiec et al., 1995) made independent binary de-
cisions whether to include a particular sentence
in the summary or not. This ignores dependen-
cies between sentences and can result in high re-
dundancy. The same problem arises when using
learning-to-rank approaches such as ranking sup-
port vector machines, support vector regression
and gradient boosted decision trees to select the
most relevant sentences for the summary (Metzler
and Kanungo, 2008).
Introducing some dependencies can improve
the performance. One limited way of introduc-
ing dependencies between sentences is by using a
linear-chain HMM. The HMM is assumed to pro-
duce the summary by having a chain transitioning
225
between summarization and non-summarization
states (Conroy and O’leary, 2001) while travers-
ing the sentences in a document. A more expres-
sive approach is using a CRF for sequence label-
ing (Shen et al., 2007) which can utilize larger and
not necessarily independent feature spaces. The
disadvantage of using linear chain models, how-
ever, is that they represent the summary as a se-
quence of sentences. Dependencies between sen-
tences that are far away from each other cannot
be modeled efficiently. In contrast to such lin-
ear chain models, our approach on submodular
scoring functions can model long-range depen-
dencies. In this way our method can use proper-
ties of the whole summary when deciding which
sentences to include in it.
More closely related to our work is that of Li
et al. (2009). They use the diversified retrieval
method proposed in Yue and Joachims (2008) for
document summarization. Moreover, they assume
that subtopic labels are available so that additional
constraints for diversity, coverage and balance can
be added to the structural SVM learning prob-
lem. In contrast, our approach does not require the
knowledge of subtopics (thus allowing us to ap-
ply it to a wider range of tasks) and avoids adding
additional constraints (simplifying the algorithm).
Furthermore, it can use different submodular ob-
jective functions, for example word coverage and
sentence pairwise models described later in this
paper.
Another closely related work also takes a max-
margin discriminative learning approach in the
structural SVM framework (Berg-Kirkpatrick et
al., 2011) or by using MIRA (Martins and Smith,
2009) to learn the parameters for summarizing
a set of documents. However, they do not con-
sider submodular functions, but instead solve an
Integer Linear Program (ILP) or an approxima-
tion thereof. The ILP encodes a compression
model where arbitrary parts of the parse trees
of sentences in the summary can be cut and re-
moved. This allows them to select parts of sen-
tences and yet preserve some gramatical struc-
ture. Their work focuses on learning a particular
compression model based on ILP inference, while
our work explores learning a general and large
class of sentence selection models using submod-
ular optimization. The third notable approach
uses SEARN (Daume´, 2006) to learn parameters
for joint summarization and compression model,
however it uses vine-growth model and employs
search to to find the best policy which is then used
to generate a summary.
A specific subclass of submodular (but not
monotone) functions are defined by Determinan-
tal Point Processes (DPPs) (Kulesza and Taskar,
2011). While they provide an elegant probabilis-
tic interpretation of the resulting summarization
models, the lack of monotonicity means that no
efficient approximation algorithms are known for
computing the highest-scoring summary.
3 Submodular document summarization
In this section, we illustrate how document sum-
marization can be addressed using submodular set
functions. The set of documents to be summa-
rized is split into a set of individual sentences
x = {s1, ..., sn}. The summarization method
then selects a subset yˆ ? x of sentences that max-
imizes a given scoring function Fx : 2x ? R
subject to a budget constraint (e.g. less than B
characters).
yˆ = arg max
y?x
Fx(y) s.t. |y| ? B (1)
In the following we restrict the admissible scoring
functions F to be submodular.
Definition 1. Given a set x, a function F : 2x ?
R is submodular iff for all u ? U and all sets s
and t such that s ? t ? x, we have,
F (s ? {u})? F (s) ? F (t ? {u})? F (t).
Intuitively, this definition says that adding u to
a subset s of t increases f at least as much as
adding it to t. Using two specific submodular
functions as examples, the following sections il-
lustrate how this diminishing returns property nat-
urally reflects the trade-off between maximizing
coverage while minimizing redundancy.
3.1 Pairwise scoring function
The first submodular scoring function we con-
sider was proposed by Lin and Bilmes (2010) and
is based on a model of pairwise sentence similar-
ities. It scores a summary y using the following
function, which Lin and Bilmes (2010) show is
submodular:
Fx(y) =
?
i?x\y,j?y
?(i, j)? ?
?
i,j?y:i 6=j
?(i, j). (2)
226
Figure 1: Illustration of the pairwise model. Not all
edges are shown for clarity purposes. Edge thickness
denotes the similarity score.
In the above equation, ?(i, j) ? 0 denotes a mea-
sure of similarity between pairs of sentences i and
j. The first term in Eq. 2 is a measure of how simi-
lar the sentences included in summary y are to the
other sentences in x. The second term penalizes
y by how similar its sentences are to each other.
? > 0 is a scalar parameter that trades off be-
tween the two terms. Maximizing Fx(y) amounts
to increasing the similarity of the summary to ex-
cluded sentences while minimizing repetitions in
the summary. An example is illustrated in Figure
1. In the simplest case, ?(i, j) may be the TFIDF
(Salton and Buckley, 1988) cosine similarity, but
we will show later how to learn sophisticated sim-
ilarity functions.
3.2 Coverage scoring function
A second scoring function we consider was
first proposed for diversified document retrieval
(Swaminathan et al., 2009; Yue and Joachims,
2008), but it naturally applies to document sum-
marization as well (Li et al., 2009). It is based on
a notion of word coverage, where each word v has
some importance weight ?(v) ? 0. A summary
y covers a word if at least one of its sentences
contains the word. The score of a summary is
then simply the sum of the word weights its cov-
ers (though we could also include a concave dis-
count function that rewards covering a word mul-
tiple times (Raman et al., 2011)):
Fx(y) =
?
v?V (y)
?(v). (3)
In the above equation, V (y) denotes the union of
all words in y. This function is analogous to a
maximum coverage problem, which is known to
be submodular (Khuller et al., 1999).
Figure 2: Illustration of the coverage model. Word
border thickness represents importance.
An example of how a summary is scored is il-
lustrated in the Figure 2. Analogous to the defini-
tion of similarity ?(i, j) in the pairwise model, the
choice of the word importance function ?(v) is
crucial in the coverage model. A simple heuristic
is to weigh words highly that occur in many sen-
tences of x, but in few other documents (Swami-
nathan et al., 2009). However, we will show in the
following how to learn ?(v) from training data.
Algorithm 1 Greedy algorithm for finding the
best summary yˆ given a scoring function Fx(y).
Parameter: r > 0.
yˆ ? ?
A? x
while A 6= ? do
k ? arg max
l?A
Fx(yˆ ? {l})? Fx(yˆ)
(cl)r
if ck+
?
i?yˆ ci?B and Fx(yˆ?{k})?Fx(yˆ)?
0 then
yˆ ? yˆ ? {k}
end if
A? A\{k}
end while
3.3 Computing a Summary
Computing the summary that maximizes either of
the two scoring functions from above (i.e. Eqns.
(2) and (3)) is NP-hard (McDonald, 2007). How-
ever, it is known that the greedy algorithm 1 can
achieve a 1 ? 1/e approximation to the optimum
solution for any linear budget constraint (Lin and
Bilmes, 2010; Khuller et al., 1999). Even further,
this algorithm provides a 1 ? 1/e approximation
for any monotone submodular scoring function.
The algorithm starts with an empty summariza-
tion. In each step, a sentence is added to the sum-
mary that results in the maximum relative increase
227
of the objective. The increase is relative to the
amount of budget that is used by the added sen-
tence. The algorithm terminates when the budget
B is reached.
Note that the algorithm has a parameter r in
the denominator of the selection rule, which Lin
and Bilmes (2010) report to have some impact
on performance. In the algorithm, ci represents
the cost of the sentence (i.e., length). Thus, the
algorithm actually selects sentences with large
marginal unity relative to their length (trade-off
controlled by the parameter r). Selecting r to be
less than 1 gives more importance to “information
density” (i.e. sentences that have a higher ratio
of score increase per length). The 1 ? 1e greedy
approximation guarantee holds despite this addi-
tional parameter (Lin and Bilmes, 2010). More
details on our choice of r and its effects are pro-
vided in the experiments section.
4 Learning algorithm
In this section, we propose a supervised learning
method for training a submodular scoring func-
tion to produce desirable summaries. In particu-
lar, for the pairwise and the coverage model, we
show how to learn the similarity function ?(i, j)
and the word importance weights ?(v) respec-
tively. In particular, we parameterize ?(i, j) and
?(v) using a linear model, allowing that each de-
pends on the full set of input sentences x:
?x(i, j) = wT?px(i, j) ?x(v) = w
T?cx(v). (4)
In the above equations, w is a weight vector that
is learned, and ?px(i, j) and ?cx(v) are feature vec-
tors. In the pairwise model, ?px(i, j) may include
feature like the TFIDF cosine between i and j or
the number of words from the document titles that
i and j share. In the coverage model, ?cx(v) may
include features like a binary indicator of whether
v occurs in more than 10% of the sentences in x
or whether v occurs in the document title.
We propose to learn the weights following a
large-margin framework using structural SVMs
(Tsochantaridis et al., 2005). Structural SVMs
learn a discriminant function
h(x) = arg max
y?Y
w>?(x, y) (5)
that predicts a structured output y given a (pos-
sibly also structured) input x. ?(x, y) ? RN is
called the joint feature-map between input x and
output y. Note that both submodular scoring func-
tion in Eqns. (2) and (3) can be brought into the
form wT?(x, y) for the linear parametrization in
Eq. (6) and (7):
?p(x, y)=
?
i?x\y,j?y
?px(i, j)? ?
?
i,j?y:i 6=j
?px(i, j), (6)
?c(x, y)=
?
v?V (y)
?cx(v). (7)
After this transformation, it is easy to see that
computing the maximizing summary in Eq. (1)
and the structural SVM prediction rule in Eq. (5)
are equivalent.
To learn the weight vector w, structural SVMs
require training examples (x1, y1), ..., (xn, yn) of
input/output pairs. In document summarization,
however, the “correct” extractive summary is typ-
ically not known. Instead, training documents
xi are typically annotated with multiple manual
(non-extractive) summaries (denoted by Y i). To
determine a single extractive target summary yi
for training, we find the extractive summary that
(approximately) optimizes ROUGE score – or
some other loss function ?(Y i, y) – with respect
to Y i.
yi = argmin
y?Y
?(Y i, y) (8)
We call the yi determined in this way the “target”
summary for xi. Note that yi is a greedily con-
structed approximate target summary based on its
proximity to Y i via ?. Because of this, we will
learn a model that can predict approximately good
summaries yi from xi. However, we believe that
most of the score difference between manual sum-
maries and yi (as explored in the experiments sec-
tion) is due to it being an extractive summary and
not due to greedy construction.
Following the structural SVM approach, we
can now formulate the problem of learning w as
the following quadratic program (QP):
min
w,??0
1
2
?w?2 +
C
n
n?
i=1
?i (9)
s.t. w>?(xi, yi)?w>?(xi, yˆi) ?
?(yˆi, Y i)? ?i, ?yˆ
i 6= yi, ?1 ? i ? n.
The above formulation ensures that the scor-
ing function with the target summary (i.e.
w>?(xi, yi)) is larger than the scoring function
228
Algorithm 2 Cutting-plane algorithm for solving
the learning optimization problem.
Parameter: desired tolerance  > 0.
?i :Wi ? ?
repeat
for ?i do
yˆ ? arg max
y
wT?(xi, y) + ?(Y i, y)
if wT?(xi, yi) +  ? wT?(xi, yˆ) +
?(Y i, yˆ)? ?i then
Wi ?Wi ? {yˆ}
w ? solve QP (9) using constraintsWi
end if
end for
until noWi has changed during iteration
for any other summary yˆi (i.e., w>?(xi, yˆi)).
The objective function learns a large-margin
weight vectorw while trading it off with an upper
bound on the empirical loss. The two quantities
are traded off with a parameter C > 0.
Even though the QP has exponentially many
constraints in the number of sentences in the in-
put documents, it can be solved approximately
in polynomial time via a cutting plane algorithm
(Tsochantaridis et al., 2005). The steps of the
cutting-plane algorithm are shown in Algorithm
2. In each iteration of the algorithm, for each
training document xi, a summary yˆi which most
violates the constraint in (9) is found. This is done
by finding
yˆ ? arg max
y?Y
wT?(xi, y) + ?(Y i, y),
for which we use a variant of the greedy algorithm
in Figure 1. After a violating constraint for each
training example is added, the resulting quadratic
program is solved. These steps are repeated until
all the constraints are satisfied to a required preci-
sion .
Finally, special care has to be taken to appro-
priately define the loss function ? given the dis-
parity of Y i and yi. Therefore, we first define an
intermediate loss function
?R(Y, yˆ) = max(0, 1?ROUGE1F (Y, yˆ)),
based on the ROUGE-1 F score. To ensure that
the loss function is zero for the target label as de-
fined in (8), we normalized the above loss as be-
low:
?(Y i, yˆ) = max(0,?R(Y
i, yˆ)??R(Y
i, yi)),
The loss ? was used in our experiments. Thus
training a structural SVM with this loss aims to
maximize the ROUGE-1 F score with the man-
ual summaries provided in the training examples,
while trading it off with margin. Note that we
could also use a different loss function (as the
method is not tied to this particular choice), if we
had a different target evaluation metric. Finally,
once a w is obtained from structural SVM train-
ing, a predicted summary for a test document x
can be obtained from (5).
5 Experiments
In this section, we empirically evaluate the ap-
proach proposed in this paper. Following Lin and
Bilmes (2010), experiments were conducted on
two different datasets (DUC ’03 and ’04). These
datasets contain document sets with four manual
summaries for each set. For each document set,
we concatenated all the articles and split them
into sentences using the tool provided with the
’03 dataset. For the supervised setting we used
10 resamplings with a random 20/5/5 (’03) and
40/5/5 (’04) train/test/validation split. We deter-
mined the best C value in (9) using the perfor-
mance on each validation set and then report aver-
age performence over the corresponding test sets.
Baseline performance (the approach of Lin and
Bilmes (2010)) was computed using all 10 test
sets as a single test set. For all experiments and
datasets, we used r = 0.3 in the greedy algorithm
as recommended in Lin and Bilmes (2010) for the
’03 dataset. We find that changing r has only a
small influence on performance.2
The construction of features for learning is or-
ganized by word groups. The most trivial group
is simply all words (basic). Considering the prop-
erties of the words themselves, we constructed
several features from properties such as capital-
ized words, non-stop words and words of cer-
tain length (cap+stop+len). We obtained another
set of features from the most frequently occur-
ing words in all the articles (minmax). We also
considered the position of a sentence (containing
2Setting r to 1 and thus eliminating the non-linearity does
lower the score (e.g. to 0.38466 for the pairwise model on
DUC ’03 compared with the results on Figure 3).
229
the word) in the article as another feature (loca-
tion). All those word groups can then be further
refined by selecting different thresholds, weight-
ing schemes (e.g. TFIDF) and forming binned
variants of these features.
For the pairwise model we use cosine similar-
ity between sentences using only words in a given
word group during computation. For the word
coverage model we create separate features for
covering words in different groups. This gives us
fairly comparable feature strength in both mod-
els. The only further addition is the use of differ-
ent word coverage levels in the coverage model.
First we consider how well does a sentence cover
a word (e.g. a sentence with five instances of the
same word might cover it better than another with
only a single instance). And secondly we look at
how important it is to cover a word (e.g. if a word
appears in a large fraction of sentences we might
want to be sure to cover it). Combining those two
criteria using different thresholds we get a set of
features for each word. Our coverage features are
motivated from the approach of Yue and Joachims
(2008). In contrast, the hand-tuned pairwise base-
line uses only TFIDF weighted cosine similarity
between sentences using all words, following the
approach in Lin and Bilmes (2010).
The resulting summaries are evaluated using
ROUGE version 1.5.5 (Lin and Hovy, 2003). We
selected the ROUGE-1 F measure because it was
used by Lin and Bilmes (2010) and because it is
one of the commonly used performance scores in
recent work. However, our learning method ap-
plies to other performance measures as well. Note
that we use the ROUGE-1 F measure both for the
loss function during learning, as well as for the
evaluation of the predicted summaries.
5.1 How does learning compare to manual
tuning?
In our first experiment, we compare our super-
vised learning approach to the hand-tuned ap-
proach. The results from this experiment are sum-
marized in Figure 3. First, supervised training
of the pairwise model (Lin and Bilmes, 2010)
resulted in a statistically significant (p ? 0.05
using paired t-test) increase in performance on
both datasets compared to our reimplementation
of the manually tuned pairwise model. Note that
our reimplementation of the approach of Lin and
Bilmes (2010) resulted in slightly different per-
formance numbers than those reported in Lin and
Bilmes (2010) – better on DUC ’03 and somewhat
lower on DUC ’04, if evaluated on the same selec-
tion of test examples as theirs. We conjecture that
this is due to small differences in implementation
and/or preprocessing of the dataset. Furthermore,
as authors of Lin and Bilmes (2010) note in their
paper, the ’03 and ’04 datasets behave quite dif-
ferently.
model dataset ROUGE-1 F (stderr)
pairwise DUC ’03 0.3929 (0.0074)
coverage 0.3784 (0.0059)
hand-tuned 0.3571 (0.0063)
pairwise DUC ’04 0.4066 (0.0061)
coverage 0.3992 (0.0054)
hand-tuned 0.3935 (0.0052)
Figure 3: Results obtained on DUC ’03 and ’04
datasets using the supervised models. Increase in per-
formance over the hand-tuned is statistically signifi-
cant (p ? 0.05) for the pairwise model on the both
datasets, but only on DUC ’03 for the coverage model.
Figure 3 also reports the performance for
the coverage model as trained by our algorithm.
These results can be compared against those for
the pairwise model. Since we are using features
of comparable strength in both approaches, as
well as the same greedy algorithm and structural
SVM learning method, this comparison largely
reflects the quality of models themselves. On the
’04 dataset both models achieve the same perfor-
mance while on ’03 the pairwise model performs
significantly (p ? 0.05) better than the coverage
model.
Overall, the pairwise model appears to perform
slightly better than the coverage model with the
datasets and features we used. Therefore, we fo-
cus on the pairwise model in the following.
5.2 How fast does the algorithm learn?
Hand-tuned approaches have limited flexibility.
Whenever we move to a significantly different
collection of documents we have to reinvest time
to retune it. Learning can make this adaptation
to a new collection more automatic and faster –
especially since training data has to be collected
even for manual tuning.
Figure 4 evaluates how effectively the learn-
ing algorithm can make use of a given amount of
training data. In particular, the figure shows the
230
Figure 4: Learning curve for the pairwise model on
DUC ’04 dataset showing ROUGE-1 F scores for
different numbers of learning examples (logarithmic
scale). The dashed line represents the preformance of
the hand-tuned model.
learning curve for our approach. Even with very
few training examples, the learning approach al-
ready outperforms the baseline. Furthermore, at
the maximum number of training examples avail-
able to us the curve still increases. We therefore
conjecture that more data would further improve
performance.
5.3 Where is room for improvement?
To get a rough estimate of what is actually achiev-
able in terms of the final ROUGE-1 F score, we
looked at different “upper bounds” under vari-
ous scenarios (Figure 5). First, ROUGE score
is computed by using four manual summaries
from different assessors, so that we can estimate
inter-subject disagreement. If one computes the
ROUGE score of a held-out summary against the
remaining three summaries, the resulting perfor-
mance is given in the row labeled human of Fig-
ure 5. It provides a reasonable estimate of human
performance.
Second, in extractive summarization we re-
strict summaries to sentences from the documents
themselves, which is likely to lead to a reduc-
tion in ROUGE. To estimate this drop, we use the
greedy algorithm to select the extractive summary
that maximizes ROUGE on the test documents.
The resulting performance is given in the row ex-
tractive of Figure 5. On both dataset, the drop
in performance for this (approximately3) optimal
3We compared the greedy algorithm with exhaustive
search for up to three selected sentences (more than that
would take too long). In about half the cases we got the same
solution, in other cases the soultion was on average about 1%
extractive summary is about 10 points of ROUGE.
Third, we expect some drop in performance,
since our model may not be able to fit the optimal
extractive summaries due to a lack of expressive-
ness. This can be estimated by looking at train-
ing set performance, as reported in row model fit
of Figure 5. On both datasets, we see a drop of
about 5 points of ROUGE performance. Adding
more and better features might help the model fit
the data better.
Finally, a last drop in performance may come
from overfitting. The test set ROUGE scores are
given in the row prediction of Figure 5. Note that
the drop between training and test performance
is rather small, so overfitting is not an issue and
is well controlled in our algorithm. We therefore
conclude that increasing model fidelity seems like
a promising direction for further improvements.
bound dataset ROUGE-1 F
human DUC ’03 0.56235
extractive 0.45497
model fit 0.40873
prediction 0.39294
human DUC ’04 0.55221
extractive 0.45199
model fit 0.40963
prediction 0.40662
Figure 5: Upper bounds on ROUGE-1 F scores: agree-
ment between manual summaries, greedily computed
best extractive summaries, best model fit on the train
set (using the best C value) and the test scores of the
pairwise model.
5.4 Which features are most useful?
To understand which features affected the final
performance of our approach, we assessed the
strength of each set of our features. In particu-
lar, we looked at how the final test score changes
when we removed certain features groups (de-
scribed in the beginning of Section 5) as shown
in Figure 6.
The most important group of features are the
basic features (pure cosine similarity between
sentences) since removing them results in the
largest drop in performance. However, other fea-
tures play a significant role too (i.e. only the ba-
sic ones are not enough to achieve good perfor-
below optimal confirming that greedy selection works quite
well.
231
mance). This confirms that performance can be
improved by adding richer fatures instead of us-
ing only a single similarity score as in Lin and
Bilmes (2010). Using learning for these complex
model is essential, since hand-tuning is likely to
be intractable.
The second most important group of features
considering the drop in performance (i.e. loca-
tion) looks at positions of sentences in the arti-
cles. This makes intuitive sense because the first
sentences in news articles are usually packed with
information. The other three groups do not have a
significant impact on their own.
removed ROUGE-1 F
group
none 0.40662
basic 0.38681
all except basic 0.39723
location 0.39782
sent+doc 0.39901
cap+stop+len 0.40273
minmax 0.40721
Figure 6: Effects of removing different feature groups
on the DUC ’04 dataset. Bold font marks significant
difference (p ? 0.05) when compared to the full pari-
wise model. The most important are basic similar-
ity features including all words (similar to (Lin and
Bilmes, 2010)). The last feature group actually low-
ered the score but is included in the model because we
only found this out later on DUC ’04 dataset.
5.5 How important is it to train with
multiple summaries?
While having four manual summaries may be im-
portant for computing a reliable ROUGE score
for evaluation, it is not clear whether such an ap-
proach is the most efficient use of annotator re-
sources for training. In our final experiment, we
trained our method using only a single manual
summary for each set of documents. When us-
ing only a single manual summary, we arbitrarily
took the first one out of the provided four refer-
ence summaries and used only it to compute the
target label for training (instead of using average
loss towards all four of them). Otherwise, the ex-
perimental setup was the same as in the previous
subsections, using the pairwise model.
For DUC ’04, the ROUGE-1 F score obtained
using only a single summary per document set
was 0.4010, which is slightly but not significantly
lower than the 0.4066 obtained with four sum-
maries (as shown on Figure 3). Similarly, on DUC
’03 the performance drop from 0.3929 to 0.3838
was not significant as well.
Based on those results, we conjecture that hav-
ing more documents sets with only a single man-
ual summary is more useful for training than
fewer training examples with better labels (i.e.
multiple summaries). In both cases, we spend
approximately the same amount of effort (as the
summaries are the most expensive component of
the training data), however having more training
examples helps (according to the learning curve
presented before) while spending effort on multi-
ple summaries appears to have only minor benefit
for training.
6 Conclusions
This paper presented a supervised learning ap-
proach to extractive document summarization
based on structual SVMs. The learning method
applies to all submodular scoring functions, rang-
ing from pairwise-similarity models to coverage-
based approaches. The learning problem is for-
mulated into a convex quadratic program and was
then solved approximately using a cutting-plane
method. In an empirical evaluation, the structural
SVM approach significantly outperforms conven-
tional hand-tuned models on the DUC ’03 and
’04 datasets. A key advantage of the learn-
ing approach is its ability to handle large num-
bers of features, providing substantial flexibility
for building high-fidelity summarization models.
Furthermore, it shows good control of overfitting,
making it possible to train models even with only
a few training examples.
Acknowledgments
We thank Claire Cardie and the members of the
Cornell NLP Seminar for their valuable feedback.
This research was funded in part through NSF
Awards IIS-0812091 and IIS-0905467.
References
T. Berg-Kirkpatrick, D. Gillick and D. Klein. Jointly
Learning to Extract and Compress. In Proceedings
of ACL, 2011.
S. Brin and L. Page. The Anatomy of a Large-Scale
232
Hypertextual Web Search Engine. In Proceedings of
WWW, 1998.
J. Carbonell and J. Goldstein. The use of MMR,
diversity-based reranking for reordering documents
and producing summaries. In Proceedings of SI-
GIR, 1998.
J. M. Conroy and D. P. O’leary. Text summarization via
hidden markov models. In Proceedings of SIGIR,
2001.
H. Daume´ III. Practical Structured Learning Tech-
niques for Natural Language Processing. Ph.D.
Thesis, 2006.
G. Erkan and D. R. Radev. LexRank: Graph-based
Lexical Centrality as Salience in Text Summariza-
tion. In Journal of Artificial Intelligence Research,
Vol. 22, 2004, pp. 457–479.
E. Filatova and V. Hatzivassiloglou. Event-Based Ex-
tractive Summarization. In Proceedings of ACL
Workshop on Summarization, 2004.
T. Finley and T. Joachims. Training structural SVMs
when exact inference is intractable. In Proceedings
of ICML, 2008.
D. Gillick and Y. Liu. A scalable global model for sum-
marization. In Proceedings of ACL Workshop on
Integer Linear Programming for Natural Language
Processing, 2009.
J. Goldstein, V. Mittal, J. Carbonell, and M.
Kantrowitz. Multi-document summarization by sen-
tence extraction. In Proceedings of NAACL-ANLP,
2000.
S. Khuller, A. Moss and J. Naor. The budgeted maxi-
mum coverage problem. In Information Processing
Letters, Vol. 70, Issue 1, 1999, pp. 39–45.
J. M. Kleinberg. Authoritative sources in a hyperlinked
environment. In Journal of the ACM, Vol. 46, Issue
5, 1999, pp. 604-632.
A. Kulesza and B. Taskar. Learning Determinantal
Point Processes. In Proceedings of UAI, 2011.
J. Kupiec, J. Pedersen, and F. Chen. A trainable docu-
ment summarizer. In Proceedings of SIGIR, 1995.
L. Li, Ke Zhou, G. Xue, H. Zha, and Y. Yu. Enhanc-
ing Diversity, Coverage and Balance for Summa-
rization through Structure Learning. In Proceedings
of WWW, 2009.
H. Lin and J. Bilmes. 2010. Multi-document summa-
rization via budgeted maximization of submodular
functions. In Proceedings of NAACL-HLT, 2010.
H. Lin and J. Bilmes. 2011. A Class of Submodu-
lar Functions for Document Summarization. In Pro-
ceedings of ACL-HLT, 2011.
C. Y. Lin and E. Hovy. Automatic evaluation of sum-
maries using N-gram co-occurrence statistics. In
Proceedings of NAACL, 2003.
F. T. Martins and N. A. Smith. Summarization with
a joint model for sentence extraction and compres-
sion. In Proceedings of ACL Workshop on Integer
Linear Programming for Natural Language Process-
ing, 2009.
R. McDonald. 2007. A Study of Global Inference Al-
gorithms in Multi-document Summarization. In Ad-
vances in Information Retrieval, Lecture Notes in
Computer Science, 2007, pp. 557–564.
D. Metzler and T. Kanungo. Machine learned sen-
tence selection strategies for query-biased summa-
rization. In Proceedings of SIGIR, 2008.
R. Mihalcea. 2004. Graph-based ranking algorithms
for sentence extraction, applied to text summa-
rization. In Proceedings of the ACL on Interactive
poster and demonstration sessions, 2004.
R. Mihalcea and P. Tarau. Textrank: Bringing order
into texts. In Proceedings of EMNLP, 2004.
T. Nomoto and Y. Matsumoto. A new approach to un-
supervised text summarization. In Proceedings of
SIGIR, 2001.
V. Qazvinian, D. R. Radev, and A. O¨zgu¨r. 2010. Cita-
tion Summarization Through Keyphrase Extraction.
In Proceedings of COLING, 2010.
K. Raman, T. Joachims and P. Shivaswamy. Structured
Learning of Two-Level Dynamic Rankings. In Pro-
ceedings of CIKM, 2011.
G. Salton and C. Buckley. Term-weighting approaches
in automatic text retrieval. In Information process-
ing and management, 1988, pp. 513–523.
D. Shen, J. T. Sun, H. Li, Q. Yang, and Z. Chen.
Document summarization using conditional ran-
dom fields. In Proceedings of IJCAI, 2007.
A. Swaminathan, C. V. Mathew and D. Kirovski.
Essential Pages. In Proceedings of WI-IAT, IEEE
Computer Society, 2009.
I. Tsochantaridis, T. Hofmann, T. Joachims and Y. Al-
tun. Large margin methods for structured and inter-
dependent output variables. In Journal of Machine
Learning Research, Vol. 6, 2005, pp. 1453-1484.
X. Wan, J. Yang, and J. Xiao. Collabsum: Exploit-
ing multiple document clustering for collaborative
single document summarizations. In Proceedings of
SIGIR, 2007.
Y. Yue and T. Joachims. Predicting diverse subsets us-
ing structural svms. In Proceedings of ICML, 2008.
233
